{"version":3,"names":[],"mappings":"","sources":["nite.loader.js"],"sourcesContent":["/*! JQuery Nite Loader | Daniele Fioroni | dfioroni91@gmail.com */\n(function (window, document, $, undefined) {\n    'use strict';\n\n    // thanks to https://github.com/paulmillr/console-polyfill\n    // - - - - - - - - - - - - - - - - - - - -\n    (function () {\n        if (!window.console) {\n            window.console = {};\n        }\n        let con = window.console,\n            prop, method,\n            dummy = function () { },\n            properties = ['memory'],\n            methods = ('assert,clear,count,debug,dir,dirxml,error,exception,group,' +\n                'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' +\n                'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',');\n        while (prop = properties.pop()) {\n            if (!con[prop]) {\n                con[prop] = {};\n            }\n        }\n        while (method = methods.pop()) {\n            if (!con[method]) {\n                con[method] = dummy;\n            }\n        }\n    })();\n    // - - - - - - - - - - - - - - - - - - - -\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n    // - - - - - - - - - - - - - - - - - - - -\n    (function () {\n        if (typeof window.CustomEvent === \"function\") {\n            return false; //If not IE\n        }\n        function CustomEvent(event, params) {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            let evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        }\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n    })();\n    // - - - - - - - - - - - - - - - - - - - -\n\n    // thanks to https://github.com/jsPolyfill/Array.prototype.findIndex\n    // - - - - - - - - - - - - - - - - - - - -\n    Array.prototype.findIndex = Array.prototype.findIndex || function (callback) {\n        if (this === null) {\n            throw new TypeError('Array.prototype.findIndex called on null or undefined');\n        } else if (typeof callback !== 'function') {\n            throw new TypeError('callback must be a function');\n        }\n        const\n            list = Object(this),\n            // Makes sures is always has an positive integer as length.\n            length = list.length >>> 0,\n            thisArg = arguments[1];\n        for (let i = 0; i < length; i++) {\n            if (callback.call(thisArg, list[i], i, list)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    // - - - - - - - - - - - - - - - - - - - -\n\n    // https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n    // - - - - - - - - - - - - - - - - - - - -\n    Array.isArray = Array.isArray || function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n    // - - - - - - - - - - - - - - - - - - - -\n\n    // thanks to https://gist.github.com/eliperelman/1031656\n    // - - - - - - - - - - - - - - - - - - - -\n    [].filter || (Array.prototype.filter = function (a, b, c, d, e) { c = this; d = []; for (e in c) ~~e + '' == e && e >= 0 && a.call(b, c[e], +e, c) && d.push(c[e]); return d })\n    // - - - - - - - - - - - - - - - - - - - -\n\n    const\n        generateInstanceID = function () {\n            return Math.floor(Math.random() * (9999 - 1000)) + 1000;\n        },\n        pluginPrefix = 'nite',\n        pluginMethod = pluginPrefix + 'Load',\n        pluginName = pluginMethod + 'er',\n        pluginInstance = generateInstanceID();\n\n    window[pluginName + 'Cache'] = [];\n\n    const\n        detachEventListener = (element, eventName) => {\n// TODO: func core + win global var with id .namspaced (like jQuery one)\n        },\n        attachEventListener = (element, eventName, oneTime) => {\n// TODO: func core + win global var with id .namspaced (like jQuery one)\n        },\n        isInArray = (needle, stack) => {\n            return stack.indexOf(needle) > -1;\n        },\n        capitalize = (string) => {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        },\n        isVisible = (element) => {\n\n            const\n                bodyEl = document.getElementsByTagName('body')[0],\n                winWidth = window.innerWidth || documnt.documentElement.clientWidth || bodyEl.clientWidth,\n                winHeight = window.innerHeight || documnt.documentElement.clientHeight || bodyEl.clientHeight,\n                rect = element.getBoundingClientRect();\n\n            return !(rect.right < 0 || rect.bottom < 0 || rect.left > winWidth || rect.top > winHeight) && window.getComputedStyle(element, 'display') !== 'none';\n\n        },\n        isHTMLObject = function (object) {\n\n            if (typeof object !== 'object') {\n                return false;\n            }\n\n            try {\n                return object instanceof HTMLElement;\n            }\n            catch (e) {\n                return object.nodeType === 1 && typeof object.style === 'object' && typeof object.ownerDocument === 'object';\n            }\n\n        },\n        isLoaded = function (element) {\n\n            return (\n                typeof element === 'string'\n                &&\n                isInArray(element, window[pluginName + 'Cache'])\n            )\n                || (\n                    isHTMLObject(element)\n                    && ('currentSrc' in element && element.currentSrc.length)\n                    && (('complete' in element && element.complete) || ('readyState' in element && element.readyState >= 2))\n                );\n\n        },\n        isBroken = function (element) {\n\n            return isLoaded(element) && (\n                (\n                    typeof element === 'object' && (\n                        ('naturalWidth' in element && Math.floor(element.naturalWidth) === 0)\n                        ||\n                        ('videoWidth' in element && element.videoWidth === 0)\n                    )\n                )\n                || typeof element === 'string' // todo check if is url maybe?\n            );\n\n        },\n        isFormat = function (item, expectedFormat) {\n\n            const\n                formatExtensions = {\n                    image: 'jp[e]?g||jpe|jif|jfif|jfi|gif|png|tif[f]?|bmp|dib|webp|ico|cur|svg',\n                    audio: 'mp3|ogg|oga|spx|ogg|wav',\n                    video: 'mp4|ogv|webm'\n                },\n                formatNames = Object.keys(formatExtensions),\n                base64Heading = '\\;base64\\,';\n\n            let output = { format: null, extension: null };\n\n            if (typeof item === 'string') {\n\n                item = item.split('?')[0]; // this gets rid of query strings\n                item = item.split('#')[0]; // this gets rid of hashes\n\n                if (item === '') {\n                    return false;\n                }\n\n                let formatQueue = undefined !== expectedFormat ? [expectedFormat] : formatNames;\n\n                for (const x in formatQueue) {\n\n                    if (formatQueue.hasOwnProperty(x)) {\n\n                        if (new RegExp('(\\.(' + formatExtensions[formatQueue[x]] + ')$)|' + base64Heading, 'g').test(item)) {\n\n                            if (new RegExp(base64Heading, 'g').test(item)) {\n\n                                let matches64 = item.match(new RegExp('^data:' + formatQueue[x] + '\\/(' + formatExtensions[formatQueue[x]] + ')', 'g'));\n\n                                if (!matches64 || null === matches64) {\n                                    continue;\n                                }\n\n                                matches64 = matches64[0];\n\n                                output.format = formatQueue[x];\n                                output.extension = matches64.replace('data:' + formatQueue[x] + '/', '');\n\n                                break;\n\n                            } else {\n\n                                let matches = item.match(new RegExp(formatExtensions[formatQueue[x]], 'g'));\n\n                                if (matches) {\n\n                                    output.format = formatQueue[x];\n                                    output.extension = matches[0];\n\n                                    break;\n\n                                }\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            if (isHTMLObject(item)) {\n\n                let tagName = item.tagName.toLowerCase();\n\n                if (isInArray(tagName, formatNames)) {\n                    output.format = item.tagName.toLowerCase();\n                }\n\n                if (tagName === 'img') {\n                    output.format = 'image';\n                }\n\n            }\n\n            return output;\n\n        };\n\n    class ResourceLoader {\n\n        constructor(options) {\n\n            // todo make _vars really private\n            // todo think about useful vars (this class is not public but its vars are returned in .progress() callback)\n            this._settings = {\n                srcAttr: 'data-src',\n                srcsetAttr: 'data-srcset',\n                playthrough: false,\n                visible: false,\n            };\n            this._settings = { ...this._settings, ...options };\n\n            this._id = null;\n            this._id_event = null;\n\n            this._element = null;\n\n            this._resource = null;\n            this._busy = false;\n\n            this._format = null;\n\n            this._done = () => {};\n            this._success = () => {};\n            this._error = () => {};\n\n            this._callback = (e) => {\n\n                this._busy = false;\n\n                const src = this._element.currentSrc || this._element.src;\n\n                if (!isInArray(src, window[pluginName + 'Cache']))\n                    window[pluginName + 'Cache'].push(src);\n\n                let this_arguments = [this._element, e.type, src, this._id];\n\n                this[e.type !== 'error' ? '_success' : '_error'].apply(this, this_arguments);\n                this._done.apply(this, this_arguments);\n\n            };\n\n        }\n\n        set resource(data) {\n\n            const\n                element_resource = isHTMLObject(data.resource),\n                string_resource = typeof data.resource === 'string';\n\n            if (!element_resource && !string_resource) {\n                return;\n            }\n\n            this._id = data.id;\n            this._format = isFormat(data.resource).format;\n\n            this._exists = element_resource; // todo maybe search for an element with this src\n\n            if (string_resource) {\n\n                let is_img = this._format === 'image';\n\n                this._element = document.createElement(is_img ? 'img' : this._format);\n\n                if (is_img) {\n                    this._settings.srcsetAttr = 'data-srcset';\n                }\n\n                this._settings.srcAttr = 'data-src';\n\n                this._resource = data.resource;\n\n            }\n\n            if (element_resource) {\n                this._element = data.resource;\n            }\n\n            if (string_resource) {\n\n                this._element.dataset[this._settings.srcAttr.replace('data-', '')] = this._resource;\n                this._element.dataset[this._settings.srcsetAttr.replace('data-', '')] = this._resource;\n                this._element.setAttribute(this._settings.srcAttr, this._resourc);\n                this._element.setAttribute(this._settings.srcsetAttr, this._resourc);\n\n            }\n\n            this._id_event = this._element[pluginInstance + '_IDEvent'];\n            this._busy = this._id_event !== undefined;\n            this._id_event = this._busy ? this._id_event : pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\n\n        }\n\n        /**\n         *\n         * @returns {boolean} se ha preso in carico il caricamento oppure no per vari motivi (è già caricato, non è nella viewport etc)\n         */\n        process() {\n\n            const\n                src = this._settings.srcAttr,\n                src_clean = this._settings.srcAttr.replace('data-', '');\n\n            if (isLoaded(this._exists ? this._element : this._resource)) {\n\n                if (!this._busy) {\n                    detachEventListener(this._elemnt, '.' + this._id_event); //FIXME: vanilla alt //TODO: this should be called when in callback\n                }\n\n                this._callback(new CustomEvent(!isBroken(this._exists ? this._element : this._resource) ? 'load' : 'error'));\n\n                return false;\n\n            } else if (this._exists && this._settings.visible && !isVisible(this._element)) {\n\n                return false;\n\n            } else {\n\n                if (this._format === 'image') {\n\n                    attachEventListener(this._element, 'load.' + this._id_event, this._callback, !this._busy);\n                    attachEventListener(this._element, 'error.' + this._id_event, this._callback, !this._busy);\n\n                    const\n                        picture = this._element.closest('picture'),\n                        srcset = this._settings.srcsetAttr,\n                        srcset_clean = this._settings.srcsetAttr.replace('data-', '');\n\n                    if (picture && 'HTMLPictureElement' in window) {\n\n                        delete this._element.dataset[srcset_clean];\n                        delete this._element.dataset[src_clean];\n                        this._element.removeAttribute(srcset);\n                        this._element.removeAttribute(src);\n\n                        picture.queryAll('source[' + srcset + ']').forEach((el) => {\n                            el.addAttribute('srcset', this._element.dataset[srcset_clean]);\n                            delete this._element.dataset[srcset_clean];\n                            el.removeAttribute(srcset);\n                        });\n\n                    } else {\n\n                        if (this._element.matches('[' + srcset + ']')) {\n                            this._element.addAttribute('srcset', this._element.dataset[srcset_clean]);\n                            delete this._element.dataset[srcset_clean];\n                            this._element.removeAttribute(srcset);\n                        }\n\n                        if (this._element.matches('[' + src + ']')) {\n                            this._element.addAttribute('src', this._element.dataset[src_clean]);\n                            delete this._element.dataset[src_clean];\n                            this._element.removeAttribute(src);\n                        }\n\n                    }\n\n                } else if (this._format === 'video' || this._format === 'audio') {\n\n                    const\n\n                        is_playthrough_mode__normal = true === this._settings.playthrough,\n                        is_playthrough_mode__full = 'full' === this._settings.playthrough,\n\n                        sources = this._element.queryAll('source'),\n                        isFullyBuffered = function (media) {\n\n                            return media.buffered.length && Math.round(media.buffered.end(0)) / Math.round(media.seekable.end(0)) === 1;\n\n                        };\n\n                    let call_media_load = false;\n\n                    if (sources) {\n\n                        sources.forEach((source) => {\n\n                            if (source.matches('[' + src + ']')) {\n\n                                source.setAttribute('src', source.dataset[src_clean]);\n                                delete source.dataset[src_clean];\n                                source.removeAttribute(src);\n\n                                call_media_load = true;\n\n                            }\n\n                            attachEventListener(source, 'error.' + this._id_event, (e) => {\n\n                                const sources_error_id = pluginName + '_error';\n    \n                                source[pluginInstance + '_' + sources_error_id] = true;\n    \n                                if ( sources.length === sources.filter(() => true === source[pluginInstance + '_' + sources_error_id] ).length ) {\n                                    this._callback(e);\n                                }\n    \n                            }, !this._busy);\n\n                        });\n\n                    } else {\n\n                        if (this._element.matches('[' + src + ']')) {\n\n                            this._element.setAttribute('src', this._$element.data(src_clean));\n                            delete this._element.dataset[src_clean];\n                            this._element.removeAttribute(src);\n\n                            attachEventListener(this._element, 'error.' + this._id_event, this._callback, !this._busy);\n\n                            call_media_load = true;\n\n                        }\n\n                    }\n\n                    if (call_media_load) {\n                        this._element.load();\n                    }\n\n\n                    attachEventListener(this._element, 'loadedmetadata.' + this._id_event, () => {\n\n                        if (!is_playthrough_mode__normal && !is_playthrough_mode__full) {\n                            this._callback(new CustomEvent('load'));\n                        }\n\n                        if (is_playthrough_mode__full) {\n\n                            let on_progress_replacement_interval = setInterval(() => {\n\n                                let is_error = this._element.readyState > 0 && !this._element.duration;\n\n                                if (is_error || isFullyBuffered(this._element)) {\n\n                                    this._element.currentTime = 0;\n\n                                    if (!is_error && !this._busy && this._element.paused && this._element.matches('[autoplay]')) {\n                                        this._element.play();\n                                    }\n\n                                    clearInterval(on_progress_replacement_interval);\n\n                                    this._callback(new CustomEvent(!is_error ? 'load' : 'error'));\n\n                                } else {\n\n                                    if (!this._element.paused) {\n                                        this._element.pause();\n                                    }\n\n                                    if (!this._busy) {\n                                        this._element.currentTime += 2;\n                                    }\n\n                                }\n\n                            }, 500);\n\n                            this._element[ pluginName +'_'+ this._id_event ] = on_progress_replacement_interval;\n\n                        }\n\n                    }, !this._busy);\n\n                    attachEventListener(this._element, 'canplay.' + this._id_event, () => {\n                        if (is_playthrough_mode__full && this._element.currentTime === 0 && !isFullyBuffered(this._element)) {\n                            this._element.currentTime++;\n                        }\n                    }, !this._busy);\n\n                    attachEventListener(this._element, 'canplaythrough.' + this._id_event, () => {\n                        if (is_playthrough_mode__normal) {\n                            this._callback(new CustomEvent('load'));\n                        }\n                    }, !this._busy);\n\n                } else {\n\n                    return false;\n\n                }\n\n                if (!this._busy) {\n                    this._element[pluginInstance + '_IDEvent'] = this._id_event;\n                }\n\n            }\n\n            this._resource = this._element.currentSrc || this._element.src;\n\n            return !this._busy;\n\n        }\n\n        done(callback) {\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            this._done = function (element, status, resource, id) {\n                callback.apply(this, [element, status, resource, id]);\n            };\n\n        };\n\n        abort() {\n\n            detachEventListener(this._elemnt, '.' + this._id_event);\n\n            if (isLoaded(this._exists ? this._element : this._resource)) {\n                return;\n            }\n\n            const\n                src = this._element.getAttribute('srcset'),\n                srcset = this._element.getAttribute('src');\n\n            if (undefined !== src) {\n                this._element.dataset[src] = this._settings.srcAttr;\n                this._element.setAttribute(this._settings.srcAttr, src);\n                this._element.removeAttribute('src');\n                this._element.removeAttribute('srcset');\n            }\n\n            if (undefined !== srcset) {\n                this._element.dataset[srcset] = this._settings.srcsetAttr;\n                this._element.setAttribute(this._settings.srcsetAttr, srcset);\n                this._element.removeAttribute('src');\n                this._element.removeAttribute('srcset');\n            }\n\n        }\n\n    }\n\n    class ResourcesLoader {\n\n        constructor(collection, options) {\n\n            // todo make _vars really private\n            this._collection = [];\n            this._collection_loaded = [];\n            this._collection_instances = [];\n            this._collection_pending = [];\n            this._resources_loaded = [];\n\n            if (Array.isArray(collection) && (typeof collection[0] === 'string' || isHTMLObject(collection[0]))) {\n                for (const resource in collection) {\n                    if (collection.hasOwnProperty(resource)) {\n                        this._collection.push({ id: generateInstanceID(), resource: collection[resource] });\n                    }\n                }\n            }\n            if (typeof collection === 'string' || isHTMLObject(collection)) {\n                this._collection.push({ id: generateInstanceID(), resource: collection });\n            }\n\n            this._settings = {\n                srcAttr: 'data-src',\n                srcsetAttr: 'data-srcset',\n                playthrough: false,\n                visible: false,\n            };\n            this._settings = { ...this._settings, ...options };\n\n            this.percentage = 0;\n\n            this._done = () => { };\n            this._progress = () => { };\n            this._success = () => { };\n            this._error = () => { };\n\n            this._abort = false;\n            this._loaded = 0;\n            this._complete = false;\n            this._busy = false;\n\n            // self invoking this._loop + force asynchrony (gives time to chain methods synchronously)\n            (this._loop = () => setTimeout(() => this.loop(), 25))();\n\n        }\n\n        loop() {\n\n            this._collection_pending = []; // resets pending elements (sequential opt helper array) every time we loop\n\n            const sequential_mode = true === this._settings.sequential;\n\n            for (let i = 0; i < this._collection.length; i++) {\n\n                if (this._abort) {\n                    break;\n                }\n\n                let this_load_id = this._collection[i].id,\n                    this_load_index = this._collection_instances.findIndex(x => x.id === this_load_id),\n                    this_load_instance = new ResourceLoader(this._settings);\n\n                if (this_load_index === -1) {\n                    this._collection_instances.push({ id: this_load_id, instance: this_load_instance });\n                    this_load_index = this._collection_instances.findIndex(x => x.id === this_load_id);\n                } else {\n                    this._collection_instances[this_load_index].instance = this_load_instance;\n                }\n\n                this_load_instance.resource = this._collection[i];\n\n                this_load_instance.done((element, status, resource, id) => {\n\n                    if (this._complete || this._abort) {\n                        return;\n                    }\n\n                    let a_progress = !isInArray(id, this._collection_loaded);\n\n                    if (a_progress) {\n\n                        this._collection_loaded.push(id);\n                        this._busy = false;\n\n                        this._loaded++;\n                        this.percentage = this._loaded / this._collection.length * 100;\n                        this.percentage = parseFloat(this.percentage.toFixed(4));\n\n                        let this_resource = { resource: resource, status: status };\n                        this._resources_loaded.push(this_resource);\n\n                        this._progress.call(this, this_resource);\n                        this[status !== 'error' ? '_success' : '_error'].call(this, this_resource);\n\n                        if( $ ){ // TODO: clean?\n                            $(element).trigger(pluginPrefix + capitalize(status) + '.' + pluginPrefix, [element, resource]);\n                        }\n\n                    }\n\n                    if (this._loaded === this._collection.length) {\n\n                        this._done.call(this, this._resources_loaded);\n\n                        this._complete = true;\n\n                    } else if (a_progress && sequential_mode) {\n\n                        if (this._collection_pending.length) {\n\n                            this._collection_pending = this._collection_pending.filter(x => x.id !== id);\n                            this._collection_pending = this._collection_pending.filter(x => x.id !== id);\n\n                            if (this._collection_pending.length) {\n                                this._busy = this._collection_pending[0].instance.process();\n                            }\n\n                        }\n\n                    }\n\n                });\n\n                if (!sequential_mode || (sequential_mode && !this._busy)) {\n                    this._busy = this_load_instance.process();\n                }\n\n                else if (sequential_mode && this._busy) {\n\n                    if (!this._settings.visible || (this._settings.visible && isVisible(this_load_instance._element))) {\n                        this._collection_pending.push({ id: this_load_id, instance: this_load_instance });\n                    }\n\n                }\n\n\n            }\n\n        }\n\n        done(callback) { // todo refactory\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            const _func = function (resources) {\n                callback.call(this, resources);\n            };\n\n            if (this._collection.length) {\n\n                this._done = _func;\n\n                this._loop();\n\n            } else {\n                _func();\n            }\n\n        };\n\n        progress(callback) { // todo refactory\n\n            if (typeof callback !== 'function')\n                return;\n\n            const _func = function (resource) {\n                callback.call(this, resource);\n            };\n\n            if (this._collection.length) {\n\n                this._progress = _func;\n\n                this._loop();\n\n            }\n\n        };\n\n        success(callback) { // todo refactory\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            const _func = function (resource) {\n                callback.call(this, resource);\n            };\n\n            if (this._collection.length) {\n\n                this._success = _func;\n\n                this._loop();\n\n            }\n\n        };\n\n        error(callback) { // todo refactory\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            const _func = function (resource) {\n                callback.call(this, resource);\n            };\n\n            if (this._collection.length) {\n\n                this._error = _func;\n\n                this._loop();\n\n            }\n\n        };\n\n        abort() {\n\n            for (const key in this._collection_instances) {\n                this._collection_instances[key].instance.abort();\n            }\n\n            if (this._collection.length) {\n                this._abort = true;\n            }\n\n        };\n\n    }\n\n    // vanilla public interface\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // requirejs syntax\n    if (typeof define === 'function' && define.amd) {\n        define(pluginMethod, pluginMethod);\n        // nodejs syntax\n    } else if ('object' === typeof exports) {\n        module.exports[pluginMethod] = pluginMethod;\n        // standard \"global variable\" syntax\n    } else {\n        window[pluginMethod] = pluginMethod;\n    }\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    // from here jQuery is needed\n    // - - - - - - - - - - - - - - - - - - - -\n    if (!$) {\n        return undefined;\n    }\n    // - - - - - - - - - - - - - - - - - - - -\n\n    $[pluginMethod] = ResourcesLoader;\n\n    class CollectionPopulator {\n\n        constructor($element, options) {\n\n            this._$element = $element;\n            this._element = $element[0];\n\n            this._settings = {\n                srcAttr: 'data-src',\n                srcsetAttr: 'data-srcset',\n                backgrounds: false,\n                attributes: []\n            };\n            this._settings = {...this._settings, ...options};\n\n        }\n\n        collect(output) {\n\n            let collection = [];\n\n            const\n                is_plain_data_collection = output === 'plain',\n\n                src = this._settings.srcAttr,\n                srcset = this._settings.srcsetAttr,\n\n                targets = 'img, video, audio',\n                targets_extended = targets + ', picture, source';\n\n            let $targets = this._$element.find(targets);\n            if (this._$element.is(targets)) {\n                $targets = $targets.add(this._$element);\n            }\n            $targets = $targets.filter(function () {\n                let $t = $(this),\n                    filter = '[' + src + '], [' + srcset + ']';\n                return $t.is(filter) || $t.children(targets_extended).filter(filter).length;\n            });\n            $targets.each(function () {\n\n                let collection_item = {\n                    element: this,\n                    resource: $(this).attr(src) || $(this).attr(srcset)\n                };\n\n                if (is_plain_data_collection) {\n                    collection_item = collection_item.element;\n                }\n\n                collection.push(collection_item);\n\n            });\n\n            if (true === this._settings.backgrounds)\n                this._$element.find('*').addBack().not(targets_extended).filter(function () {\n                    return $(this).css('background-image') !== 'none';\n                }).each(function () {\n\n                    const url = $(this).css('background-image').match(/\\((.*?)\\)/);\n\n                    if (null === url || url.length < 2) {\n                        return true;\n                    }\n\n                    let collection_item = {\n                        element: this,\n                        resource: url[1].replace(/('|\")/g, '')\n                    };\n\n                    if (is_plain_data_collection) {\n                        collection_item = collection_item.resource;\n                    }\n\n                    collection.push(collection_item);\n\n                });\n\n            if (this._settings.attributes.length)\n                for (const attr in this._settings.attributes) {\n                    if (this._settings.attributes.hasOwnProperty(attr)) {\n\n                        this._$element.find('[' + attr + ']:not(' + targets_extended + ')').each(function () {\n\n                            let collection_item = {\n                                element: this,\n                                resource: $(this).attr(attr)\n                            };\n\n                            if (is_plain_data_collection) {\n                                collection_item = collection_item.resource;\n                            }\n\n                            collection.push(collection_item);\n\n                        });\n\n                        if (this._$element.is('[' + attr + ']') && !this._$element.is(targets_extended)) {\n\n                            let collection_item = {\n                                element: this._element,\n                                resource: this._$element.attr(attr)\n                            };\n\n                            if (is_plain_data_collection) {\n                                collection_item = collection_item.resource;\n                            }\n\n                            collection.push(collection_item);\n\n                        }\n\n                    }\n                }\n\n            return collection;\n\n        }\n\n    }\n\n    const\n        $document = $(document),\n        $window = $(window),\n        // thanks https://gist.github.com/beaucharman/e46b8e4d03ef30480d7f4db5a78498ca\n        throttle = (callback, wait, context = this) => {\n            let timeout = null,\n                callbackArgs = null\n            const later = () => {\n                callback.apply(context, callbackArgs)\n                timeout = null\n            }\n            return function () {\n                if (!timeout) {\n                    callbackArgs = arguments\n                    timeout = setTimeout(later, wait)\n                }\n            }\n        };\n\n    let method_collection = [];\n\n    $.fn[pluginMethod] = function (options) {\n\n        let original_user_options = options;\n\n        if (typeof options !== 'object') {\n            options = {};\n        }\n\n        let settings = {\n\n            srcAttr: 'data-src',\n            srcsetAttr: 'data-srcset',\n\n            visible: false,\n\n            sequential: false,\n\n            backgrounds: false,\n            extraAttrs: [],\n\n            playthrough: false,\n\n            early: false,\n            earlyTimeout: 0,\n\n            onProgress: () => { },\n            onLoad: () => { },\n            onError: () => { },\n\n            onComplete: () => { },\n\n        };\n        settings = {...settings,...options};\n\n        let callback = settings.onComplete;\n        if ($.isFunction(original_user_options)) {\n            callback = original_user_options;\n        }\n\n        if (!$.isArray(settings.attributes)) {\n            settings.attributes = [];\n        }\n        if (typeof settings.attributes === 'string') {\n            settings.attributes = settings.attributes.split(' ');\n        }\n\n        return this.each(function (i) {\n\n            const\n                element = this,\n                $element = $(element),\n                collection = new CollectionPopulator($element, settings).collect('plain'),\n                unique_method_pluginName = generateInstanceID() + i,\n\n                this_load_instance = new ResourcesLoader(collection, settings);\n\n            method_collection.push({\n                id: unique_method_pluginName,\n                instance: this_load_instance,\n                element: element,\n                timeout: null\n            });\n\n            this_load_instance.progress(function (resource) {\n\n                $element.trigger(pluginPrefix + 'Progress.' + pluginPrefix, [element, resource]);\n\n                const this_arguments = [this_load_instance, resource];\n\n                if (typeof settings.onProgress === 'function') {\n                    settings.onProgress.apply(element, this_arguments);\n                }\n\n                let event_name = capitalize(resource.status);\n                if (typeof settings['on' + event_name] === 'function') {\n                    settings['on' + event_name].apply(element, this_arguments);\n                }\n\n            });\n\n            this_load_instance.done(function (resources) {\n\n                $element.trigger(pluginPrefix + 'Complete.' + pluginPrefix, [element, resources]);\n                callback.apply(element, [this_load_instance, resources]);\n\n                if (settings.visible) {\n                    $window.off('scroll.' + unique_method_pluginName);\n                }\n\n                // refresh other method calls for same el (omitting this one)\n                method_collection = method_collection.filter(x => x.id !== unique_method_pluginName);\n                method_collection.forEach((this_method_collection) => {\n                    if ($element.is(this_method_collection.element)) {\n                        this_method_collection.instance.loop();\n                    }\n                });\n\n            });\n\n            if (settings.visible) {\n                $window.on('scroll.' + unique_method_pluginName, throttle(() => this_load_instance.loop(), 250));\n            }\n\n            if (true === settings.early) for (let key in method_collection) {\n\n                let this_method_collection = method_collection[key];\n\n                if (method_collection[key].id === unique_method_pluginName) {\n\n                    clearTimeout(this_method_collection.timeout);\n\n                    let timeout = parseInt(settings.earlyTimeout);\n\n                    this_method_collection.timeout = setTimeout(function () {\n\n                        // todo appropriate method for setting settings?\n                        this_method_collection.instance._settings.visible = false;\n                        this_method_collection.instance._settings.sequential = true;\n\n                        this_method_collection.instance.loop();\n\n                    }, !isNaN(timeout) && isFinite(timeout) ? timeout : 0);\n\n                    break;\n\n                }\n\n            }\n\n        });\n\n    };\n\n})(window, document, jQuery);"],"file":"nite.loader.js"}