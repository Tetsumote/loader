{"version":3,"names":[],"mappings":"","sources":["nite.loader.js"],"sourcesContent":["/*! Nite Loader | Daniele Fioroni | dfioroni91@gmail.com */\r\n(() => {\r\n\t'use strict';\r\n\r\n\t/**\r\n\t * @returns {string}\r\n\t */\r\n\tconst generateInstanceID = () => {\r\n\t\treturn Math.floor(Math.random() * (9999 - 1000)) + 1000;\r\n\t};\r\n\r\n\tconst pluginPrefix = 'nite';\r\n\tconst pluginMethod = pluginPrefix + 'Load';\r\n\tconst pluginName = pluginMethod + 'er';\r\n\tconst pluginInstance = generateInstanceID();\r\n\tconst eventNamespaceParserSeparator = '__namespace__';\r\n\r\n\tconst CustomEvent =\r\n\t\twindow.CustomEvent ||\r\n\t\t(() => {\r\n\t\t\tconst _polyfill = (event, params) => {\r\n\t\t\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\r\n\t\t\t\tconst evt = document.createEvent('CustomEvent');\r\n\t\t\t\tevt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n\t\t\t\treturn evt;\r\n\t\t\t};\r\n\t\t\t_polyfill.prototype = window.Event.prototype;\r\n\t\t\treturn _polyfill;\r\n\t\t})();\r\n\r\n\tconst supportedExtensions = {\r\n\t\timage: 'jp[e]?g|jpe|jif|jfif|jfi|gif|png|tif[f]?|bmp|dib|webp|ico|cur|svg',\r\n\t\taudio: 'mp3|ogg|oga|spx|ogg|wav',\r\n\t\tvideo: 'mp4|ogv|webm'\r\n\t};\r\n\tconst supportedTags = {\r\n\t\timage: 'img|picture|source',\r\n\t\taudio: 'audio|source',\r\n\t\tvideo: 'video|source'\r\n\t};\r\n\r\n\tconst IntersectionObserverSupported = 'IntersectionObserver' in window;\r\n\tconst pictureElementSupported = 'HTMLPictureElement' in window;\r\n\r\n\t/**\r\n\t * @param {string} heystack\r\n\t * @param {string} needle\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst stringContains = (heystack, needle) => {\r\n\t\treturn String.prototype.includes ? heystack.includes(needle) : heystack.indexOf(needle, 0) !== -1;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {string} heystack\r\n\t * @param {string} needle\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst stringStartsWith = (heystack, needle) => {\r\n\t\treturn String.prototype.startsWith\r\n\t\t\t? heystack.startsWith(needle)\r\n\t\t\t: heystack.substr(0, needle.length) === needle;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {Array} heystack\r\n\t * @param {Function} filter\r\n\t * @returns {number}\r\n\t */\r\n\tconst arrayFindIndex = (heystack, filter) => {\r\n\t\treturn Array.prototype.findIndex\r\n\t\t\t? heystack.findIndex(filter)\r\n\t\t\t: (() => {\r\n\t\t\t\t\tlet length = heystack.length,\r\n\t\t\t\t\t\tindex = -1;\r\n\t\t\t\t\twhile (++index < length) {\r\n\t\t\t\t\t\tif (filter(heystack[index], index, heystack)) {\r\n\t\t\t\t\t\t\treturn index;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn -1;\r\n\t\t\t  })();\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} element\r\n\t * @param {string} events\r\n\t * @returns {undefined}\r\n\t */\r\n\tconst detachEventListener = (element, events) => {\r\n\t\tif (!element || typeof events !== 'string') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (stringStartsWith(events, '.')) {\r\n\t\t\tfor (let key in privateEventsStorage) {\r\n\t\t\t\tconst eventNameWithNamespace = key.replace(eventNamespaceParserSeparator, '.');\r\n\t\t\t\tif (\r\n\t\t\t\t\tstringContains(eventNameWithNamespace, events) &&\r\n\t\t\t\t\tprivateEventsStorage[key].element === element\r\n\t\t\t\t) {\r\n\t\t\t\t\tdetachEventListener(element, eventNameWithNamespace);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tevents = events.split('.');\r\n\r\n\t\t\tconst type = events[0],\r\n\t\t\t\tnamespace = events[1];\r\n\r\n\t\t\tif (namespace) {\r\n\t\t\t\tevents = events.join(eventNamespaceParserSeparator);\r\n\t\t\t}\r\n\r\n\t\t\tif (events in privateEventsStorage) {\r\n\t\t\t\telement.removeEventListener(type, privateEventsStorage[events].handler);\r\n\t\t\t\tdelete privateEventsStorage[events];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} element\r\n\t * @param {string} events\r\n\t * @param {Function} handler\r\n\t * @param {boolean} once\r\n\t * @returns {undefined}\r\n\t */\r\n\tconst attachEventListener = (element, events, handler, once) => {\r\n\t\tif (!element || typeof events !== 'string' || typeof handler !== 'function') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tevents = events.split('.');\r\n\r\n\t\tconst type = events[0];\r\n\t\tconst namespace = events[1];\r\n\r\n\t\tif (namespace) {\r\n\t\t\tevents = events.join(eventNamespaceParserSeparator);\r\n\t\t}\r\n\r\n\t\tprivateEventsStorage[events] = { element: element, count: 0, once: false };\r\n\r\n\t\tif (true === once) {\r\n\t\t\tlet _handler = handler;\r\n\t\t\thandler = function(event) {\r\n\t\t\t\tif (events in privateEventsStorage) {\r\n\t\t\t\t\tprivateEventsStorage[events].count++;\r\n\t\t\t\t\tif (privateEventsStorage[events].once && privateEventsStorage[events].count > 1) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_handler.call(this, event);\r\n\t\t\t\t}\r\n\t\t\t\tdetachEventListener(element, events);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tonce = false;\r\n\t\t}\r\n\r\n\t\tprivateEventsStorage[events] = {\r\n\t\t\t...privateEventsStorage[events],\r\n\t\t\t...{ handler: handler, once: once }\r\n\t\t};\r\n\r\n\t\telement.addEventListener(type, privateEventsStorage[events].handler, { once: once });\r\n\t};\r\n\r\n\t/**\r\n\t * @param {string} string\r\n\t * @returns {string}\r\n\t */\r\n\tconst hyphensToCamelCase = string => {\r\n\t\treturn string.replace(/-([a-z])/g, g => g[1].toUpperCase());\r\n\t};\r\n\r\n\t/**\r\n\t * @param {string} string\r\n\t * @returns {string}\r\n\t */\r\n\tconst capitalize = string => {\r\n\t\treturn string.charAt(0).toUpperCase() + string.slice(1);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {NodeList} nodelist\r\n\t * @returns {Array}\r\n\t */\r\n\tconst nodelistToArray = nodelist => {\r\n\t\treturn [...nodelist];\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String|number} needle\r\n\t * @param {Array} heystack\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst isInArray = (needle, heystack) => {\r\n\t\treturn heystack.indexOf(needle) > -1;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} element\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst isVisible = element => {\r\n\t\tif (IntersectionObserverSupported && 'intersectionRatio' in element) {\r\n\t\t\treturn element.intersectionRatio > 0;\r\n\t\t}\r\n\r\n\t\tif (window.getComputedStyle(element, 'display') === 'none') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst bodyEl = document.getElementsByTagName('body')[0];\r\n\t\tconst winWidth = window.innerWidth || documnt.documentElement.clientWidth || bodyEl.clientWidth;\r\n\t\tconst winHeight = window.innerHeight || documnt.documentElement.clientHeight || bodyEl.clientHeight;\r\n\t\tconst rect = element.getBoundingClientRect();\r\n\r\n\t\treturn !(rect.right < 0 || rect.bottom < 0 || rect.left > winWidth || rect.top > winHeight);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} element\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst isHTMLElement = element => {\r\n\t\tif (typeof element !== 'object') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn element instanceof HTMLElement;\r\n\t\t} catch (e) {\r\n\t\t\treturn (\r\n\t\t\t\telement.nodeType === 1 &&\r\n\t\t\t\ttypeof element.style === 'object' &&\r\n\t\t\t\ttypeof element.ownerDocument === 'object'\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @param {(string|HTMLVideoElement|HTMLAudioElement|HTMLImageElement)} source\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst isLoaded = source => {\r\n\t\treturn (\r\n\t\t\t(typeof source === 'string' && isInArray(source, privateCache)) ||\r\n\t\t\t(isHTMLElement(source) &&\r\n\t\t\t\t('currentSrc' in source && source.currentSrc.length > 0) &&\r\n\t\t\t\t(('complete' in source && source.complete) ||\r\n\t\t\t\t\t('readyState' in source && source.readyState >= 2)))\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {(HTMLVideoElement|HTMLAudioElement)} source\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst isFullyBuffered = media => {\r\n\t\treturn (\r\n\t\t\tmedia.buffered.length &&\r\n\t\t\tMath.round(media.buffered.end(0)) / Math.round(media.seekable.end(0)) === 1\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {(string|HTMLElement)} source\r\n\t * @returns {boolean}\r\n\t */\r\n\tconst isBroken = source => {\r\n\t\treturn (\r\n\t\t\tisLoaded(source) &&\r\n\t\t\t((isHTMLElement(source) &&\r\n\t\t\t\t(('naturalWidth' in source && Math.floor(source.naturalWidth) === 0) ||\r\n\t\t\t\t\t('videoWidth' in source && source.videoWidth === 0))) ||\r\n\t\t\t\ttypeof source === 'string')\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {Object} resource\r\n\t * @returns {Object}\r\n\t */\r\n\tconst decodeResource = resource => {\r\n\t\tlet output = { format: null, extension: null, tag: null, consistent: false };\r\n\r\n\t\tresource.resource = resource.resource.split('?')[0];\r\n\t\tresource.resource = resource.resource.split('#')[0];\r\n\t\tfor (let formatCandidate in supportedExtensions) {\r\n\t\t\tconst base64Heading = ';base64,';\r\n\r\n\t\t\tif (\r\n\t\t\t\tnew RegExp('(.(' + supportedExtensions[formatCandidate] + ')$)|' + base64Heading, 'g').test(\r\n\t\t\t\t\tresource.resource\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\tif (new RegExp(base64Heading, 'g').test(resource.resource)) {\r\n\t\t\t\t\tlet matches64 = resource.resource.match(\r\n\t\t\t\t\t\tnew RegExp(\r\n\t\t\t\t\t\t\t'^data:' + formatCandidate + '/(' + supportedExtensions[formatCandidate] + ')',\r\n\t\t\t\t\t\t\t'g'\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (null === matches64) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmatches64 = matches64[0];\r\n\r\n\t\t\t\t\toutput.format = formatCandidate;\r\n\t\t\t\t\toutput.extension = matches64.replace('data:' + formatCandidate + '/', '');\r\n\t\t\t\t\toutput.tag = supportedTags[formatCandidate];\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet matches = resource.resource.match(\r\n\t\t\t\t\t\tnew RegExp(supportedExtensions[formatCandidate], 'g')\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (matches) {\r\n\t\t\t\t\t\toutput.format = formatCandidate;\r\n\t\t\t\t\t\toutput.extension = matches[0];\r\n\t\t\t\t\t\toutput.tag = supportedTags[formatCandidate];\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isHTMLElement(resource.element)) {\r\n\t\t\tlet tagName = resource.element.tagName.toLowerCase();\r\n\t\t\tlet allTags = '';\r\n\r\n\t\t\tObject.values(supportedTags).forEach(tags => {\r\n\t\t\t\tallTags += '|' + tags;\r\n\t\t\t});\r\n\r\n\t\t\tallTags = allTags.split('|');\r\n\r\n\t\t\tif (isInArray(tagName, allTags)) {\r\n\t\t\t\toutput.tag = tagName;\r\n\t\t\t\toutput.consistent = true;\r\n\t\t\t\tif (output.format === null) {\r\n\t\t\t\t\tfor (let format in supportedTags) {\r\n\t\t\t\t\t\tif (stringContains(supportedTags[format], output.tag)) {\r\n\t\t\t\t\t\t\toutput.format = format;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (stringContains(output.tag, '|')) {\r\n\t\t\toutput.tag = output.tag.split('|')[0];\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t};\r\n\r\n\tlet privateEventsStorage = {};\r\n\r\n\tlet privateCache = [];\r\n\r\n\t// TODO: Promise support\r\n\t// TODO: think about useful vars in callback args (this class is not public but its vars are returned in .progress() callback)\r\n\t/** TODO: description of the MyClass constructor function.\r\n\t * @class\r\n\t * @classdesc TODO: description of the SingleLoader class.\r\n\t */\r\n\tclass SingleLoader {\r\n\t\t/**\r\n\t\t * @param {Object} [options={ srcAttr: 'data-src', srcsetAttr: 'data-srcset', playthrough: false, visible: false }]\r\n\t\t */\r\n\t\tconstructor(options) {\r\n\t\t\tthis._settings = {\r\n\t\t\t\t...{\r\n\t\t\t\t\tsrcAttr: 'data-src',\r\n\t\t\t\t\tsrcsetAttr: 'data-srcset',\r\n\t\t\t\t\tplaythrough: false,\r\n\t\t\t\t\tvisible: false\r\n\t\t\t\t},\r\n\t\t\t\t...options\r\n\t\t\t};\r\n\r\n\t\t\tif (\r\n\t\t\t\t!stringStartsWith(this._settings.srcAttr, 'data-') ||\r\n\t\t\t\t!stringStartsWith(this._settings.srcsetAttr, 'data-')\r\n\t\t\t) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t'Wrong arguments format: srcAttr and srcsetAttr parameters must be dataset values.'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tthis.srcAttr = hyphensToCamelCase(this._settings.srcAttr.replace('data-', ''));\r\n\t\t\tthis.srcsetAttr = hyphensToCamelCase(this._settings.srcsetAttr.replace('data-', ''));\r\n\r\n\t\t\tthis._id = null;\r\n\t\t\tthis._idEvent = null;\r\n\t\t\tthis._busy = false;\r\n\r\n\t\t\tthis._element = null;\r\n\t\t\tthis._resource = null;\r\n\t\t\tthis._format = null;\r\n\t\t\tthis._observer = null;\r\n\r\n\t\t\tthis._done = () => {};\r\n\t\t\tthis._success = () => {};\r\n\t\t\tthis._error = () => {};\r\n\r\n\t\t\tthis._callback = e => {\r\n\t\t\t\tthis._busy = false;\r\n\t\t\t\tif (null !== this._observer) {\r\n\t\t\t\t\tthis._observer.unobserve(this._element);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst src = this._element.currentSrc || this._element.src;\r\n\r\n\t\t\t\tif (!isInArray(src, privateCache)) {\r\n\t\t\t\t\tprivateCache.push(src);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet thisArguments = [this._element, e.type, src, this._id];\r\n\r\n\t\t\t\tthis[e.type !== 'error' ? '_success' : '_error'].apply(this, thisArguments);\r\n\t\t\t\tthis._done.apply(this, thisArguments);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {Object} data\r\n\t\t */\r\n\t\tset resource(data) {\r\n\t\t\tif (typeof data === 'object' && 'id' in data && 'element' in data && 'resource' in data) {\r\n\t\t\t\tthis._id = data.id;\r\n\t\t\t\tthis._element = data.element;\r\n\t\t\t\tthis._resource = data.resource;\r\n\r\n\t\t\t\tlet info = decodeResource({\r\n\t\t\t\t\tresource: this._resource,\r\n\t\t\t\t\telement: this._element\r\n\t\t\t\t});\r\n\t\t\t\tthis._tag = info.tag;\r\n\t\t\t\tthis._consistent = info.consistent;\r\n\t\t\t\tthis._format = info.format;\r\n\t\t\t\tthis._exists = this._element !== null;\r\n\t\t\t\tthis._originalElement = this._element;\r\n\r\n\t\t\t\tif (!this._exists || !this._consistent) {\r\n\t\t\t\t\tthis._element = document.createElement(this._tag);\r\n\t\t\t\t\tthis._element.dataset[this.srcAttr] = this._resource;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this._exists && this._settings.visible && IntersectionObserverSupported) {\r\n\t\t\t\t\tthis._observer = new IntersectionObserver(\r\n\t\t\t\t\t\t(entries, observer) => {\r\n\t\t\t\t\t\t\tentries.forEach(\r\n\t\t\t\t\t\t\t\tentry => (entry.target.intersectionRatio = entry.intersectionRatio)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\troot: null,\r\n\t\t\t\t\t\t\trootMargin: '0px',\r\n\t\t\t\t\t\t\tthreshold: 0.1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis._observer.observe(this._originalElement);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._idEvent = this._element[pluginInstance + '_IDEvent'];\r\n\t\t\t\tthis._busy = this._idEvent !== undefined;\r\n\t\t\t\tthis._idEvent = this._busy\r\n\t\t\t\t\t? this._idEvent\r\n\t\t\t\t\t: pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tget resource() {\r\n\t\t\treturn this._resource;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean} se ha preso in carico il caricamento oppure no per vari motivi (è già caricato, non è nella viewport etc)\r\n\t\t */\r\n\t\tload() {\r\n\t\t\tif (isLoaded(this._exists && this._consistent ? this._element : this._resource)) {\r\n\t\t\t\tif (!this._busy) {\r\n\t\t\t\t\t// TODO: mayabe this should be called in this._callback\r\n\t\t\t\t\tdetachEventListener(this._element, '.' + this._idEvent);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._callback(\r\n\t\t\t\t\tnew CustomEvent(\r\n\t\t\t\t\t\t!isBroken(this._exists && this._consistent ? this._element : this._resource)\r\n\t\t\t\t\t\t\t? 'load'\r\n\t\t\t\t\t\t\t: 'error'\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t} else if (this._exists && this._settings.visible && !isVisible(this._originalElement)) {\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tif (this._format === 'image') {\r\n\t\t\t\t\tattachEventListener(this._element, 'load.' + this._idEvent, this._callback, !this._busy);\r\n\t\t\t\t\tattachEventListener(this._element, 'error.' + this._idEvent, this._callback, !this._busy);\r\n\r\n\t\t\t\t\tconst picture = this._element.closest('picture');\r\n\r\n\t\t\t\t\tif (picture && pictureElementSupported) {\r\n\t\t\t\t\t\tdelete this._element.dataset[this.srcsetAttr];\r\n\t\t\t\t\t\tdelete this._element.dataset[this.srcAttr];\r\n\r\n\t\t\t\t\t\tpicture.querySelectorAll('source[' + this._settings.srcsetAttr + ']').forEach(el => {\r\n\t\t\t\t\t\t\tel.setAttribute('srcset', el.dataset[this.srcAttr]);\r\n\t\t\t\t\t\t\tdelete el.dataset[this.srcAttr];\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (this._element.matches('[' + this._settings.srcsetAttr + ']')) {\r\n\t\t\t\t\t\t\tthis._element.setAttribute('srcset', this._element.dataset[this.srcsetAttr]);\r\n\t\t\t\t\t\t\tdelete this._element.dataset[this.srcsetAttr];\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this._element.matches('[' + this._settings.srcAttr + ']')) {\r\n\t\t\t\t\t\t\tthis._element.setAttribute('src', this._element.dataset[this.srcAttr]);\r\n\t\t\t\t\t\t\tdelete this._element.dataset[this.srcAttr];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (this._format === 'video' || this._format === 'audio') {\r\n\t\t\t\t\tconst isStandardPlaythrough = true === this._settings.playthrough;\r\n\t\t\t\t\tconst isFullPlaythrough = 'full' === this._settings.playthrough;\r\n\t\t\t\t\tconst sources = this._element.querySelectorAll('source');\r\n\r\n\t\t\t\t\tlet callMediaLoad = false;\r\n\r\n\t\t\t\t\tif (sources) {\r\n\t\t\t\t\t\tsources.forEach(source => {\r\n\t\t\t\t\t\t\tif (source.matches('[' + this._settings.srcAttr + ']')) {\r\n\t\t\t\t\t\t\t\tsource.setAttribute('src', source.dataset[this.srcAttr]);\r\n\t\t\t\t\t\t\t\tdelete source.dataset[this.srcsetAttr];\r\n\r\n\t\t\t\t\t\t\t\tcallMediaLoad = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tattachEventListener(\r\n\t\t\t\t\t\t\t\tsource,\r\n\t\t\t\t\t\t\t\t'error.' + this._idEvent,\r\n\t\t\t\t\t\t\t\te => {\r\n\t\t\t\t\t\t\t\t\tconst sourcesErrorId = pluginName + '_error';\r\n\r\n\t\t\t\t\t\t\t\t\tsource[pluginInstance + '_' + sourcesErrorId] = true;\r\n\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tsources.length ===\r\n\t\t\t\t\t\t\t\t\t\tnodelistToArray(sources).filter(\r\n\t\t\t\t\t\t\t\t\t\t\tthisSource =>\r\n\t\t\t\t\t\t\t\t\t\t\t\ttrue === thisSource[pluginInstance + '_' + sourcesErrorId]\r\n\t\t\t\t\t\t\t\t\t\t).length\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tthis._callback(e);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t!this._busy\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (this._element.matches('[' + this._settings.srcAttr + ']')) {\r\n\t\t\t\t\t\tthis._element.setAttribute('src', this._element.dataset[this.srcAttr]);\r\n\t\t\t\t\t\tdelete this._element.dataset[this.srcAttr];\r\n\r\n\t\t\t\t\t\tattachEventListener(\r\n\t\t\t\t\t\t\tthis._element,\r\n\t\t\t\t\t\t\t'error.' + this._idEvent,\r\n\t\t\t\t\t\t\tthis._callback,\r\n\t\t\t\t\t\t\t!this._busy\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tcallMediaLoad = true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (callMediaLoad) {\r\n\t\t\t\t\t\tthis._element.load();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tattachEventListener(\r\n\t\t\t\t\t\tthis._element,\r\n\t\t\t\t\t\t'loadedmetadata.' + this._idEvent,\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tif (!isStandardPlaythrough && !isFullPlaythrough) {\r\n\t\t\t\t\t\t\t\tthis._callback(new CustomEvent('load'));\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (isFullPlaythrough) {\r\n\t\t\t\t\t\t\t\tlet onProgressReplacementInterval = setInterval(() => {\r\n\t\t\t\t\t\t\t\t\tlet isError = this._element.readyState > 0 && !this._element.duration;\r\n\r\n\t\t\t\t\t\t\t\t\tif (isError || isFullyBuffered(this._element)) {\r\n\t\t\t\t\t\t\t\t\t\tthis._element.currentTime = 0;\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t!isError &&\r\n\t\t\t\t\t\t\t\t\t\t\t!this._busy &&\r\n\t\t\t\t\t\t\t\t\t\t\tthis._element.paused &&\r\n\t\t\t\t\t\t\t\t\t\t\tthis._element.matches('[autoplay]')\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis._element.play();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tclearInterval(onProgressReplacementInterval);\r\n\r\n\t\t\t\t\t\t\t\t\t\tthis._callback(new CustomEvent(!isError ? 'load' : 'error'));\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tif (!this._element.paused) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis._element.pause();\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tif (!this._busy) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis._element.currentTime += 2;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\t\t\t\tthis._element[\r\n\t\t\t\t\t\t\t\t\tpluginName + '_' + this._idEvent\r\n\t\t\t\t\t\t\t\t] = onProgressReplacementInterval;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t!this._busy\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tattachEventListener(\r\n\t\t\t\t\t\tthis._element,\r\n\t\t\t\t\t\t'canplay.' + this._idEvent,\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tisFullPlaythrough &&\r\n\t\t\t\t\t\t\t\tthis._element.currentTime === 0 &&\r\n\t\t\t\t\t\t\t\t!isFullyBuffered(this._element)\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tthis._element.currentTime++;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t!this._busy\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tattachEventListener(\r\n\t\t\t\t\t\tthis._element,\r\n\t\t\t\t\t\t'canplaythrough.' + this._idEvent,\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tif (isStandardPlaythrough) {\r\n\t\t\t\t\t\t\t\tthis._callback(new CustomEvent('load'));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t!this._busy\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!this._busy) {\r\n\t\t\t\t\tthis._element[pluginInstance + '_IDEvent'] = this._idEvent;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis._resource = this._element.currentSrc || this._element.src;\r\n\r\n\t\t\treturn !this._busy;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {Function} callback\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tdone(callback) {\r\n\t\t\tif (typeof callback !== 'function') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._done = function(element, status, resource, id) {\r\n\t\t\t\tcallback.apply(this, [element, status, resource, id]);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tabort() {\r\n\t\t\tdetachEventListener(this._element, '.' + this._idEvent);\r\n\r\n\t\t\tif (isLoaded(this._exists ? this._element : this._resource)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst src = this._element.getAttribute('srcset'),\r\n\t\t\t\tsrcset = this._element.getAttribute('src');\r\n\r\n\t\t\tif (undefined !== src) {\r\n\t\t\t\tthis._element.dataset[this.srcAttr] = src;\r\n\t\t\t\tthis._element.setAttribute(this._settings.srcAttr, src);\r\n\t\t\t\tthis._element.removeAttribute('src');\r\n\t\t\t\tthis._element.removeAttribute('srcset');\r\n\t\t\t}\r\n\r\n\t\t\tif (undefined !== srcset) {\r\n\t\t\t\tthis._element.dataset[this.srcsetAttr] = srcset;\r\n\t\t\t\tthis._element.setAttribute(this._settings.srcsetAttr, srcset);\r\n\t\t\t\tthis._element.removeAttribute('src');\r\n\t\t\t\tthis._element.removeAttribute('srcset');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// TODO: Promise support\r\n\t// TODO: private vars\r\n\t// TODO: refactory succes/done/progress code...\r\n\t/** TODO: description of the MyClass constructor function.\r\n\t * @class\r\n\t * @classdesc TODO: description of the Loader class.\r\n\t */\r\n\tclass Loader {\r\n\t\t/**\r\n\t\t * @param {Object} [options={srcAttr: 'data-src', srcsetAttr: 'data-srcset', playthrough: false, visible: false, backgrounds: false }]\r\n\t\t */\r\n\t\tconstructor(options) {\r\n\t\t\tthis._collection = [];\r\n\t\t\tthis._collectionLoaded = [];\r\n\t\t\tthis._collectionInstances = [];\r\n\t\t\tthis._collectionPending = [];\r\n\t\t\tthis._resourcesLoaded = [];\r\n\r\n\t\t\tthis._settings = {\r\n\t\t\t\t...{\r\n\t\t\t\t\tsrcAttr: 'data-src',\r\n\t\t\t\t\tsrcsetAttr: 'data-srcset',\r\n\t\t\t\t\tplaythrough: false,\r\n\t\t\t\t\tvisible: false,\r\n\t\t\t\t\tbackgrounds: false\r\n\t\t\t\t},\r\n\t\t\t\t...options\r\n\t\t\t};\r\n\r\n\t\t\tif (\r\n\t\t\t\t!stringStartsWith(this._settings.srcAttr, 'data-') ||\r\n\t\t\t\t!stringStartsWith(this._settings.srcsetAttr, 'data-')\r\n\t\t\t) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t'Wrong arguments format: srcAttr and srcsetAttr parameters must be dataset values.'\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tthis.srcAttr = hyphensToCamelCase(this._settings.srcAttr.replace('data-', ''));\r\n\t\t\tthis.srcsetAttr = hyphensToCamelCase(this._settings.srcsetAttr.replace('data-', ''));\r\n\r\n\t\t\tthis.percentage = 0;\r\n\r\n\t\t\tthis._done = () => {};\r\n\t\t\tthis._progress = () => {};\r\n\t\t\tthis._success = () => {};\r\n\t\t\tthis._error = () => {};\r\n\t\t\tthis._loop = this.load;\r\n\r\n\t\t\tthis._abort = false;\r\n\t\t\tthis._loaded = 0;\r\n\t\t\tthis._complete = false;\r\n\t\t\tthis._busy = false;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t * @param {HTMLElement} [element=document.body]\r\n\t\t * @param {Object} [options={ srcAttr: 'src', srcsetAttr: 'srcset', backgrounds: false }]\r\n\t\t */\r\n\t\tstatic findResources(element, options) {\r\n\t\t\tlet settings = {\r\n\t\t\t\tsrcAttr: 'src',\r\n\t\t\t\tsrcsetAttr: 'srcset',\r\n\t\t\t\tbackgrounds: false\r\n\t\t\t};\r\n\r\n\t\t\tif (typeof element === 'object' && undefined === options) {\r\n\t\t\t\tfor (let key in settings) {\r\n\t\t\t\t\tif (key in element) {\r\n\t\t\t\t\t\toptions = element;\r\n\t\t\t\t\t\telement = undefined;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (undefined === element || element === document) {\r\n\t\t\t\telement = document.body;\r\n\t\t\t}\r\n\r\n\t\t\tif (!isHTMLElement(element)) {\r\n\t\t\t\tthrow new Error('TypeError: ' + element + ' is not of type HTMLElement.');\r\n\t\t\t}\r\n\r\n\t\t\tlet collectedResources = [];\r\n\r\n\t\t\tsettings = {\r\n\t\t\t\t...settings,\r\n\t\t\t\t...options\r\n\t\t\t};\r\n\r\n\t\t\tconst targets = 'img, video, audio';\r\n\t\t\tconst targetsExtended = targets + ', picture, source';\r\n\t\t\tconst targetsFilter = '[' + settings.srcAttr + '], [' + settings.srcsetAttr + ']';\r\n\r\n\t\t\tlet targetsTags = nodelistToArray(element.querySelectorAll(targets));\r\n\r\n\t\t\tif (element.matches(targetsExtended)) {\r\n\t\t\t\ttargetsTags.push(element);\r\n\t\t\t}\r\n\r\n\t\t\ttargetsTags = targetsTags.filter(target => {\r\n\t\t\t\tlet children = nodelistToArray(target.children);\r\n\t\t\t\tchildren = children.filter(x => x.matches(targetsExtended));\r\n\t\t\t\tchildren = children.filter(x => x.matches(targetsFilter));\r\n\t\t\t\treturn target.matches(targetsFilter) || children.length;\r\n\t\t\t});\r\n\t\t\ttargetsTags.forEach(target => {\r\n\t\t\t\tlet targetSource = target;\r\n\r\n\t\t\t\tif (!targetSource.matches(targetsFilter)) {\r\n\t\t\t\t\ttargetSource = targetSource.querySelectorAll(targetsFilter);\r\n\t\t\t\t\ttargetSource = [...targetSource][0];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcollectedResources.push({\r\n\t\t\t\t\telement: target,\r\n\t\t\t\t\tresource:\r\n\t\t\t\t\t\ttargetSource.getAttribute(settings.srcAttr) ||\r\n\t\t\t\t\t\ttargetSource.getAttribute(settings.srcsetAttr)\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tif (true === settings.backgrounds) {\r\n\t\t\t\tlet targetsBg = nodelistToArray(element.querySelectorAll('*'));\r\n\t\t\t\ttargetsBg.push(element);\r\n\t\t\t\ttargetsBg = targetsBg.filter(target => !target.matches(targetsExtended));\r\n\t\t\t\ttargetsBg = targetsBg.filter(target => getComputedStyle(target).backgroundImage !== 'none');\r\n\t\t\t\ttargetsBg.forEach(target => {\r\n\t\t\t\t\tconst url = getComputedStyle(target).backgroundImage.match(/\\((.*?)\\)/);\r\n\r\n\t\t\t\t\tif (null !== url && url.length >= 2) {\r\n\t\t\t\t\t\tcollectedResources.push({\r\n\t\t\t\t\t\t\telement: target,\r\n\t\t\t\t\t\t\tresource: url[1].replace(/('|\")/g, '')\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn collectedResources;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {(Array.<String>|HTMLElement)} collection\r\n\t\t */\r\n\t\tset collection(collection) {\r\n\t\t\tlet collectedResources = collection;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tcollectedResources = Loader.findResources(collection, this._settings);\r\n\t\t\t} catch (err) {}\r\n\r\n\t\t\tcollectedResources.forEach(item => {\r\n\t\t\t\tlet element = {\r\n\t\t\t\t\tresource: '',\r\n\t\t\t\t\telement: null,\r\n\t\t\t\t\tid: generateInstanceID()\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (typeof item === 'string') {\r\n\t\t\t\t\telement.resource = item;\r\n\t\t\t\t} else if (typeof item === 'object' && 'resource' in item) {\r\n\t\t\t\t\telement = { ...element, ...item };\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._collection.push(element);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns {Array} collection\r\n\t\t */\r\n\t\tget collection() {\r\n\t\t\treturn this._collection;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tload() {\r\n\t\t\tif (!this._collection.length) {\r\n\t\t\t\tthis._done.call(this, this._resourcesLoaded);\r\n\t\t\t}\r\n\r\n\t\t\t// resets pending elements (sequential opt helper array) every time we loop\r\n\t\t\tthis._collectionPending = [];\r\n\r\n\t\t\tconst sequentialMode = true === this._settings.sequential;\r\n\r\n\t\t\tfor (let i = 0; i < this._collection.length; i++) {\r\n\t\t\t\tif (this._abort) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet thisLoadId = this._collection[i].id;\r\n\t\t\t\tlet thisLoadIndex = arrayFindIndex(this._collectionInstances, x => x.id === thisLoadId);\r\n\t\t\t\tlet thisLoadInstance = new SingleLoader(this._settings);\r\n\r\n\t\t\t\tif (thisLoadIndex === -1) {\r\n\t\t\t\t\tthis._collectionInstances.push({\r\n\t\t\t\t\t\tid: thisLoadId,\r\n\t\t\t\t\t\tinstance: thisLoadInstance\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthisLoadIndex = arrayFindIndex(this._collectionInstances, x => x.id === thisLoadId);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._collectionInstances[thisLoadIndex].instance = thisLoadInstance;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthisLoadInstance.resource = this._collection[i];\r\n\r\n\t\t\t\tthisLoadInstance.done((element, status, resource, id) => {\r\n\t\t\t\t\tif (this._complete || this._abort) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst aProgress = !isInArray(id, this._collectionLoaded);\r\n\r\n\t\t\t\t\tif (aProgress) {\r\n\t\t\t\t\t\tthis._collectionLoaded.push(id);\r\n\t\t\t\t\t\tthis._busy = false;\r\n\r\n\t\t\t\t\t\tthis._loaded++;\r\n\t\t\t\t\t\tthis.percentage = this._loaded / this._collection.length * 100;\r\n\t\t\t\t\t\tthis.percentage = parseFloat(this.percentage.toFixed(4));\r\n\r\n\t\t\t\t\t\tconst thisResource = {\r\n\t\t\t\t\t\t\tresource: resource,\r\n\t\t\t\t\t\t\tstatus: status,\r\n\t\t\t\t\t\t\telement: element\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tthis._resourcesLoaded.push(thisResource);\r\n\t\t\t\t\t\tthis._progress.call(this, thisResource);\r\n\t\t\t\t\t\tthis[status !== 'error' ? '_success' : '_error'].call(this, thisResource);\r\n\t\t\t\t\t\t// TODO: dispatch event on element maybe?\r\n\t\t\t\t\t\t// element.dispatchEvent(new CustomEvent(pluginPrefix + capitalize(status) + '.' + pluginPrefix));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (this._loaded === this._collection.length) {\r\n\t\t\t\t\t\tthis._done.call(this, this._resourcesLoaded);\r\n\r\n\t\t\t\t\t\tthis._complete = true;\r\n\t\t\t\t\t} else if (aProgress && sequentialMode && this._collectionPending.length) {\r\n\t\t\t\t\t\tthis._collectionPending = this._collectionPending.filter(x => x.id !== id);\r\n\r\n\t\t\t\t\t\tif (this._collectionPending.length) {\r\n\t\t\t\t\t\t\tthis._busy = this._collectionPending[0].instance.load();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (!sequentialMode || (sequentialMode && !this._busy)) {\r\n\t\t\t\t\tthis._busy = thisLoadInstance.load();\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tsequentialMode &&\r\n\t\t\t\t\tthis._busy &&\r\n\t\t\t\t\t(!this._settings.visible ||\r\n\t\t\t\t\t\t!thisLoadInstance._exists ||\r\n\t\t\t\t\t\t(this._settings.visible &&\r\n\t\t\t\t\t\t\tthisLoadInstance._exists &&\r\n\t\t\t\t\t\t\tisVisible(thisLoadInstance._originalElement)))\r\n\t\t\t\t) {\r\n\t\t\t\t\tthis._collectionPending.push({\r\n\t\t\t\t\t\tid: thisLoadId,\r\n\t\t\t\t\t\tinstance: thisLoadInstance\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {Function} callback\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tdone(callback) {\r\n\t\t\tif (typeof callback !== 'function') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._done = function(resources) {\r\n\t\t\t\tcallback.call(this, resources);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {Function} callback\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tprogress(callback) {\r\n\t\t\tif (typeof callback !== 'function') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._progress = function(resource) {\r\n\t\t\t\tcallback.call(this, resource);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {Function} callback\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tsuccess(callback) {\r\n\t\t\tif (typeof callback !== 'function') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._success = function(resource) {\r\n\t\t\t\tcallback.call(this, resource);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {Function} callback\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\terror(callback) {\r\n\t\t\tif (typeof callback !== 'function') {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis._error = function(resource) {\r\n\t\t\t\tcallback.call(this, resource);\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @returns {undefined}\r\n\t\t */\r\n\t\tabort() {\r\n\t\t\tthis._collectionInstances.forEach(thisInstance => {\r\n\t\t\t\tthisInstance.instance.abort();\r\n\t\t\t});\r\n\r\n\t\t\tthis._abort = true;\r\n\t\t}\r\n\t}\r\n\r\n\t// public interface\r\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\t// requirejs\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(capitalize(pluginName), Loader);\r\n\t\t// nodejs\r\n\t} else if ('object' === typeof exports) {\r\n\t\tmodule.exports[capitalize(pluginName)] = Loader;\r\n\t\t// vanilla\r\n\t} else {\r\n\t\twindow[capitalize(pluginName)] = Loader;\r\n\t}\r\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n\t// jQuery interface\r\n\t// - - - - - - - - - - - - - - - - - - - -\r\n\tif (!('jQuery' in window)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst $ = jQuery;\r\n\r\n\t$[capitalize(pluginName)] = Loader;\r\n\r\n\tconst $document = $(document);\r\n\tconst $window = $(window);\r\n\t// thanks https://gist.github.com/beaucharman/e46b8e4d03ef30480d7f4db5a78498ca\r\n\tconst throttle = (callback, wait, context = this) => {\r\n\t\tlet timeout = null;\r\n\t\tlet callbackArgs = null;\r\n\t\tconst later = () => {\r\n\t\t\tcallback.apply(context, callbackArgs);\r\n\t\t\ttimeout = null;\r\n\t\t};\r\n\t\treturn function() {\r\n\t\t\tif (!timeout) {\r\n\t\t\t\tcallbackArgs = arguments;\r\n\t\t\t\ttimeout = setTimeout(later, wait);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tlet methodCollection = [];\r\n\r\n\t$.fn[pluginMethod] = function(options) {\r\n\t\tlet originalUserOptions = options;\r\n\r\n\t\tif (typeof options !== 'object') {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\r\n\t\tlet settings = {\r\n\t\t\t...{\r\n\t\t\t\tsrcAttr: 'data-src',\r\n\t\t\t\tsrcsetAttr: 'data-srcset',\r\n\r\n\t\t\t\tvisible: false,\r\n\t\t\t\tsequential: false,\r\n\r\n\t\t\t\tbackgrounds: false,\r\n\t\t\t\tplaythrough: false,\r\n\r\n\t\t\t\tearly: false,\r\n\t\t\t\tearlyTimeout: 0,\r\n\r\n\t\t\t\tonProgress: () => {},\r\n\t\t\t\tonLoad: () => {},\r\n\t\t\t\tonError: () => {},\r\n\r\n\t\t\t\tonComplete: () => {}\r\n\t\t\t},\r\n\t\t\t...options\r\n\t\t};\r\n\r\n\t\tlet callback = settings.onComplete;\r\n\t\tif ($.isFunction(originalUserOptions)) {\r\n\t\t\tcallback = originalUserOptions;\r\n\t\t}\r\n\r\n\t\treturn this.each(function(i) {\r\n\t\t\t// TODO: mutation observer when new children are appended\r\n\r\n\t\t\tconst $element = $(this);\r\n\t\t\tconst uniqueMethodPluginName = generateInstanceID() + i;\r\n\t\t\tconst thisLoadInstance = new Loader(settings);\r\n\r\n\t\t\tthisLoadInstance.collection = this;\r\n\r\n\t\t\tmethodCollection.push({\r\n\t\t\t\tid: uniqueMethodPluginName,\r\n\t\t\t\tinstance: thisLoadInstance,\r\n\t\t\t\telement: this,\r\n\t\t\t\ttimeout: null\r\n\t\t\t});\r\n\r\n\t\t\tthisLoadInstance.progress(resource => {\r\n\t\t\t\t$(resource.element).trigger(pluginPrefix + capitalize(resource.status) + '.' + pluginPrefix, [\r\n\t\t\t\t\tresource.element,\r\n\t\t\t\t\tresource.resource\r\n\t\t\t\t]);\r\n\t\t\t\t$element.trigger(pluginPrefix + 'Progress.' + pluginPrefix, [this, resource]);\r\n\r\n\t\t\t\tconst thisArguments = [thisLoadInstance, resource];\r\n\r\n\t\t\t\tif (typeof settings.onProgress === 'function') {\r\n\t\t\t\t\tsettings.onProgress.apply(this, thisArguments);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet eventName = capitalize(resource.status);\r\n\t\t\t\tif (typeof settings['on' + eventName] === 'function') {\r\n\t\t\t\t\tsettings['on' + eventName].apply(this, thisArguments);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthisLoadInstance.done(resources => {\r\n\t\t\t\t$element.trigger(pluginPrefix + 'Complete.' + pluginPrefix, [this, resources]);\r\n\t\t\t\tcallback.apply(this, [thisLoadInstance, resources]);\r\n\r\n\t\t\t\tif (settings.visible) {\r\n\t\t\t\t\t/*if (IntersectionObserverSupported) {\r\n                        thisLoadInstance.collection.forEach(item => item.element.intersectionObserver.unobserve(item.element));\r\n\r\n                    } else {*/\r\n\t\t\t\t\t$window.off('scroll.' + uniqueMethodPluginName);\r\n\r\n\t\t\t\t\t//}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// refresh other method calls for same el (omitting this one)\r\n\t\t\t\tmethodCollection = methodCollection.filter(x => x.id !== uniqueMethodPluginName);\r\n\t\t\t\tmethodCollection.forEach(thisMethodCollection => {\r\n\t\t\t\t\tif ($element.is(thisMethodCollection.element)) {\r\n\t\t\t\t\t\tthisMethodCollection.instance.load();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tthisLoadInstance.load();\r\n\r\n\t\t\tif (settings.visible) {\r\n\t\t\t\t/* if (IntersectionObserverSupported) {\r\n\r\n                    thisLoadInstance.collection.forEach(item => {\r\n\r\n                        item.element.intersectionObserver = new IntersectionObserver((entries, observer) => {\r\n                            entries.forEach(entry => {\r\n                                if( entry.intersectionRatio > 0 ){\r\n                                    thisLoadInstance.load();\r\n                                }\r\n                            });\r\n                        }, {\r\n                            root: null,\r\n                            rootMargin: '0px',\r\n                            threshold: 0.0\r\n                        });\r\n\r\n                        item.element.intersectionObserver.observe(item.element);\r\n\r\n                    });\r\n\r\n                } else {*/\r\n\r\n\t\t\t\t$window.on('scroll.' + uniqueMethodPluginName, throttle(() => thisLoadInstance.load(), 250));\r\n\r\n\t\t\t\t//}\r\n\t\t\t}\r\n\r\n\t\t\tif (true === settings.early) {\r\n\t\t\t\tlet breakLoop = false;\r\n\r\n\t\t\t\tmethodCollection.forEach(thisMethodCollection => {\r\n\t\t\t\t\tif (breakLoop) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (methodCollection[key].id === uniqueMethodPluginName) {\r\n\t\t\t\t\t\tclearTimeout(thisMethodCollection.timeout);\r\n\r\n\t\t\t\t\t\tlet timeout = parseInt(settings.earlyTimeout);\r\n\r\n\t\t\t\t\t\tthisMethodCollection.timeout = setTimeout(() => {\r\n\t\t\t\t\t\t\t// TODO: appropriate method to set/update settings?\r\n\t\t\t\t\t\t\tthisMethodCollection.instance._settings.visible = false;\r\n\t\t\t\t\t\t\tthisMethodCollection.instance._settings.sequential = true;\r\n\r\n\t\t\t\t\t\t\tthisMethodCollection.instance.load();\r\n\t\t\t\t\t\t}, !isNaN(timeout) && isFinite(timeout) ? timeout : 0);\r\n\r\n\t\t\t\t\t\tbreakLoop = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n})();\r\n\r\n//# sourceMappingURL=nite.loader.js.map\r\n"],"file":"nite.loader.js","preExistingComment":"nite.loader.js.map"}