{"version":3,"names":[],"mappings":"","sources":["nite.loader.js"],"sourcesContent":["/*! Nite Loader | Daniele Fioroni | dfioroni91@gmail.com */\r\n(function (window, document, $, undefined) {\r\n    'use strict';\r\n\r\n    const\r\n        /**\r\n         * @returns {string}\r\n         */\r\n        generateInstanceID = () => {\r\n            return Math.floor(Math.random() * (9999 - 1000)) + 1000;\r\n        },\r\n        pluginPrefix = 'nite',\r\n        pluginMethod = pluginPrefix + 'Load',\r\n        pluginName = pluginMethod + 'er',\r\n        pluginInstance = generateInstanceID(),\r\n        eventNamespaceParserSeparator = '__namespace__',\r\n        CustomEvent = window.CustomEvent || (() => {\r\n            const _polyfill = (event, params) => {\r\n                params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n                const evt = document.createEvent('CustomEvent');\r\n                evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n                return evt;\r\n            };\r\n            _polyfill.prototype = window.Event.prototype;\r\n            return _polyfill;\r\n        })(),\r\n        supportedExtensions = {\r\n            image: 'jp[e]?g|jpe|jif|jfif|jfi|gif|png|tif[f]?|bmp|dib|webp|ico|cur|svg',\r\n            audio: 'mp3|ogg|oga|spx|ogg|wav',\r\n            video: 'mp4|ogv|webm'\r\n        },\r\n        supportedTags = {\r\n            image: 'img|picture|source',\r\n            audio: 'audio|source',\r\n            video: 'video|source'\r\n        },\r\n        IntersectionObserverSupported = 'IntersectionObserver' in window,\r\n        pictureElementSupported = 'HTMLPictureElement' in window,\r\n        /**\r\n         * @param {string} heystack\r\n         * @param {string} needle\r\n         * @returns {boolean}\r\n         */\r\n        stringContains = (heystack, needle) => {\r\n            return String.prototype.includes ? heystack.includes(needle) : heystack.indexOf(needle, 0) !== -1\r\n        },\r\n        /**\r\n         * @param {string} heystack\r\n         * @param {string} needle\r\n         * @returns {boolean}\r\n         */\r\n        stringStartsWith = (heystack, needle) => {\r\n            return String.prototype.startsWith ? heystack.startsWith(needle) : heystack.substr(0, needle.length) === needle;\r\n        },\r\n        /**\r\n         * @param {Array} heystack\r\n         * @param {Function} filter\r\n         * @returns {number}\r\n         */\r\n        arrayFindIndex = (heystack, filter) => {\r\n            return Array.prototype.findIndex ? heystack.findIndex(filter) : (() => {\r\n                let length = heystack.length,\r\n                    index = -1;\r\n                while (++index < length) {\r\n                    if (filter(heystack[index], index, heystack)) {\r\n                        return index;\r\n                    }\r\n                }\r\n                return -1;\r\n            })();\r\n        },\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {string} events\r\n         * @returns {undefined}\r\n         */\r\n        detachEventListener = (element, events) => {\r\n\r\n            if (!element || typeof events !== 'string') {\r\n                return;\r\n            }\r\n\r\n            if (stringStartsWith(events, '.')) {\r\n                Object.keys(privateEventsStorage).forEach(key => {\r\n                    const eventNameWithNamespace = key.replace(eventNamespaceParserSeparator, '.');\r\n                    if (stringContains(eventNameWithNamespace, events) && privateEventsStorage[key].element === element) {\r\n                        detachEventListener(element, eventNameWithNamespace);\r\n                    }\r\n                });\r\n            } else {\r\n\r\n                events = events.split('.');\r\n\r\n                const\r\n                    type = events[0],\r\n                    namespace = events[1];\r\n\r\n                if (namespace) {\r\n                    events = events.join(eventNamespaceParserSeparator);\r\n                }\r\n\r\n                if (events in privateEventsStorage) {\r\n                    element.removeEventListener(type, privateEventsStorage[events].handler);\r\n                    delete privateEventsStorage[events];\r\n                }\r\n\r\n            }\r\n\r\n        },\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {string} events\r\n         * @param {Function} handler\r\n         * @param {boolean} once\r\n         * @returns {undefined}\r\n         */\r\n        attachEventListener = (element, events, handler, once) => {\r\n\r\n            if (!element || typeof events !== 'string' || typeof handler !== 'function') {\r\n                return;\r\n            }\r\n\r\n            events = events.split('.');\r\n\r\n            const\r\n                type = events[0],\r\n                namespace = events[1];\r\n\r\n            if (namespace) {\r\n                events = events.join(eventNamespaceParserSeparator);\r\n            }\r\n\r\n            privateEventsStorage[events] = {\r\n                element: element,\r\n                count: 0,\r\n                once: false\r\n            };\r\n\r\n            if (true === once) {\r\n                let _handler = handler;\r\n                handler = function (event) {\r\n                    if (events in privateEventsStorage) {\r\n                        privateEventsStorage[events].count++;\r\n                        if (privateEventsStorage[events].once && privateEventsStorage[events].count > 1) {\r\n                            return;\r\n                        }\r\n                        _handler.call(this, event);\r\n                    }\r\n                    detachEventListener(element, events);\r\n                }\r\n            } else {\r\n                once = false;\r\n            }\r\n\r\n            privateEventsStorage[events] = {\r\n                ...privateEventsStorage[events], ...{\r\n                    handler: handler,\r\n                    once: once\r\n                }\r\n            };\r\n\r\n            element.addEventListener(type, privateEventsStorage[events].handler, { once: once });\r\n\r\n        },\r\n        /**\r\n         * @param {string} string\r\n         * @returns {string}\r\n         */\r\n        hyphensToCamelCase = string => {\r\n            return string.replace(/-([a-z])/g, g => g[1].toUpperCase());\r\n        },\r\n        /**\r\n         * @param {string} string\r\n         * @returns {string}\r\n         */\r\n        capitalize = string => {\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        },\r\n        /**\r\n         * @param {NodeList} nodelist\r\n         * @returns {Array}\r\n         */\r\n        nodelistToArray = nodelist => {\r\n            return [...nodelist];\r\n        },\r\n        /**\r\n         * @param {*} needle\r\n         * @param {Array} heystack\r\n         * @returns {boolean}\r\n         */\r\n        isInArray = (needle, heystack) => {\r\n            return heystack.indexOf(needle) > -1;\r\n        },\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        isVisible = element => {\r\n\r\n            if( IntersectionObserverSupported && 'intersectionRatio' in element ){\r\n                return element.intersectionRatio > 0;\r\n            }\r\n\r\n            if (window.getComputedStyle(element, 'display') === 'none') {\r\n                return false;\r\n            }\r\n\r\n            const\r\n                bodyEl = document.getElementsByTagName('body')[0],\r\n                winWidth = window.innerWidth || documnt.documentElement.clientWidth || bodyEl.clientWidth,\r\n                winHeight = window.innerHeight || documnt.documentElement.clientHeight || bodyEl.clientHeight,\r\n                rect = element.getBoundingClientRect();\r\n\r\n            return !(rect.right < 0 || rect.bottom < 0 || rect.left > winWidth || rect.top > winHeight);\r\n\r\n        },\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @returns {boolean}\r\n         */\r\n        isHTMLElement = element => {\r\n            if (typeof element !== 'object') {\r\n                return false;\r\n            }\r\n            try {\r\n                return element instanceof HTMLElement;\r\n            } catch (e) {\r\n                return element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object';\r\n            }\r\n        },\r\n        /**\r\n         * @param {string|HTMLElement} source\r\n         * @returns {boolean}\r\n         */\r\n        isLoaded = source => {\r\n            return (\r\n                (\r\n                    typeof source === 'string'\r\n                    &&\r\n                    isInArray(source, privateCache)\r\n                )\r\n                ||\r\n                (\r\n                    isHTMLElement(source)\r\n                    &&\r\n                    ('currentSrc' in source && source.currentSrc.length > 0)\r\n                    &&\r\n                    (\r\n                        ('complete' in source && source.complete)\r\n                        ||\r\n                        ('readyState' in source && source.readyState >= 2)\r\n                    )\r\n                )\r\n            );\r\n        },\r\n        /**\r\n         * @param {string|HTMLElement} source\r\n         * @returns {boolean}\r\n         */\r\n        isBroken = source => {\r\n            return (\r\n                isLoaded(source)\r\n                &&\r\n                (\r\n                    (\r\n                        isHTMLElement(source)\r\n                        &&\r\n                        (\r\n                            ('naturalWidth' in source && Math.floor(source.naturalWidth) === 0)\r\n                            ||\r\n                            ('videoWidth' in source && source.videoWidth === 0)\r\n                        )\r\n                    )\r\n                    ||\r\n                    typeof source === 'string'\r\n                )\r\n            );\r\n        },\r\n        /**\r\n         * @param {Object} resource\r\n         * @returns {Object}\r\n         */\r\n        decodeResource = resource => {\r\n\r\n            let\r\n                output = {\r\n                    format: null,\r\n                    extension: null,\r\n                    tag: null,\r\n                    consistent: false // true if tag match the resource type\r\n                },\r\n                breakLoop = false;\r\n\r\n            resource.resource = resource.resource.split('?')[0];\r\n            resource.resource = resource.resource.split('#')[0];\r\n            Object.keys(supportedExtensions).forEach(formatCandidate => {\r\n\r\n                if (breakLoop) {\r\n                    return;\r\n                }\r\n\r\n                const base64Heading = '\\;base64\\,';\r\n\r\n                if (new RegExp('(\\.(' + supportedExtensions[formatCandidate] + ')$)|' + base64Heading, 'g').test(resource.resource)) {\r\n\r\n                    if (new RegExp(base64Heading, 'g').test(resource.resource)) {\r\n\r\n                        let matches64 = resource.resource.match(new RegExp('^data:' + formatCandidate + '\\/(' + supportedExtensions[formatCandidate] + ')', 'g'));\r\n\r\n                        if (null === matches64) {\r\n                            return;\r\n                        }\r\n\r\n                        matches64 = matches64[0];\r\n\r\n                        output.format = formatCandidate;\r\n                        output.extension = matches64.replace('data:' + formatCandidate + '/', '');\r\n                        output.tag = supportedTags[formatCandidate];\r\n\r\n                        breakLoop = true;\r\n\r\n                    } else {\r\n\r\n                        let matches = resource.resource.match(new RegExp(supportedExtensions[formatCandidate], 'g'));\r\n\r\n                        if (matches) {\r\n\r\n                            output.format = formatCandidate;\r\n                            output.extension = matches[0];\r\n                            output.tag = supportedTags[formatCandidate];\r\n\r\n                            breakLoop = true;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n\r\n            if (isHTMLElement(resource.element)) {\r\n\r\n                let\r\n                    tagName = resource.element.tagName.toLowerCase(),\r\n                    allTags = '';\r\n\r\n                Object.values(supportedTags).forEach(tags => {\r\n                    allTags += '|' + tags;\r\n                });\r\n\r\n                allTags = allTags.split('|');\r\n\r\n                if (isInArray(tagName, allTags)) {\r\n                    output.tag = tagName;\r\n                    output.consistent = true;\r\n                    if (output.format === null) {\r\n                        Object.keys(supportedTags).forEach(format => {\r\n                            if (stringContains(supportedTags[format], output.tag)) {\r\n                                output.format = format;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n            if (stringContains(output.tag, '|')) {\r\n                output.tag = output.tag.split('|')[0];\r\n            }\r\n\r\n            return output;\r\n\r\n        };\r\n\r\n    let\r\n        privateEventsStorage = {},\r\n        privateCache = [];\r\n\r\n    // TODO: Promise support\r\n    // TODO: think about useful vars in callback args (this class is not public but its vars are returned in .progress() callback)\r\n    /** TODO: description of the MyClass constructor function.\r\n     * @class\r\n     * @classdesc TODO: description of the SingleLoader class.\r\n     */\r\n    class SingleLoader {\r\n\r\n        /**\r\n         * @param {Object} options\r\n         */\r\n        constructor(options) {\r\n\r\n            this._settings = {\r\n                ...{\r\n                    srcAttr: 'data-src',\r\n                    srcsetAttr: 'data-srcset',\r\n                    playthrough: false,\r\n                    visible: false,\r\n                }, ...options\r\n            };\r\n\r\n            this.srcAttr = '';\r\n            this.srcsetAttr = '';\r\n\r\n            if (!stringStartsWith(this._settings.srcAttr, 'data-')) {\r\n                this.srcAttr = this._settings.srcAttr;\r\n                this._settings.srcAttr = 'data-' + this._settings.srcAttr;\r\n            } else {\r\n                this.srcAttr = this._settings.srcAttr.replace('data-', '');\r\n            }\r\n\r\n            if (!stringStartsWith(this._settings.srcsetAttr, 'data-')) {\r\n                this.srcsetAttr = this._settings.srcsetAttr;\r\n                this._settings.srcsetAttr = 'data-' + this._settings.srcsetAttr;\r\n            } else {\r\n                this.srcsetAttr = this._settings.srcsetAttr.replace('data-', '');\r\n            }\r\n\r\n            this.srcAttr = hyphensToCamelCase(this.srcAttr);\r\n            this.srcsetAttr = hyphensToCamelCase(this.srcsetAttr);\r\n\r\n            this._id = null;\r\n            this._idEvent = null;\r\n            this._busy = false;\r\n\r\n            this._element = null;\r\n            this._resource = null;\r\n            this._format = null;\r\n            this._observer = null;\r\n\r\n            this._done = () => { };\r\n            this._success = () => { };\r\n            this._error = () => { };\r\n\r\n            this._callback = (e) => {\r\n\r\n                this._busy = false;\r\n                if( null !== this._observer ){\r\n                    this._observer.unobserve(this._element);\r\n                }\r\n\r\n                const src = this._element.currentSrc || this._element.src;\r\n\r\n                if (!isInArray(src, privateCache)) {\r\n                    privateCache.push(src);\r\n                }\r\n\r\n                let thisArguments = [this._element, e.type, src, this._id];\r\n\r\n                this[e.type !== 'error' ? '_success' : '_error'].apply(this, thisArguments);\r\n                this._done.apply(this, thisArguments);\r\n\r\n            };\r\n\r\n        }\r\n\r\n        /**\r\n         * @param {Object} data\r\n         */\r\n        set resource(data) {\r\n\r\n            if (typeof data === 'object' && 'id' in data && 'element' in data && 'resource' in data) {\r\n\r\n                this._id = data.id;\r\n                this._element = data.element;\r\n                this._resource = data.resource;\r\n\r\n                let info = decodeResource({ resource: this._resource, element: this._element });\r\n                this._tag = info.tag;\r\n                this._consistent = info.consistent;\r\n                this._format = info.format;\r\n                this._exists = this._element !== null;\r\n                this._originalElement = this._element;\r\n\r\n                if ( !this._exists || !this._consistent ) {\r\n                    this._element = document.createElement(this._tag);\r\n                    this._element.dataset[this.srcAttr] = this._resource;\r\n                }\r\n                \r\n                if( this._exists && this._settings.visible && IntersectionObserverSupported ){\r\n                    this._observer = new IntersectionObserver((entries, observer) => {\r\n                        entries.forEach(entry => entry.target.intersectionRatio = entry.intersectionRatio);\r\n                    }, {\r\n                        root: null,\r\n                        rootMargin: '0px',\r\n                        threshold: 0.1\r\n                    });\r\n                    this._observer.observe(this._originalElement);\r\n                }\r\n\r\n                this._idEvent = this._element[pluginInstance + '_IDEvent'];\r\n                this._busy = this._idEvent !== undefined;\r\n                this._idEvent = this._busy ? this._idEvent : pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * @returns {string} \r\n         */\r\n        get resource() {\r\n            return this._resource;\r\n        }\r\n\r\n        /**\r\n         * @returns {boolean} se ha preso in carico il caricamento oppure no per vari motivi (è già caricato, non è nella viewport etc)\r\n         */\r\n        load() {\r\n\r\n            if (isLoaded(this._exists && this._consistent ? this._element : this._resource)) {\r\n\r\n                if (!this._busy) {\r\n                    // TODO: mayabe this should be called in this._callback\r\n                    detachEventListener(this._element, '.' + this._idEvent);\r\n                }\r\n\r\n                this._callback(new CustomEvent(!isBroken(this._exists && this._consistent ? this._element : this._resource) ? 'load' : 'error'));\r\n\r\n                return false;\r\n\r\n            } else if (this._exists && this._settings.visible && !isVisible(this._originalElement)) {\r\n\r\n                return false;\r\n\r\n            } else {\r\n\r\n                if (this._format === 'image') {\r\n\r\n                    attachEventListener(this._element, 'load.' + this._idEvent, this._callback, !this._busy);\r\n                    attachEventListener(this._element, 'error.' + this._idEvent, this._callback, !this._busy);\r\n\r\n                    const picture = this._element.closest('picture');\r\n\r\n                    if (picture && pictureElementSupported) {\r\n\r\n                        delete this._element.dataset[this.srcsetAttr];\r\n                        delete this._element.dataset[this.srcAttr];\r\n\r\n                        picture.querySelectorAll('source[' + this._settings.srcsetAttr + ']').forEach((el) => {\r\n                            el.setAttribute('srcset', el.dataset[this.srcAttr]);\r\n                            delete el.dataset[this.srcAttr];\r\n                        });\r\n\r\n                    } else {\r\n\r\n                        if (this._element.matches('[' + this._settings.srcsetAttr + ']')) {\r\n                            this._element.setAttribute('srcset', this._element.dataset[this.srcsetAttr]);\r\n                            delete this._element.dataset[this.srcsetAttr];\r\n                        }\r\n\r\n                        if (this._element.matches('[' + this._settings.srcAttr + ']')) {\r\n                            this._element.setAttribute('src', this._element.dataset[this.srcAttr]);\r\n                            delete this._element.dataset[this.srcAttr];\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if (this._format === 'video' || this._format === 'audio') {\r\n\r\n                    const\r\n                        isPlaythroughModeNormal = true === this._settings.playthrough,\r\n                        isPlaythroughModeFull = 'full' === this._settings.playthrough,\r\n                        sources = this._element.querySelectorAll('source'),\r\n                        isFullyBuffered = function (media) {\r\n                            return media.buffered.length && Math.round(media.buffered.end(0)) / Math.round(media.seekable.end(0)) === 1;\r\n                        };\r\n\r\n                    let callMediaLoad = false;\r\n\r\n                    if (sources) {\r\n\r\n                        sources.forEach((source) => {\r\n\r\n                            if (source.matches('[' + this._settings.srcAttr + ']')) {\r\n\r\n                                source.setAttribute('src', source.dataset[this.srcAttr]);\r\n                                delete source.dataset[this.srcsetAttr];\r\n\r\n                                callMediaLoad = true;\r\n\r\n                            }\r\n\r\n                            attachEventListener(source, 'error.' + this._idEvent, (e) => {\r\n\r\n                                const sourcesErrorId = pluginName + '_error';\r\n\r\n                                source[pluginInstance + '_' + sourcesErrorId] = true;\r\n\r\n                                if (sources.length === nodelistToArray(sources).filter(thisSource => true === thisSource[pluginInstance + '_' + sourcesErrorId]).length) {\r\n                                    this._callback(e);\r\n                                }\r\n\r\n                            }, !this._busy);\r\n\r\n                        });\r\n\r\n                    } else if (this._element.matches('[' + this._settings.srcAttr + ']')) {\r\n\r\n                        this._element.setAttribute('src', this._element.dataset[this.srcAttr]);\r\n                        delete this._element.dataset[this.srcAttr];\r\n\r\n                        attachEventListener(this._element, 'error.' + this._idEvent, this._callback, !this._busy);\r\n\r\n                        callMediaLoad = true;\r\n\r\n                    }\r\n\r\n                    if (callMediaLoad) {\r\n                        this._element.load();\r\n                    }\r\n\r\n                    attachEventListener(this._element, 'loadedmetadata.' + this._idEvent, () => {\r\n\r\n                        if (!isPlaythroughModeNormal && !isPlaythroughModeFull) {\r\n                            this._callback(new CustomEvent('load'));\r\n                        }\r\n\r\n                        if (isPlaythroughModeFull) {\r\n\r\n                            let onProgressReplacementInterval = setInterval(() => {\r\n\r\n                                let isError = this._element.readyState > 0 && !this._element.duration;\r\n\r\n                                if (isError || isFullyBuffered(this._element)) {\r\n\r\n                                    this._element.currentTime = 0;\r\n\r\n                                    if (!isError && !this._busy && this._element.paused && this._element.matches('[autoplay]')) {\r\n                                        this._element.play();\r\n                                    }\r\n\r\n                                    clearInterval(onProgressReplacementInterval);\r\n\r\n                                    this._callback(new CustomEvent(!isError ? 'load' : 'error'));\r\n\r\n                                } else {\r\n\r\n                                    if (!this._element.paused) {\r\n                                        this._element.pause();\r\n                                    }\r\n\r\n                                    if (!this._busy) {\r\n                                        this._element.currentTime += 2;\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }, 500);\r\n\r\n                            this._element[pluginName + '_' + this._idEvent] = onProgressReplacementInterval;\r\n\r\n                        }\r\n\r\n                    }, !this._busy);\r\n\r\n                    attachEventListener(this._element, 'canplay.' + this._idEvent, () => {\r\n                        if (isPlaythroughModeFull && this._element.currentTime === 0 && !isFullyBuffered(this._element)) {\r\n                            this._element.currentTime++;\r\n                        }\r\n                    }, !this._busy);\r\n\r\n                    attachEventListener(this._element, 'canplaythrough.' + this._idEvent, () => {\r\n                        if (isPlaythroughModeNormal) {\r\n                            this._callback(new CustomEvent('load'));\r\n                        }\r\n                    }, !this._busy);\r\n\r\n                } else {\r\n\r\n                    return false;\r\n\r\n                }\r\n\r\n                if (!this._busy) {\r\n                    this._element[pluginInstance + '_IDEvent'] = this._idEvent;\r\n                }\r\n\r\n            }\r\n\r\n            this._resource = this._element.currentSrc || this._element.src;\r\n\r\n            return !this._busy;\r\n\r\n        }\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @returns {undefined}\r\n         */\r\n        done(callback) {\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            this._done = function (element, status, resource, id) {\r\n                callback.apply(this, [element, status, resource, id]);\r\n            };\r\n\r\n        };\r\n\r\n        /**\r\n         * @returns {undefined}\r\n         */\r\n        abort() {\r\n\r\n            detachEventListener(this._element, '.' + this._idEvent);\r\n\r\n            if (isLoaded(this._exists ? this._element : this._resource)) {\r\n                return;\r\n            }\r\n\r\n            const\r\n                src = this._element.getAttribute('srcset'),\r\n                srcset = this._element.getAttribute('src');\r\n\r\n            if (undefined !== src) {\r\n                this._element.dataset[this.srcAttr] = src;\r\n                this._element.setAttribute(this._settings.srcAttr, src);\r\n                this._element.removeAttribute('src');\r\n                this._element.removeAttribute('srcset');\r\n            }\r\n\r\n            if (undefined !== srcset) {\r\n                this._element.dataset[this.srcsetAttr] = srcset;\r\n                this._element.setAttribute(this._settings.srcsetAttr, srcset);\r\n                this._element.removeAttribute('src');\r\n                this._element.removeAttribute('srcset');\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // TODO: Promise support\r\n    // TODO: private vars\r\n    // TODO: refactory succes/done/progress code...\r\n    /** TODO: description of the MyClass constructor function.\r\n     * @class\r\n     * @classdesc TODO: description of the Loader class.\r\n     */\r\n    class Loader {\r\n\r\n        /**\r\n         * @param {Object} options\r\n         */\r\n        constructor(options) {\r\n\r\n            this._collection = [];\r\n            this._collectionLoaded = [];\r\n            this._collectionInstances = [];\r\n            this._collectionPending = [];\r\n            this._resourcesLoaded = [];\r\n\r\n            this._settings = {\r\n                ...{\r\n                    srcAttr: 'data-src',\r\n                    srcsetAttr: 'data-srcset',\r\n                    playthrough: false,\r\n                    visible: false,\r\n                    backgrounds: false,\r\n                    attributes: []\r\n                }, ...options\r\n            };\r\n\r\n            this.srcAttr = '';\r\n            this.srcsetAttr = '';\r\n            if (!stringStartsWith(this._settings.srcAttr, 'data-')) {\r\n                this.srcAttr = this._settings.srcAttr;\r\n                this._settings.srcAttr = 'data-' + this._settings.srcAttr;\r\n            } else {\r\n                this.srcAttr = this._settings.srcAttr.replace('data-', '');\r\n            }\r\n            if (!stringStartsWith(this._settings.srcsetAttr, 'data-')) {\r\n                this.srcsetAttr = this._settings.srcsetAttr;\r\n                this._settings.srcsetAttr = 'data-' + this._settings.srcsetAttr;\r\n            } else {\r\n                this.srcsetAttr = this._settings.srcsetAttr.replace('data-', '');\r\n            }\r\n\r\n            if (typeof this._settings.attributes === 'string') {\r\n                this._settings.attributes = this._settings.attributes.split(this._settings.attributes.contains(',') ? ',' : ' ');\r\n            }\r\n            if (!Array.isArray(this._settings.attributes)) {\r\n                this._settings.attributes = [];\r\n            }\r\n\r\n            this.srcAttr = hyphensToCamelCase(this.srcAttr);\r\n            this.srcsetAttr = hyphensToCamelCase(this.srcsetAttr);\r\n\r\n            this.percentage = 0;\r\n\r\n            this._done = () => { };\r\n            this._progress = () => { };\r\n            this._success = () => { };\r\n            this._error = () => { };\r\n            this._loop = this.load;\r\n\r\n            this._abort = false;\r\n            this._loaded = 0;\r\n            this._complete = false;\r\n            this._busy = false;\r\n\r\n        }\r\n\r\n        /**\r\n         * @param {Array|HTMLElement} collection\r\n         */ // TODO: Nodelist / Array of HTMLElement check maybe?\r\n        set collection(collection) {\r\n\r\n            let collectedResources = [];\r\n\r\n            if( isHTMLElement(collection) || collection === document ){ // TODO: check collection\r\n                        \r\n                let element = collection;\r\n\r\n                const\r\n                    targets = 'img, video, audio',\r\n                    targetsExtended = targets + ', picture, source',\r\n                    targetsFilter = '[' + this._settings.srcAttr + '], [' + this._settings.srcsetAttr + ']';\r\n\r\n                let targetsTags = nodelistToArray(element.querySelectorAll(targets));\r\n\r\n                if (element.matches(targetsExtended)) {\r\n                    targetsTags.push(element);\r\n                }\r\n\r\n                targetsTags = targetsTags.filter((target) => {\r\n                    let children = nodelistToArray(target.children);\r\n                    children = children.filter(x => x.matches(targetsExtended));\r\n                    children = children.filter(x => x.matches(targetsFilter));\r\n                    return target.matches(targetsFilter) || children.length;\r\n                });\r\n                targetsTags.forEach((target) => {\r\n\r\n                    let targetSource = target;\r\n\r\n                    if (!targetSource.matches(targetsFilter)) {\r\n                        targetSource = targetSource.querySelectorAll(targetsFilter);\r\n                        targetSource = [...targetSource][0];\r\n                    }\r\n\r\n                    collectedResources.push({\r\n                        element: target,\r\n                        resource: targetSource.getAttribute(this._settings.srcAttr) || targetSource.getAttribute(this._settings.srcsetAttr)\r\n                    });\r\n\r\n                });\r\n\r\n                if (true === this._settings.backgrounds) {\r\n\r\n                    let targetsBg = nodelistToArray(element.querySelectorAll('*'));\r\n                    targetsBg.push(element);\r\n                    targetsBg = targetsBg.filter(target => !target.matches(targetsExtended));\r\n                    targetsBg = targetsBg.filter(target => getComputedStyle(target).backgroundImage !== 'none');\r\n                    targetsBg.forEach((target) => {\r\n\r\n                        const url = getComputedStyle(target).backgroundImage.match(/\\((.*?)\\)/);\r\n\r\n                        if (null !== url && url.length >= 2) {\r\n                            collectedResources.push({\r\n                                element: target,\r\n                                resource: url[1].replace(/('|\")/g, '')\r\n                            });\r\n                        }\r\n\r\n                    });\r\n\r\n                }\r\n\r\n                this._settings.attributes.forEach(attr => {\r\n\r\n                    nodelistToArray(element.querySelectorAll('[' + attr + ']:not(' + targetsExtended + ')')).forEach((target) => {\r\n                        collectedResources.push({\r\n                            element: target,\r\n                            resource: target.getAttribute(attr)\r\n                        });\r\n                    });\r\n\r\n                    if (element.matches('[' + attr + ']') && !element.matches(targetsExtended)) {\r\n                        collectedResources.push({\r\n                            element: element,\r\n                            resource: element.getAttribute(attr)\r\n                        });\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n\r\n            collectedResources.forEach(item => {\r\n\r\n                let element = {\r\n                    resource: '',\r\n                    element: null,\r\n                    id: generateInstanceID()\r\n                };\r\n\r\n                if (typeof item === 'string') {\r\n                    element.resource = item;\r\n                } else if (typeof item === 'object' && 'resource' in item) {\r\n                    element = { ...element, ...item };\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                this._collection.push(element);\r\n\r\n            });\r\n\r\n        }\r\n\r\n        /**\r\n         * @returns {Array} collection\r\n         */\r\n        get collection() {\r\n            return this._collection;\r\n        }\r\n\r\n        /**\r\n         * @returns {undefined}\r\n         */\r\n        load() {\r\n\r\n            // resets pending elements (sequential opt helper array) every time we loop\r\n            this._collectionPending = [];\r\n\r\n            const sequentialMode = true === this._settings.sequential;\r\n\r\n            for (let i = 0; i < this._collection.length; i++) {\r\n\r\n                if (this._abort) {\r\n                    break;\r\n                }\r\n\r\n                let thisLoadId = this._collection[i].id,\r\n                    thisLoadIndex = arrayFindIndex(this._collectionInstances, x => x.id === thisLoadId),\r\n                    thisLoadInstance = new SingleLoader(this._settings);\r\n\r\n                if (thisLoadIndex === -1) {\r\n                    this._collectionInstances.push({ id: thisLoadId, instance: thisLoadInstance });\r\n                    thisLoadIndex = arrayFindIndex(this._collectionInstances, x => x.id === thisLoadId);\r\n                } else {\r\n                    this._collectionInstances[thisLoadIndex].instance = thisLoadInstance;\r\n                }\r\n\r\n                thisLoadInstance.resource = this._collection[i];\r\n\r\n                thisLoadInstance.done((element, status, resource, id) => {\r\n\r\n                    if (this._complete || this._abort) {\r\n                        return;\r\n                    }\r\n\r\n                    const aProgress = !isInArray(id, this._collectionLoaded);\r\n\r\n                    if (aProgress) {\r\n\r\n                        this._collectionLoaded.push(id);\r\n                        this._busy = false;\r\n\r\n                        this._loaded++;\r\n                        this.percentage = this._loaded / this._collection.length * 100;\r\n                        this.percentage = parseFloat(this.percentage.toFixed(4));\r\n\r\n                        const thisResource = { resource: resource, status: status, element: element };\r\n                        this._resourcesLoaded.push(thisResource);\r\n                        this._progress.call(this, thisResource);\r\n                        this[status !== 'error' ? '_success' : '_error'].call(this, thisResource);\r\n                        // TODO: dispatch event on element maybe?\r\n                        // element.dispatchEvent(new CustomEvent(pluginPrefix + capitalize(status) + '.' + pluginPrefix));\r\n\r\n                    }\r\n\r\n                    if (this._loaded === this._collection.length) {\r\n\r\n                        this._done.call(this, this._resourcesLoaded);\r\n\r\n                        this._complete = true;\r\n\r\n                    } else if (aProgress && sequentialMode && this._collectionPending.length) {\r\n\r\n                        this._collectionPending = this._collectionPending.filter(x => x.id !== id);\r\n\r\n                        if (this._collectionPending.length) {\r\n                            this._busy = this._collectionPending[0].instance.load();\r\n                        }\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                if (!sequentialMode || (sequentialMode && !this._busy)) {\r\n                    this._busy = thisLoadInstance.load();\r\n\r\n                } else if (sequentialMode && this._busy && (!this._settings.visible || !thisLoadInstance._exists || (this._settings.visible && thisLoadInstance._exists && isVisible(thisLoadInstance._originalElement)))) {\r\n                    this._collectionPending.push({ id: thisLoadId, instance: thisLoadInstance });\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @returns {undefined}\r\n         */\r\n        done(callback) {\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            const _done = function (resources) {\r\n                callback.call(this, resources);\r\n            };\r\n\r\n            if (this._collection.length) {\r\n                this._done = _done;\r\n            } else {\r\n                _done();\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @returns {undefined}\r\n         */\r\n        progress(callback) {\r\n\r\n            if (typeof callback !== 'function'){\r\n                return;\r\n            }\r\n\r\n            if (this._collection.length) {\r\n                this._progress = function (resource) {\r\n                    callback.call(this, resource);\r\n                };\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @returns {undefined}\r\n         */\r\n        success(callback) {\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            if (this._collection.length) {\r\n                this._success = function (resource) {\r\n                    callback.call(this, resource);\r\n                };\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * @param {Function} callback\r\n         * @returns {undefined}\r\n         */\r\n        error(callback) {\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            const _func = function (resource) {\r\n                callback.call(this, resource);\r\n            };\r\n\r\n            if (this._collection.length) {\r\n                this._error = _func;\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * @returns {undefined}\r\n         */\r\n        abort() {\r\n\r\n            this._collectionInstances.forEach(thisInstance => {\r\n                thisInstance.instance.abort();\r\n            });\r\n\r\n            if (this._collection.length) {\r\n                this._abort = true;\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    // public interface\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    // requirejs\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(capitalize(pluginName), Loader);\r\n        // nodejs\r\n    } else if ('object' === typeof exports) {\r\n        module.exports[capitalize(pluginName)] = Loader;\r\n        // vanilla\r\n    } else {\r\n        window[capitalize(pluginName)] = Loader;\r\n    }\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // jQuery interface\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    if (!$) {\r\n        return undefined;\r\n    }\r\n\r\n    $[capitalize(pluginName)] = Loader;\r\n\r\n    const\r\n        $document = $(document),\r\n        $window = $(window),\r\n        // thanks https://gist.github.com/beaucharman/e46b8e4d03ef30480d7f4db5a78498ca\r\n        throttle = (callback, wait, context = this) => {\r\n            let timeout = null,\r\n                callbackArgs = null\r\n            const later = () => {\r\n                callback.apply(context, callbackArgs)\r\n                timeout = null\r\n            }\r\n            return function () {\r\n                if (!timeout) {\r\n                    callbackArgs = arguments\r\n                    timeout = setTimeout(later, wait)\r\n                }\r\n            }\r\n        };\r\n\r\n    let methodCollection = [];\r\n\r\n    $.fn[pluginMethod] = function (options) {\r\n\r\n        let originalUserOptions = options;\r\n\r\n        if (typeof options !== 'object') {\r\n            options = {};\r\n        }\r\n\r\n        let settings = {\r\n            ...{\r\n\r\n                srcAttr: 'data-src',\r\n                srcsetAttr: 'data-srcset',\r\n\r\n                visible: false,\r\n\r\n                sequential: false,\r\n\r\n                backgrounds: false,\r\n                extraAttrs: [],\r\n\r\n                playthrough: false,\r\n\r\n                early: false,\r\n                earlyTimeout: 0,\r\n\r\n                onProgress: () => { },\r\n                onLoad: () => { },\r\n                onError: () => { },\r\n\r\n                onComplete: () => { },\r\n\r\n            }, ...options\r\n        };\r\n\r\n        let callback = settings.onComplete;\r\n        if ($.isFunction(originalUserOptions)) {\r\n            callback = originalUserOptions;\r\n        }\r\n\r\n        return this.each(function (i) {\r\n\r\n            // TODO: mutation observer when new children are appended\r\n\r\n            const\r\n                $element = $(this),\r\n                uniqueMethodPluginName = generateInstanceID() + i,\r\n                thisLoadInstance = new Loader(settings);\r\n\r\n            thisLoadInstance.collection = this;\r\n\r\n            methodCollection.push({\r\n                id: uniqueMethodPluginName,\r\n                instance: thisLoadInstance,\r\n                element: this,\r\n                timeout: null\r\n            });\r\n\r\n            thisLoadInstance.progress((resource) => {\r\n\r\n                $(resource.element).trigger(pluginPrefix + capitalize(resource.status) + '.' + pluginPrefix, [resource.element, resource.resource]);\r\n                $element.trigger(pluginPrefix + 'Progress.' + pluginPrefix, [this, resource]);\r\n\r\n                const thisArguments = [thisLoadInstance, resource];\r\n\r\n                if (typeof settings.onProgress === 'function') {\r\n                    settings.onProgress.apply(this, thisArguments);\r\n                }\r\n\r\n                let eventName = capitalize(resource.status);\r\n                if (typeof settings['on' + eventName] === 'function') {\r\n                    settings['on' + eventName].apply(this, thisArguments);\r\n                }\r\n\r\n            });\r\n\r\n            thisLoadInstance.done(resources => {\r\n\r\n                $element.trigger(pluginPrefix + 'Complete.' + pluginPrefix, [this, resources]);\r\n                callback.apply(this, [thisLoadInstance, resources]);\r\n\r\n                if (settings.visible) {\r\n                    /*if (IntersectionObserverSupported) {\r\n                        thisLoadInstance.collection.forEach(item => item.element.intersectionObserver.unobserve(item.element));\r\n\r\n                    } else {*/\r\n                        $window.off('scroll.' + uniqueMethodPluginName);\r\n\r\n                    //}\r\n                }\r\n\r\n                // refresh other method calls for same el (omitting this one)\r\n                methodCollection = methodCollection.filter(x => x.id !== uniqueMethodPluginName);\r\n                methodCollection.forEach(thisMethodCollection => {\r\n                    if ($element.is(thisMethodCollection.element)) {\r\n                        thisMethodCollection.instance.load();\r\n                    }\r\n                });\r\n\r\n            });\r\n\r\n            thisLoadInstance.load();\r\n\r\n            if (settings.visible) {\r\n               /* if (IntersectionObserverSupported) {\r\n\r\n                    thisLoadInstance.collection.forEach(item => {\r\n\r\n                        item.element.intersectionObserver = new IntersectionObserver((entries, observer) => {\r\n                            entries.forEach(entry => {\r\n                                if( entry.intersectionRatio > 0 ){\r\n                                    thisLoadInstance.load();\r\n                                }\r\n                            });\r\n                        }, {\r\n                            root: null,\r\n                            rootMargin: '0px',\r\n                            threshold: 0.0\r\n                        });\r\n\r\n                        item.element.intersectionObserver.observe(item.element);\r\n\r\n                    });\r\n\r\n                } else {*/\r\n\r\n                    $window.on('scroll.' + uniqueMethodPluginName, throttle(() => thisLoadInstance.load(), 250));\r\n\r\n               //}\r\n            }\r\n\r\n            if (true === settings.early) {\r\n\r\n                let breakLoop = false;\r\n\r\n                methodCollection.forEach(thisMethodCollection => {\r\n\r\n                    if (breakLoop) {\r\n                        return;\r\n                    }\r\n\r\n                    if (methodCollection[key].id === uniqueMethodPluginName) {\r\n\r\n                        clearTimeout(thisMethodCollection.timeout);\r\n\r\n                        let timeout = parseInt(settings.earlyTimeout);\r\n\r\n                        thisMethodCollection.timeout = setTimeout(() => {\r\n\r\n                            // TODO: appropriate method to set/update settings?\r\n                            thisMethodCollection.instance._settings.visible = false;\r\n                            thisMethodCollection.instance._settings.sequential = true;\r\n\r\n                            thisMethodCollection.instance.load();\r\n\r\n                        }, !isNaN(timeout) && isFinite(timeout) ? timeout : 0);\r\n\r\n                        breakLoop = true;\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            }\r\n\r\n        });\r\n\r\n    };\r\n\r\n})(window, document, jQuery);"],"file":"nite.loader.js"}