{"version":3,"names":[],"mappings":"","sources":["nite.loader.js"],"sourcesContent":["/*! JQuery Nite Loader | Daniele Fioroni | dfioroni91@gmail.com */\r\n(function (window, document, $, undefined) {\r\n    'use strict';\r\n\r\n    // thanks to https://github.com/paulmillr/console-polyfill\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    (function () {\r\n        if (!window.console) {\r\n            window.console = {};\r\n        }\r\n        let con = window.console,\r\n            prop, method,\r\n            dummy = () => { },\r\n            properties = ['memory'],\r\n            methods = ('assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',');\r\n        while (prop = properties.pop()) {\r\n            if (!con[prop]) {\r\n                con[prop] = {};\r\n            }\r\n        }\r\n        while (method = methods.pop()) {\r\n            if (!con[method]) {\r\n                con[method] = dummy;\r\n            }\r\n        }\r\n    })();\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    (function () {\r\n        if (typeof window.CustomEvent === \"function\") {\r\n            return false;\r\n        }\r\n        function CustomEvent(event, params) {\r\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\r\n            let evt = document.createEvent('CustomEvent');\r\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n            return evt;\r\n        }\r\n        CustomEvent.prototype = window.Event.prototype;\r\n        window.CustomEvent = CustomEvent;\r\n    })();\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // thanks to https://github.com/jsPolyfill/Array.prototype.findIndex\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    Array.prototype.findIndex = Array.prototype.findIndex || function (callback) {\r\n        if (this === null) {\r\n            throw new TypeError('Array.prototype.findIndex called on null or undefined');\r\n        } else if (typeof callback !== 'function') {\r\n            throw new TypeError('callback must be a function');\r\n        }\r\n        const\r\n            list = Object(this),\r\n            length = list.length >>> 0,\r\n            thisArg = arguments[1];\r\n        for (let i = 0; i < length; i++) {\r\n            if (callback.call(thisArg, list[i], i, list)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray#Polyfill\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    Array.isArray = Array.isArray || function (arg) {\r\n        return Object.prototype.toString.call(arg) === '[object Array]';\r\n    };\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    String.prototype.startsWith = String.prototype.startsWith || function (search, pos) {\r\n        return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\r\n    };\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    String.prototype.includes = String.prototype.includes || function (search, start) {\r\n        'use strict';\r\n        if (typeof start !== 'number') {\r\n            start = 0;\r\n        }\r\n        if (start + search.length > this.length) {\r\n            return false;\r\n        } else {\r\n            return this.indexOf(search, start) !== -1;\r\n        }\r\n    };\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // thanks to https://gist.github.com/eliperelman/1031656\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    [].filter || (Array.prototype.filter = function (a, b, c, d, e) { c = this; d = []; for (e in c) ~~e + '' == e && e >= 0 && a.call(b, c[e], +e, c) && d.push(c[e]); return d })\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    const\r\n        generateInstanceID = function () {\r\n            return Math.floor(Math.random() * (9999 - 1000)) + 1000;\r\n        },\r\n        pluginPrefix = 'nite',\r\n        pluginMethod = pluginPrefix + 'Load',\r\n        pluginName = pluginMethod + 'er',\r\n        pluginInstance = generateInstanceID();\r\n\r\n    window[pluginName + 'Cache'] = [];\r\n\r\n    let privateEventsStorage = {};\r\n\r\n    const\r\n        eventNamespaceParserSeparator = '__namespace__',\r\n        detachEventListener = (element, events) => {\r\n\r\n            if (!element || typeof events !== 'string') {\r\n                return;\r\n            }\r\n\r\n            if (events.startsWith('.')) {\r\n                Object.keys(privateEventsStorage).forEach((key) => {\r\n                    if ( key.replace(eventNamespaceParserSeparator, '.').includes(events) && privateEventsStorage[key].element === element ){\r\n                        detachEventListener(element, key.replace(eventNamespaceParserSeparator, '.'));\r\n                    }\r\n                });\r\n            } else {\r\n\r\n                events = events.split('.');\r\n\r\n                const\r\n                    type = events[0],\r\n                    namespace = events[1];\r\n\r\n                if (namespace) {\r\n                    events = events.join(eventNamespaceParserSeparator);\r\n                }\r\n\r\n                if (events in privateEventsStorage) {\r\n                    element.removeEventListener(type, privateEventsStorage[events].handler);\r\n                    delete privateEventsStorage[events];\r\n                }\r\n            }\r\n\r\n        },\r\n        attachEventListener = (element, events, handler, once) => {\r\n\r\n            if (!element || typeof events !== 'string' || typeof handler !== 'function') {\r\n                return;\r\n            }\r\n\r\n            events = events.split('.');\r\n\r\n            const\r\n                type = events[0],\r\n                namespace = events[1];\r\n\r\n            if (namespace) {\r\n                events = events.join(eventNamespaceParserSeparator);\r\n            }\r\n\r\n            privateEventsStorage[events] = {\r\n                element: element,\r\n                count: 0,\r\n                once: false\r\n            };\r\n\r\n            if (true === once) {\r\n                let _handler = handler;\r\n                handler = function (event) {\r\n                    privateEventsStorage[events].count++;\r\n                    if (privateEventsStorage[events].once && privateEventsStorage[events].count > 1) {\r\n                        return;\r\n                    }\r\n                    _handler.call(this, event);\r\n                    detachEventListener(element, events);\r\n                }\r\n            } else {\r\n                once = false;\r\n            }\r\n\r\n            privateEventsStorage[events] = {...privateEventsStorage[events], ...{\r\n                handler: handler,\r\n                once: once\r\n            }};\r\n            element.addEventListener(type, privateEventsStorage[events].handler, { once: once });\r\n\r\n        },\r\n        isInArray = (needle, stack) => {\r\n            return stack.indexOf(needle) > -1;\r\n        },\r\n        capitalize = (string) => {\r\n            return string.charAt(0).toUpperCase() + string.slice(1);\r\n        },\r\n        isVisible = (element) => {\r\n\r\n            if (window.getComputedStyle(element, 'display') === 'none') {\r\n                return false;\r\n            }\r\n\r\n            const\r\n                bodyEl = document.getElementsByTagName('body')[0],\r\n                winWidth = window.innerWidth || documnt.documentElement.clientWidth || bodyEl.clientWidth,\r\n                winHeight = window.innerHeight || documnt.documentElement.clientHeight || bodyEl.clientHeight,\r\n                rect = element.getBoundingClientRect();\r\n\r\n            return !(rect.right < 0 || rect.bottom < 0 || rect.left > winWidth || rect.top > winHeight);\r\n\r\n        },\r\n        isHTMLObject = function (object) {\r\n            if (typeof object !== 'object') {\r\n                return false;\r\n            }\r\n            try {\r\n                return object instanceof HTMLElement;\r\n            }\r\n            catch (e) {\r\n                return object.nodeType === 1 && typeof object.style === 'object' && typeof object.ownerDocument === 'object';\r\n            }\r\n        },\r\n        isLoaded = function (element) {\r\n            return (\r\n                (\r\n                    typeof element === 'string'\r\n                    &&\r\n                    isInArray(element, window[pluginName + 'Cache'])\r\n                )\r\n                ||\r\n                (\r\n                    isHTMLObject(element)\r\n                    && ('currentSrc' in element && element.currentSrc.length)\r\n                    && (('complete' in element && element.complete) || ('readyState' in element && element.readyState >= 2))\r\n                )\r\n            );\r\n        },\r\n        isBroken = function (element) {\r\n            return (\r\n                isLoaded(element)\r\n                &&\r\n                (\r\n                    (\r\n                        typeof element === 'object'\r\n                        &&\r\n                        (\r\n                            ( 'naturalWidth' in element && Math.floor(element.naturalWidth) === 0 )\r\n                            ||\r\n                            ( 'videoWidth' in element && element.videoWidth === 0 )\r\n                        )\r\n                    )\r\n                    ||\r\n                    typeof element === 'string'// TODO: check if is url maybe?\r\n                )\r\n            );\r\n        },\r\n        isFormat = function (item, expectedFormat) {\r\n\r\n            const\r\n                formatExtensions = {\r\n                    image: 'jp[e]?g||jpe|jif|jfif|jfi|gif|png|tif[f]?|bmp|dib|webp|ico|cur|svg',\r\n                    audio: 'mp3|ogg|oga|spx|ogg|wav',\r\n                    video: 'mp4|ogv|webm'\r\n                },\r\n                formatNames = Object.keys(formatExtensions),\r\n                base64Heading = '\\;base64\\,';\r\n\r\n            let output = { format: null, extension: null };\r\n\r\n            if (typeof item === 'string') {\r\n\r\n                item = item.split('?')[0]; // this gets rid of query strings\r\n                item = item.split('#')[0]; // this gets rid of hashes\r\n\r\n                if (item === '') {\r\n                    return false;\r\n                }\r\n\r\n                let formatQueue = undefined !== expectedFormat ? [expectedFormat] : formatNames;\r\n\r\n                for (const x in formatQueue) {\r\n\r\n                    if (formatQueue.hasOwnProperty(x)) {\r\n\r\n                        if (new RegExp('(\\.(' + formatExtensions[formatQueue[x]] + ')$)|' + base64Heading, 'g').test(item)) {\r\n\r\n                            if (new RegExp(base64Heading, 'g').test(item)) {\r\n\r\n                                let matches64 = item.match(new RegExp('^data:' + formatQueue[x] + '\\/(' + formatExtensions[formatQueue[x]] + ')', 'g'));\r\n\r\n                                if (!matches64 || null === matches64) {\r\n                                    continue;\r\n                                }\r\n\r\n                                matches64 = matches64[0];\r\n\r\n                                output.format = formatQueue[x];\r\n                                output.extension = matches64.replace('data:' + formatQueue[x] + '/', '');\r\n\r\n                                break;\r\n\r\n                            } else {\r\n\r\n                                let matches = item.match(new RegExp(formatExtensions[formatQueue[x]], 'g'));\r\n\r\n                                if (matches) {\r\n\r\n                                    output.format = formatQueue[x];\r\n                                    output.extension = matches[0];\r\n\r\n                                    break;\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (isHTMLObject(item)) {\r\n\r\n                let tagName = item.tagName.toLowerCase();\r\n\r\n                if (isInArray(tagName, formatNames)) {\r\n                    output.format = item.tagName.toLowerCase();\r\n                }\r\n\r\n                if (tagName === 'img') {\r\n                    output.format = 'image';\r\n                }\r\n\r\n            }\r\n\r\n            return output;\r\n\r\n        };\r\n\r\n    // TODO: Promise?\r\n    class ResourceLoader {\r\n\r\n        constructor(options) {\r\n\r\n            // TODO: private\r\n            // TODO: think about useful vars (this class is not public but its vars are returned in .progress() callback)\r\n            this._settings = {\r\n                ...{\r\n                    srcAttr: 'data-src',\r\n                    srcsetAttr: 'data-srcset',\r\n                    playthrough: false,\r\n                    visible: false,\r\n                }, ...options\r\n            };\r\n\r\n            this._id = null;\r\n            this._id_event = null;\r\n\r\n            this._element = null;\r\n\r\n            this._resource = null;\r\n            this._busy = false;\r\n\r\n            this._format = null;\r\n\r\n            this._done = () => { };\r\n            this._success = () => { };\r\n            this._error = () => { };\r\n\r\n            this._callback = (e) => {\r\n\r\n                this._busy = false;\r\n\r\n                const src = this._element.currentSrc || this._element.src;\r\n\r\n                if (!isInArray(src, window[pluginName + 'Cache']))\r\n                    window[pluginName + 'Cache'].push(src);\r\n\r\n                let this_arguments = [this._element, e.type, src, this._id];\r\n\r\n                this[e.type !== 'error' ? '_success' : '_error'].apply(this, this_arguments);\r\n                this._done.apply(this, this_arguments);\r\n\r\n            };\r\n\r\n        }\r\n\r\n        set resource(data) {\r\n\r\n            const\r\n                element_resource = isHTMLObject(data.resource),\r\n                string_resource = typeof data.resource === 'string';\r\n\r\n            if (!element_resource && !string_resource) {\r\n                return;\r\n            }\r\n\r\n            this._id = data.id;\r\n            this._format = isFormat(data.resource).format;\r\n\r\n            this._exists = element_resource; // TODO: maybe search for an element with this src\r\n\r\n            if (string_resource) {\r\n\r\n                let is_img = this._format === 'image';\r\n\r\n                this._element = document.createElement(is_img ? 'img' : this._format);\r\n\r\n                if (is_img) {\r\n                    this._settings.srcsetAttr = 'data-srcset';\r\n                }\r\n\r\n                this._settings.srcAttr = 'data-src';\r\n\r\n                this._resource = data.resource;\r\n\r\n            }\r\n\r\n            if (element_resource) {\r\n                this._element = data.resource;\r\n            }\r\n\r\n            if (string_resource) {\r\n\r\n                this._element.dataset[this._settings.srcAttr.replace('data-', '')] = this._resource;\r\n                this._element.dataset[this._settings.srcsetAttr.replace('data-', '')] = this._resource;\r\n                this._element.setAttribute(this._settings.srcAttr, this._resourc);\r\n                this._element.setAttribute(this._settings.srcsetAttr, this._resourc);\r\n\r\n            }\r\n\r\n            this._id_event = this._element[pluginInstance + '_IDEvent'];\r\n            this._busy = this._id_event !== undefined;\r\n            this._id_event = this._busy ? this._id_event : pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\r\n\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @returns {boolean} se ha preso in carico il caricamento oppure no per vari motivi (è già caricato, non è nella viewport etc)\r\n         */\r\n        process() {\r\n\r\n            const\r\n                src = this._settings.srcAttr,\r\n                src_clean = this._settings.srcAttr.replace('data-', '');\r\n\r\n            if (isLoaded(this._exists ? this._element : this._resource)) {\r\n\r\n                if (!this._busy) {\r\n                    detachEventListener(this._element, '.' + this._id_event); // TODO: mayabe this should be called in this._callback\r\n                }\r\n\r\n                this._callback(new CustomEvent(!isBroken(this._exists ? this._element : this._resource) ? 'load' : 'error'));\r\n\r\n                return false;\r\n\r\n            } else if (this._exists && this._settings.visible && !isVisible(this._element)) {\r\n\r\n                return false;\r\n\r\n            } else {\r\n\r\n                if (this._format === 'image') {\r\n\r\n                    attachEventListener(this._element, 'load.' + this._id_event, this._callback, !this._busy);\r\n                    attachEventListener(this._element, 'error.' + this._id_event, this._callback, !this._busy);\r\n\r\n                    const\r\n                        picture = this._element.closest('picture'),\r\n                        srcset = this._settings.srcsetAttr,\r\n                        srcset_clean = this._settings.srcsetAttr.replace('data-', '');\r\n\r\n                    if (picture && 'HTMLPictureElement' in window) {\r\n\r\n                        delete this._element.dataset[srcset_clean];\r\n                        delete this._element.dataset[src_clean];\r\n                        this._element.removeAttribute(srcset);\r\n                        this._element.removeAttribute(src);\r\n\r\n                        picture.querySelectorAll('source[' + srcset + ']').forEach((el) => {\r\n                            el.setAttribute('srcset', this._element.dataset[srcset_clean]);\r\n                            delete this._element.dataset[srcset_clean];\r\n                            el.removeAttribute(srcset);\r\n                        });\r\n\r\n                    } else {\r\n\r\n                        if (this._element.matches('[' + srcset + ']')) {\r\n                            this._element.setAttribute('srcset', this._element.dataset[srcset_clean]);\r\n                            delete this._element.dataset[srcset_clean];\r\n                            this._element.removeAttribute(srcset);\r\n                        }\r\n\r\n                        if (this._element.matches('[' + src + ']')) {\r\n                            this._element.setAttribute('src', this._element.dataset[src_clean]);\r\n                            delete this._element.dataset[src_clean];\r\n                            this._element.removeAttribute(src);\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if (this._format === 'video' || this._format === 'audio') {\r\n\r\n                    const\r\n\r\n                        is_playthrough_mode__normal = true === this._settings.playthrough,\r\n                        is_playthrough_mode__full = 'full' === this._settings.playthrough,\r\n\r\n                        sources = this._element.querySelectorAll('source'),\r\n                        isFullyBuffered = function (media) {\r\n\r\n                            return media.buffered.length && Math.round(media.buffered.end(0)) / Math.round(media.seekable.end(0)) === 1;\r\n\r\n                        };\r\n\r\n                    let call_media_load = false;\r\n\r\n                    if (sources) {\r\n\r\n                        sources.forEach((source) => {\r\n\r\n                            if (source.matches('[' + src + ']')) {\r\n\r\n                                source.setAttribute('src', source.dataset[src_clean]);\r\n                                delete source.dataset[src_clean];\r\n                                source.removeAttribute(src);\r\n\r\n                                call_media_load = true;\r\n\r\n                            }\r\n\r\n                            attachEventListener(source, 'error.' + this._id_event, (e) => {\r\n\r\n                                const sources_error_id = pluginName + '_error';\r\n\r\n                                source[pluginInstance + '_' + sources_error_id] = true;\r\n\r\n                                if ( sources.length === [...sources].filter(thisSource => true === thisSource[pluginInstance + '_' + sources_error_id]).length ) {\r\n                                    this._callback(e);\r\n                                }\r\n\r\n                            }, !this._busy);\r\n\r\n                        });\r\n\r\n                    } else {\r\n\r\n                        if (this._element.matches('[' + src + ']')) {\r\n\r\n                            this._element.setAttribute('src', this._$element.data(src_clean));\r\n                            delete this._element.dataset[src_clean];\r\n                            this._element.removeAttribute(src);\r\n\r\n                            attachEventListener(this._element, 'error.' + this._id_event, this._callback, !this._busy);\r\n\r\n                            call_media_load = true;\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                    if (call_media_load) {\r\n                        this._element.load();\r\n                    }\r\n\r\n\r\n                    attachEventListener(this._element, 'loadedmetadata.' + this._id_event, () => {\r\n\r\n                        if (!is_playthrough_mode__normal && !is_playthrough_mode__full) {\r\n                            this._callback(new CustomEvent('load'));\r\n                        }\r\n\r\n                        if (is_playthrough_mode__full) {\r\n\r\n                            let on_progress_replacement_interval = setInterval(() => {\r\n\r\n                                let is_error = this._element.readyState > 0 && !this._element.duration;\r\n\r\n                                if (is_error || isFullyBuffered(this._element)) {\r\n\r\n                                    this._element.currentTime = 0;\r\n\r\n                                    if (!is_error && !this._busy && this._element.paused && this._element.matches('[autoplay]')) {\r\n                                        this._element.play();\r\n                                    }\r\n\r\n                                    clearInterval(on_progress_replacement_interval);\r\n\r\n                                    this._callback(new CustomEvent(!is_error ? 'load' : 'error'));\r\n\r\n                                } else {\r\n\r\n                                    if (!this._element.paused) {\r\n                                        this._element.pause();\r\n                                    }\r\n\r\n                                    if (!this._busy) {\r\n                                        this._element.currentTime += 2;\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }, 500);\r\n\r\n                            this._element[pluginName + '_' + this._id_event] = on_progress_replacement_interval;\r\n\r\n                        }\r\n\r\n                    }, !this._busy);\r\n\r\n                    attachEventListener(this._element, 'canplay.' + this._id_event, () => {\r\n                        if (is_playthrough_mode__full && this._element.currentTime === 0 && !isFullyBuffered(this._element)) {\r\n                            this._element.currentTime++;\r\n                        }\r\n                    }, !this._busy);\r\n\r\n                    attachEventListener(this._element, 'canplaythrough.' + this._id_event, () => {\r\n                        if (is_playthrough_mode__normal) {\r\n                            this._callback(new CustomEvent('load'));\r\n                        }\r\n                    }, !this._busy);\r\n\r\n                } else {\r\n\r\n                    return false;\r\n\r\n                }\r\n\r\n                if (!this._busy) {\r\n                    this._element[pluginInstance + '_IDEvent'] = this._id_event;\r\n                }\r\n\r\n            }\r\n\r\n            this._resource = this._element.currentSrc || this._element.src;\r\n\r\n            return !this._busy;\r\n\r\n        }\r\n\r\n        done(callback) {\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            this._done = function (element, status, resource, id) {\r\n                callback.apply(this, [element, status, resource, id]);\r\n            };\r\n\r\n        };\r\n\r\n        abort() {\r\n\r\n            detachEventListener(this._element, '.' + this._id_event);\r\n\r\n            if (isLoaded(this._exists ? this._element : this._resource)) {\r\n                return;\r\n            }\r\n\r\n            const\r\n                src = this._element.getAttribute('srcset'),\r\n                srcset = this._element.getAttribute('src');\r\n\r\n            if (undefined !== src) {\r\n                this._element.dataset[src] = this._settings.srcAttr;\r\n                this._element.setAttribute(this._settings.srcAttr, src);\r\n                this._element.removeAttribute('src');\r\n                this._element.removeAttribute('srcset');\r\n            }\r\n\r\n            if (undefined !== srcset) {\r\n                this._element.dataset[srcset] = this._settings.srcsetAttr;\r\n                this._element.setAttribute(this._settings.srcsetAttr, srcset);\r\n                this._element.removeAttribute('src');\r\n                this._element.removeAttribute('srcset');\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // TODO: Promise?\r\n    class ResourcesLoader {\r\n\r\n        constructor(collection, options) {\r\n\r\n            // TODO: private\r\n            this._collection = [];\r\n            this._collection_loaded = [];\r\n            this._collection_instances = [];\r\n            this._collection_pending = [];\r\n            this._resources_loaded = [];\r\n\r\n            if (Array.isArray(collection) && (typeof collection[0] === 'string' || isHTMLObject(collection[0]))) {\r\n                for (const resource in collection) {\r\n                    if (collection.hasOwnProperty(resource)) {\r\n                        this._collection.push({ id: generateInstanceID(), resource: collection[resource] });\r\n                    }\r\n                }\r\n            }\r\n            if (typeof collection === 'string' || isHTMLObject(collection)) {\r\n                this._collection.push({ id: generateInstanceID(), resource: collection });\r\n            }\r\n\r\n            this._settings = {\r\n                ...{\r\n                    srcAttr: 'data-src',\r\n                    srcsetAttr: 'data-srcset',\r\n                    playthrough: false,\r\n                    visible: false,\r\n                }, ...options\r\n            };\r\n\r\n            this.percentage = 0;\r\n\r\n            this._done = () => { };\r\n            this._progress = () => { };\r\n            this._success = () => { };\r\n            this._error = () => { };\r\n\r\n            this._abort = false;\r\n            this._loaded = 0;\r\n            this._complete = false;\r\n            this._busy = false;\r\n\r\n            // self invoking this._loop + force asynchrony (gives time to chain methods synchronously)\r\n            (this._loop = () => setTimeout(() => this.loop(), 25))();\r\n\r\n        }\r\n\r\n        loop() {\r\n\r\n            this._collection_pending = []; // resets pending elements (sequential opt helper array) every time we loop\r\n\r\n            const sequential_mode = true === this._settings.sequential;\r\n\r\n            for (let i = 0; i < this._collection.length; i++) {\r\n\r\n                if (this._abort) {\r\n                    break;\r\n                }\r\n\r\n                let this_load_id = this._collection[i].id,\r\n                    this_load_index = this._collection_instances.findIndex(x => x.id === this_load_id),\r\n                    this_load_instance = new ResourceLoader(this._settings);\r\n\r\n                if (this_load_index === -1) {\r\n                    this._collection_instances.push({ id: this_load_id, instance: this_load_instance });\r\n                    this_load_index = this._collection_instances.findIndex(x => x.id === this_load_id);\r\n                } else {\r\n                    this._collection_instances[this_load_index].instance = this_load_instance;\r\n                }\r\n\r\n                this_load_instance.resource = this._collection[i];\r\n\r\n                this_load_instance.done((element, status, resource, id) => {\r\n\r\n                    if (this._complete || this._abort) {\r\n                        return;\r\n                    }\r\n\r\n                    let a_progress = !isInArray(id, this._collection_loaded);\r\n\r\n                    if (a_progress) {\r\n\r\n                        this._collection_loaded.push(id);\r\n                        this._busy = false;\r\n\r\n                        this._loaded++;\r\n                        this.percentage = this._loaded / this._collection.length * 100;\r\n                        this.percentage = parseFloat(this.percentage.toFixed(4));\r\n\r\n                        let this_resource = { resource: resource, status: status, element: element }; // TODO: cleanup/refactory\r\n                        this._resources_loaded.push(this_resource);\r\n\r\n                        this._progress.call(this, this_resource);\r\n                        this[status !== 'error' ? '_success' : '_error'].call(this, this_resource);\r\n\r\n                        // TODO: dispatch event on element maybe?\r\n                        // element.dispatchEvent(new CustomEvent(pluginPrefix + capitalize(status) + '.' + pluginPrefix));\r\n\r\n                    }\r\n\r\n                    if (this._loaded === this._collection.length) {\r\n\r\n                        this._done.call(this, this._resources_loaded);\r\n\r\n                        this._complete = true;\r\n\r\n                    } else if (a_progress && sequential_mode) {\r\n\r\n                        if (this._collection_pending.length) {\r\n\r\n                            this._collection_pending = this._collection_pending.filter(x => x.id !== id);\r\n                            this._collection_pending = this._collection_pending.filter(x => x.id !== id);\r\n\r\n                            if (this._collection_pending.length) {\r\n                                this._busy = this._collection_pending[0].instance.process();\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                if (!sequential_mode || (sequential_mode && !this._busy)) {\r\n                    this._busy = this_load_instance.process();\r\n                }\r\n\r\n                else if (sequential_mode && this._busy) {\r\n\r\n                    if (!this._settings.visible || (this._settings.visible && isVisible(this_load_instance._element))) {\r\n                        this._collection_pending.push({ id: this_load_id, instance: this_load_instance });\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n        done(callback) {// TODO: refactory\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            const _func = function (resources) {\r\n                callback.call(this, resources);\r\n            };\r\n\r\n            if (this._collection.length) {\r\n\r\n                this._done = _func;\r\n\r\n                this._loop();\r\n\r\n            } else {\r\n                _func();\r\n            }\r\n\r\n        };\r\n\r\n        progress(callback) {// TODO: refactory\r\n\r\n            if (typeof callback !== 'function')\r\n                return;\r\n\r\n            const _func = function (resource) {\r\n                callback.call(this, resource);\r\n            };\r\n\r\n            if (this._collection.length) {\r\n\r\n                this._progress = _func;\r\n\r\n                this._loop();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        success(callback) {// TODO: refactory\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            const _func = function (resource) {\r\n                callback.call(this, resource);\r\n            };\r\n\r\n            if (this._collection.length) {\r\n\r\n                this._success = _func;\r\n\r\n                this._loop();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        error(callback) {// TODO: refactory\r\n\r\n            if (typeof callback !== 'function') {\r\n                return;\r\n            }\r\n\r\n            const _func = function (resource) {\r\n                callback.call(this, resource);\r\n            };\r\n\r\n            if (this._collection.length) {\r\n\r\n                this._error = _func;\r\n\r\n                this._loop();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        abort() {\r\n\r\n            for (const key in this._collection_instances) {\r\n                this._collection_instances[key].instance.abort();\r\n            }\r\n\r\n            if (this._collection.length) {\r\n                this._abort = true;\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    // vanilla public interface\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    // requirejs syntax\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(capitalize(pluginMethod), ResourceLoader);\r\n    // nodejs syntax\r\n    } else if ('object' === typeof exports) {\r\n        module.exports[capitalize(pluginMethod)] = ResourceLoader;\r\n    // standard \"global variable\" syntax\r\n    } else {\r\n        window[capitalize(pluginMethod)] = ResourceLoader;\r\n    }\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n\r\n    // from here jQuery is needed\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n    if (!$) {\r\n        return undefined;\r\n    }\r\n    // - - - - - - - - - - - - - - - - - - - -\r\n\r\n    $[pluginMethod] = ResourcesLoader;\r\n\r\n    // TODO: this class is only called once:\r\n    // POSSIBLE SOLUTIONS:\r\n    // 1. convert to vanillajs and expose it as a public interface\r\n    // 2. convert to singleton when used\r\n    class CollectionPopulator {\r\n\r\n        constructor($element, options) {\r\n\r\n            this._$element = $element;\r\n            this._element = $element[0];\r\n\r\n            this._settings = {\r\n                ...{\r\n                    srcAttr: 'data-src',\r\n                    srcsetAttr: 'data-srcset',\r\n                    backgrounds: false,\r\n                    attributes: []\r\n                }, ...options\r\n            };\r\n\r\n        }\r\n\r\n        collect(output) {\r\n\r\n            let collection = [];\r\n\r\n            const\r\n                is_plain_data_collection = output === 'plain',\r\n\r\n                src = this._settings.srcAttr,\r\n                srcset = this._settings.srcsetAttr,\r\n\r\n                targets = 'img, video, audio',\r\n                targets_extended = targets + ', picture, source';\r\n\r\n            let $targets = this._$element.find(targets);\r\n            if (this._$element.is(targets)) {\r\n                $targets = $targets.add(this._$element);\r\n            }\r\n            $targets = $targets.filter(function () {\r\n                let $t = $(this),\r\n                    filter = '[' + src + '], [' + srcset + ']';\r\n                return $t.is(filter) || $t.children(targets_extended).filter(filter).length;\r\n            });\r\n            $targets.each(function () {\r\n\r\n                let collection_item = {\r\n                    element: this,\r\n                    resource: $(this).attr(src) || $(this).attr(srcset)\r\n                };\r\n\r\n                if (is_plain_data_collection) {\r\n                    collection_item = collection_item.element;\r\n                }\r\n\r\n                collection.push(collection_item);\r\n\r\n            });\r\n\r\n            if (true === this._settings.backgrounds)\r\n                this._$element.find('*').addBack().not(targets_extended).filter(function () {\r\n                    return $(this).css('background-image') !== 'none';\r\n                }).each(function () {\r\n\r\n                    const url = $(this).css('background-image').match(/\\((.*?)\\)/);\r\n\r\n                    if (null === url || url.length < 2) {\r\n                        return true;\r\n                    }\r\n\r\n                    let collection_item = {\r\n                        element: this,\r\n                        resource: url[1].replace(/('|\")/g, '')\r\n                    };\r\n\r\n                    if (is_plain_data_collection) {\r\n                        collection_item = collection_item.resource;\r\n                    }\r\n\r\n                    collection.push(collection_item);\r\n\r\n                });\r\n\r\n            if (this._settings.attributes.length)\r\n                for (const attr in this._settings.attributes) {\r\n                    if (this._settings.attributes.hasOwnProperty(attr)) {\r\n\r\n                        this._$element.find('[' + attr + ']:not(' + targets_extended + ')').each(function () {\r\n\r\n                            let collection_item = {\r\n                                element: this,\r\n                                resource: $(this).attr(attr)\r\n                            };\r\n\r\n                            if (is_plain_data_collection) {\r\n                                collection_item = collection_item.resource;\r\n                            }\r\n\r\n                            collection.push(collection_item);\r\n\r\n                        });\r\n\r\n                        if (this._$element.is('[' + attr + ']') && !this._$element.is(targets_extended)) {\r\n\r\n                            let collection_item = {\r\n                                element: this._element,\r\n                                resource: this._$element.attr(attr)\r\n                            };\r\n\r\n                            if (is_plain_data_collection) {\r\n                                collection_item = collection_item.resource;\r\n                            }\r\n\r\n                            collection.push(collection_item);\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n            return collection;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const\r\n        $document = $(document),\r\n        $window = $(window),\r\n        // thanks https://gist.github.com/beaucharman/e46b8e4d03ef30480d7f4db5a78498ca\r\n        throttle = (callback, wait, context = this) => {\r\n            let timeout = null,\r\n                callbackArgs = null\r\n            const later = () => {\r\n                callback.apply(context, callbackArgs)\r\n                timeout = null\r\n            }\r\n            return function () {\r\n                if (!timeout) {\r\n                    callbackArgs = arguments\r\n                    timeout = setTimeout(later, wait)\r\n                }\r\n            }\r\n        };\r\n\r\n    let method_collection = [];\r\n\r\n    $.fn[pluginMethod] = function (options) {\r\n\r\n        let original_user_options = options;\r\n\r\n        if (typeof options !== 'object') {\r\n            options = {};\r\n        }\r\n\r\n        let settings = {\r\n            ...{\r\n\r\n                srcAttr: 'data-src',\r\n                srcsetAttr: 'data-srcset',\r\n\r\n                visible: false,\r\n\r\n                sequential: false,\r\n\r\n                backgrounds: false,\r\n                extraAttrs: [],\r\n\r\n                playthrough: false,\r\n\r\n                early: false,\r\n                earlyTimeout: 0,\r\n\r\n                onProgress: () => { },\r\n                onLoad: () => { },\r\n                onError: () => { },\r\n\r\n                onComplete: () => { },\r\n\r\n            }, ...options\r\n        };\r\n\r\n        let callback = settings.onComplete;\r\n        if ($.isFunction(original_user_options)) {\r\n            callback = original_user_options;\r\n        }\r\n\r\n        if (!$.isArray(settings.attributes)) {\r\n            settings.attributes = [];\r\n        }\r\n        if (typeof settings.attributes === 'string') {\r\n            settings.attributes = settings.attributes.split(' ');\r\n        }\r\n\r\n        return this.each(function (i) {\r\n\r\n            const\r\n                element = this,\r\n                $element = $(element),\r\n                collection = new CollectionPopulator($element, settings).collect('plain'),\r\n                unique_method_pluginName = generateInstanceID() + i,\r\n\r\n                this_load_instance = new ResourcesLoader(collection, settings);\r\n\r\n            method_collection.push({\r\n                id: unique_method_pluginName,\r\n                instance: this_load_instance,\r\n                element: element,\r\n                timeout: null\r\n            });\r\n\r\n            this_load_instance.progress((resource) => {\r\n\r\n                $(resource.element).trigger(pluginPrefix + capitalize(resource.status) + '.' + pluginPrefix, [resource.element, resource.resource]);\r\n                $element.trigger(pluginPrefix + 'Progress.' + pluginPrefix, [element, resource]);\r\n\r\n                const this_arguments = [this_load_instance, resource];\r\n\r\n                if (typeof settings.onProgress === 'function') {\r\n                    settings.onProgress.apply(element, this_arguments);\r\n                }\r\n\r\n                let event_name = capitalize(resource.status);\r\n                if (typeof settings['on' + event_name] === 'function') {\r\n                    settings['on' + event_name].apply(element, this_arguments);\r\n                }\r\n\r\n            });\r\n\r\n            this_load_instance.done((resources) => {\r\n\r\n                $element.trigger(pluginPrefix + 'Complete.' + pluginPrefix, [element, resources]);\r\n                callback.apply(element, [this_load_instance, resources]);\r\n\r\n                if (settings.visible) {\r\n                    $window.off('scroll.' + unique_method_pluginName);\r\n                }\r\n\r\n                // refresh other method calls for same el (omitting this one)\r\n                method_collection = method_collection.filter(x => x.id !== unique_method_pluginName);\r\n                method_collection.forEach((this_method_collection) => {\r\n                    if ($element.is(this_method_collection.element)) {\r\n                        this_method_collection.instance.loop();\r\n                    }\r\n                });\r\n\r\n            });\r\n\r\n            if (settings.visible) {\r\n                $window.on('scroll.' + unique_method_pluginName, throttle(() => this_load_instance.loop(), 250));\r\n            }\r\n\r\n            if (true === settings.early) for (let key in method_collection) {\r\n\r\n                let this_method_collection = method_collection[key];\r\n\r\n                if (method_collection[key].id === unique_method_pluginName) {\r\n\r\n                    clearTimeout(this_method_collection.timeout);\r\n\r\n                    let timeout = parseInt(settings.earlyTimeout);\r\n\r\n                    this_method_collection.timeout = setTimeout(function () {\r\n\r\n                       // TODO: appropriate method for setting settings?\r\n                        this_method_collection.instance._settings.visible = false;\r\n                        this_method_collection.instance._settings.sequential = true;\r\n\r\n                        this_method_collection.instance.loop();\r\n\r\n                    }, !isNaN(timeout) && isFinite(timeout) ? timeout : 0);\r\n\r\n                    break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n    };\r\n\r\n})(window, document, jQuery);"],"file":"nite.loader.js"}