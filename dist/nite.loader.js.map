{"version":3,"names":[],"mappings":"","sources":["nite.loader.js"],"sourcesContent":["/*! Nite Loader | Daniele Fioroni | dfioroni91@gmail.com */\n(function (window, document, $, undefined) {\n    'use strict';\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n    (function () {\n        if (typeof window.CustomEvent === \"function\") {\n            return false;\n        }\n        function CustomEvent(event, params) {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            const evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        }\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n    })();\n\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex#Polyfill\n    if (!Array.prototype.findIndex) {\n        Object.defineProperty(Array.prototype, 'findIndex', {\n            value: function (predicate) {\n                if (this == null) {\n                    throw new TypeError('\"this\" is null or not defined');\n                }\n                let\n                    o = Object(this),\n                    len = o.length >>> 0;\n                if (typeof predicate !== 'function') {\n                    throw new TypeError('predicate must be a function');\n                }\n                let\n                    thisArg = arguments[1],\n                    k = 0;\n                while (k < len) {\n                    let kValue = o[k];\n                    if (predicate.call(thisArg, kValue, k, o)) {\n                        return k;\n                    }\n                    k++;\n                }\n                return -1;\n            },\n            configurable: true,\n            writable: true\n        });\n    }\n\n    // https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray#Polyfill\n    Array.isArray = Array.isArray || function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\n    Array.prototype.filter = Array.prototype.filter || function (func, thisArg) {\n        'use strict';\n        if (!((typeof func === 'Function' || typeof func === 'function') && this)) {\n            throw new TypeError();\n        }\n        let\n            len = this.length >>> 0,\n            res = new Array(len),\n            t = this, c = 0, i = -1;\n        if (thisArg === undefined) {\n            while (++i !== len) {\n                if (i in this) {\n                    if (func(t[i], i, t)) {\n                        res[c++] = t[i];\n                    } else {\n                        while (++i !== len) {\n                            if (i in this) {\n                                if (func.call(thisArg, t[i], i, t)) {\n                                    res[c++] = t[i];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        res.length = c;\n        return res;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill\n    String.prototype.startsWith = String.prototype.startsWith || function (search, pos) {\n        return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n    };\n\n    // https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\n    String.prototype.includes = String.prototype.includes || function (search, start) {\n        'use strict';\n        if (typeof start !== 'number') {\n            start = 0;\n        }\n        if (start + search.length > this.length) {\n            return false;\n        } else {\n            return this.indexOf(search, start) !== -1;\n        }\n    };\n\n    const\n        generateInstanceID = function () {\n            return Math.floor(Math.random() * (9999 - 1000)) + 1000;\n        },\n        pluginPrefix = 'nite',\n        pluginMethod = pluginPrefix + 'Load',\n        pluginName = pluginMethod + 'er',\n        pluginInstance = generateInstanceID(),\n        eventNamespaceParserSeparator = '__namespace__',\n        detachEventListener = (element, events) => {\n\n            if (!element || typeof events !== 'string') {\n                return;\n            }\n\n            if (events.startsWith('.')) {\n                Object.keys(privateEventsStorage).forEach(key => {\n                    if (key.replace(eventNamespaceParserSeparator, '.').includes(events) && privateEventsStorage[key].element === element) {\n                        detachEventListener(element, key.replace(eventNamespaceParserSeparator, '.'));\n                    }\n                });\n            } else {\n\n                events = events.split('.');\n\n                const\n                    type = events[0],\n                    namespace = events[1];\n\n                if (namespace) {\n                    events = events.join(eventNamespaceParserSeparator);\n                }\n\n                if (events in privateEventsStorage) {\n                    element.removeEventListener(type, privateEventsStorage[events].handler);\n                    delete privateEventsStorage[events];\n                }\n\n            }\n\n        },\n        attachEventListener = (element, events, handler, once) => {\n\n            if (!element || typeof events !== 'string' || typeof handler !== 'function') {\n                return;\n            }\n\n            events = events.split('.');\n\n            const\n                type = events[0],\n                namespace = events[1];\n\n            if (namespace) {\n                events = events.join(eventNamespaceParserSeparator);\n            }\n\n            privateEventsStorage[events] = {\n                element: element,\n                count: 0,\n                once: false\n            };\n\n            if (true === once) {\n                let _handler = handler;\n                handler = function (event) {\n                    if (events in privateEventsStorage) {\n                        privateEventsStorage[events].count++;\n                        if (privateEventsStorage[events].once && privateEventsStorage[events].count > 1) {\n                            return;\n                        }\n                        _handler.call(this, event);\n                    }\n                    detachEventListener(element, events);\n                }\n            } else {\n                once = false;\n            }\n\n            privateEventsStorage[events] = {\n                ...privateEventsStorage[events], ...{\n                    handler: handler,\n                    once: once\n                }\n            };\n\n            element.addEventListener(type, privateEventsStorage[events].handler, { once: once });\n\n        },\n        hyphensToCamelCase = string => {\n            return string.replace(/-([a-z])/g, g => g[1].toUpperCase());\n        },\n        capitalize = string => {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        },\n        nodelistToArray = nodelist => {\n            return [...nodelist];\n        },\n        isInArray = (needle, stack) => {\n            return stack.indexOf(needle) > -1;\n        },\n        // TODO: intersection observer\n        isVisible = element => {\n\n            if (window.getComputedStyle(element, 'display') === 'none') {\n                return false;\n            }\n\n            const\n                bodyEl = document.getElementsByTagName('body')[0],\n                winWidth = window.innerWidth || documnt.documentElement.clientWidth || bodyEl.clientWidth,\n                winHeight = window.innerHeight || documnt.documentElement.clientHeight || bodyEl.clientHeight,\n                rect = element.getBoundingClientRect();\n\n            return !(rect.right < 0 || rect.bottom < 0 || rect.left > winWidth || rect.top > winHeight);\n\n        },\n        isHTMLObject = object => {\n            if (typeof object !== 'object') {\n                return false;\n            }\n            try {\n                return object instanceof HTMLElement;\n            } catch (e) {\n                return object.nodeType === 1 && typeof object.style === 'object' && typeof object.ownerDocument === 'object';\n            }\n        },\n        isLoaded = source => {\n            return (\n                (\n                    typeof source === 'string'\n                    &&\n                    isInArray(source, privateCache)\n                )\n                ||\n                (\n                    isHTMLObject(source)\n                    &&\n                    ('currentSrc' in source && source.currentSrc.length)\n                    &&\n                    (('complete' in source && source.complete) || ('readyState' in source && source.readyState >= 2))\n                )\n            );\n        },\n        isBroken = source => {\n            return (\n                isLoaded(source)\n                &&\n                (\n                    (\n                        typeof source === 'object'\n                        &&\n                        (\n                            ('naturalWidth' in source && Math.floor(source.naturalWidth) === 0)\n                            ||\n                            ('videoWidth' in source && source.videoWidth === 0)\n                        )\n                    )\n                    ||\n                    typeof source === 'string'\n                )\n            );\n        },\n        decodeResource = (item, expectedFormat) => {\n\n            const\n                formatExtensions = {\n                    image: 'jp[e]?g||jpe|jif|jfif|jfi|gif|png|tif[f]?|bmp|dib|webp|ico|cur|svg',\n                    audio: 'mp3|ogg|oga|spx|ogg|wav',\n                    video: 'mp4|ogv|webm'\n                },\n                formatNames = Object.keys(formatExtensions),\n                base64Heading = '\\;base64\\,';\n\n            let output = { format: null, extension: null };\n\n            if (typeof item === 'string') {\n\n                item = item.split('?')[0];\n                item = item.split('#')[0];\n\n                if (item === '') {\n                    return false;\n                }\n\n                let formatQueue = undefined !== expectedFormat ? [expectedFormat] : formatNames;\n\n                for (const x in formatQueue) {\n\n                    if (formatQueue.hasOwnProperty(x)) {\n\n                        if (new RegExp('(\\.(' + formatExtensions[formatQueue[x]] + ')$)|' + base64Heading, 'g').test(item)) {\n\n                            if (new RegExp(base64Heading, 'g').test(item)) {\n\n                                let matches64 = item.match(new RegExp('^data:' + formatQueue[x] + '\\/(' + formatExtensions[formatQueue[x]] + ')', 'g'));\n\n                                if (!matches64 || null === matches64) {\n                                    continue;\n                                }\n\n                                matches64 = matches64[0];\n\n                                output.format = formatQueue[x];\n                                output.extension = matches64.replace('data:' + formatQueue[x] + '/', '');\n\n                                break;\n\n                            } else {\n\n                                let matches = item.match(new RegExp(formatExtensions[formatQueue[x]], 'g'));\n\n                                if (matches) {\n\n                                    output.format = formatQueue[x];\n                                    output.extension = matches[0];\n\n                                    break;\n\n                                }\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n            if (isHTMLObject(item)) {\n\n                let tagName = item.tagName.toLowerCase();\n\n                if (isInArray(tagName, formatNames)) {\n                    output.format = item.tagName.toLowerCase();\n                }\n\n                if (tagName === 'img') {\n                    output.format = 'image';\n                }\n\n            }\n\n            return output;\n\n        };\n\n    let privateEventsStorage = {},\n        privateCache = [];\n\n    // TODO: Promise support maybe\n    // TODO: think about useful vars in callback args (this class is not public but its vars are returned in .progress() callback)\n    class SingleLoader {\n\n        constructor(options) {\n\n            this._settings = {\n                ...{\n                    srcAttr: 'data-src',\n                    srcsetAttr: 'data-srcset',\n                    playthrough: false,\n                    visible: false,\n                }, ...options\n            };\n\n            this.srcAttr = '';\n            this.srcsetAttr = '';\n\n            if (!this._settings.srcAttr.startsWith('data-')) {\n                this.srcAttr = this._settings.srcAttr;\n                this._settings.srcAttr = 'data-' + this._settings.srcAttr;\n            } else {\n                this.srcAttr = this._settings.srcAttr.replace('data-', '');\n            }\n\n            if (!this._settings.srcsetAttr.startsWith('data-')) {\n                this.srcsetAttr = this._settings.srcsetAttr;\n                this._settings.srcsetAttr = 'data-' + this._settings.srcsetAttr;\n            } else {\n                this.srcsetAttr = this._settings.srcsetAttr.replace('data-', '');\n            }\n\n            this.srcAttr = hyphensToCamelCase(this.srcAttr);\n            this.srcsetAttr = hyphensToCamelCase(this.srcsetAttr);\n\n            this._id = null;\n            this._idEvent = null;\n            this._busy = false;\n\n            this._element = null;\n            this._resource = null;\n            this._format = null;\n\n            this._done = () => { };\n            this._success = () => { };\n            this._error = () => { };\n\n            this._callback = (e) => {\n\n                this._busy = false;\n\n                const src = this._element.currentSrc || this._element.src;\n\n                if (!isInArray(src, privateCache)) {\n                    privateCache.push(src);\n                }\n\n                let thisArguments = [this._element, e.type, src, this._id];\n\n                this[e.type !== 'error' ? '_success' : '_error'].apply(this, thisArguments);\n                this._done.apply(this, thisArguments);\n\n            };\n\n        }\n\n        set resource(data) {\n\n            /* TODO:\n            if( typeof data === 'object' && 'id' in data && 'element' in data && 'resource' in data ){\n\n                this._id = data.id;\n                this._element = data.element;\n                this._resource = data.resource;\n\n                this._format = decodeResource(this._resource).format;\n                this._exists = isHTMLObject(this._element);\n\n                if (!this._exists) {\n\n                    let isImg = this._format === 'image';\n\n                    this._element = document.createElement(isImg ? 'img' : this._format);\n\n                    this._element.dataset[this.srcAttr] = this._resource;\n                    this._element.dataset[this.srcsetAttr] = this._resource;\n\n                }\n\n                this._idEvent = this._element[pluginInstance + '_IDEvent'];\n                this._busy = this._idEvent !== undefined;\n                this._idEvent = this._busy ? this._idEvent : pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\n            \n            }*/\n\n            const\n                elementResource = isHTMLObject(data.resource),\n                stringResource = typeof data.resource === 'string';\n\n            if (!elementResource && !stringResource) {\n                return;\n            }\n\n            this._id = data.id;\n            this._format = decodeResource(data.resource).format;\n\n            this._exists = elementResource;\n\n            if (stringResource) {\n                this._element = document.createElement(this._format === 'image' ? 'img' : this._format);\n                this._resource = data.resource;\n            }\n\n            if (elementResource) {\n                this._element = data.resource;\n            }\n\n            if (stringResource) {\n                this._element.dataset[this.srcAttr] = this._resource;\n                this._element.dataset[this.srcsetAttr] = this._resource;\n            }\n\n            this._idEvent = this._element[pluginInstance + '_IDEvent'];\n            this._busy = this._idEvent !== undefined;\n            this._idEvent = this._busy ? this._idEvent : pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\n\n        }\n\n        get resource() {\n            return this._resource;\n        }\n\n        /**\n         *\n         * @returns {boolean} se ha preso in carico il caricamento oppure no per vari motivi (è già caricato, non è nella viewport etc)\n         */\n        load() {\n\n            if (isLoaded(this._exists ? this._element : this._resource)) {\n\n                if (!this._busy) {\n                    // TODO: mayabe this should be called in this._callback\n                    detachEventListener(this._element, '.' + this._idEvent);\n                }\n\n                this._callback(new CustomEvent(!isBroken(this._exists ? this._element : this._resource) ? 'load' : 'error'));\n\n                return false;\n\n            } else if (this._exists && this._settings.visible && !isVisible(this._element)) {\n\n                return false;\n\n            } else {\n\n                if (this._format === 'image') {\n\n                    attachEventListener(this._element, 'load.' + this._idEvent, this._callback, !this._busy);\n                    attachEventListener(this._element, 'error.' + this._idEvent, this._callback, !this._busy);\n\n                    const picture = this._element.closest('picture');\n\n                    if (picture && 'HTMLPictureElement' in window) {\n\n                        delete this._element.dataset[this.srcsetAttr];\n                        delete this._element.dataset[this.srcAttr];\n\n                        picture.querySelectorAll('source[' + this._settings.srcsetAttr + ']').forEach((el) => {\n                            el.setAttribute('srcset', el.dataset[this.srcAttr]);\n                            delete el.dataset[this.srcAttr];\n                        });\n\n                    } else {\n\n                        if (this._element.matches('[' + this._settings.srcsetAttr + ']')) {\n                            this._element.setAttribute('srcset', this._element.dataset[this.srcsetAttr]);\n                            delete this._element.dataset[this.srcsetAttr];\n                        }\n\n                        if (this._element.matches('[' + this._settings.srcAttr + ']')) {\n                            this._element.setAttribute('src', this._element.dataset[this.srcAttr]);\n                            delete this._element.dataset[this.srcAttr];\n                        }\n\n                    }\n\n                } else if (this._format === 'video' || this._format === 'audio') {\n\n                    const\n\n                        isPlaythroughModeNormal = true === this._settings.playthrough,\n                        isPlaythroughModeFull = 'full' === this._settings.playthrough,\n\n                        sources = this._element.querySelectorAll('source'),\n                        isFullyBuffered = function (media) {\n\n                            return media.buffered.length && Math.round(media.buffered.end(0)) / Math.round(media.seekable.end(0)) === 1;\n\n                        };\n\n                    let callMediaLoad = false;\n\n                    if (sources) {\n\n                        sources.forEach((source) => {\n\n                            if (source.matches('[' + this._settings.srcAttr + ']')) {\n\n                                source.setAttribute('src', source.dataset[this.srcAttr]);\n                                delete source.dataset[this.srcsetAttr];\n\n                                callMediaLoad = true;\n\n                            }\n\n                            attachEventListener(source, 'error.' + this._idEvent, (e) => {\n\n                                const sourcesErrorId = pluginName + '_error';\n\n                                source[pluginInstance + '_' + sourcesErrorId] = true;\n\n                                if (sources.length === nodelistToArray(sources).filter(thisSource => true === thisSource[pluginInstance + '_' + sourcesErrorId]).length) {\n                                    this._callback(e);\n                                }\n\n                            }, !this._busy);\n\n                        });\n\n                    } else {\n\n                        if (this._element.matches('[' + src + ']')) {\n\n                            this._element.setAttribute('src', this._element.dataset[this.srcAttr]);\n                            delete this._element.dataset[this.srcAttr];\n\n                            attachEventListener(this._element, 'error.' + this._idEvent, this._callback, !this._busy);\n\n                            callMediaLoad = true;\n\n                        }\n\n                    }\n\n                    if (callMediaLoad) {\n                        this._element.load();\n                    }\n\n\n                    attachEventListener(this._element, 'loadedmetadata.' + this._idEvent, () => {\n\n                        if (!isPlaythroughModeNormal && !isPlaythroughModeFull) {\n                            this._callback(new CustomEvent('load'));\n                        }\n\n                        if (isPlaythroughModeFull) {\n\n                            let onProgressReplacementInterval = setInterval(() => {\n\n                                let isError = this._element.readyState > 0 && !this._element.duration;\n\n                                if (isError || isFullyBuffered(this._element)) {\n\n                                    this._element.currentTime = 0;\n\n                                    if (!isError && !this._busy && this._element.paused && this._element.matches('[autoplay]')) {\n                                        this._element.play();\n                                    }\n\n                                    clearInterval(onProgressReplacementInterval);\n\n                                    this._callback(new CustomEvent(!isError ? 'load' : 'error'));\n\n                                } else {\n\n                                    if (!this._element.paused) {\n                                        this._element.pause();\n                                    }\n\n                                    if (!this._busy) {\n                                        this._element.currentTime += 2;\n                                    }\n\n                                }\n\n                            }, 500);\n\n                            this._element[pluginName + '_' + this._idEvent] = onProgressReplacementInterval;\n\n                        }\n\n                    }, !this._busy);\n\n                    attachEventListener(this._element, 'canplay.' + this._idEvent, () => {\n                        if (isPlaythroughModeFull && this._element.currentTime === 0 && !isFullyBuffered(this._element)) {\n                            this._element.currentTime++;\n                        }\n                    }, !this._busy);\n\n                    attachEventListener(this._element, 'canplaythrough.' + this._idEvent, () => {\n                        if (isPlaythroughModeNormal) {\n                            this._callback(new CustomEvent('load'));\n                        }\n                    }, !this._busy);\n\n                } else {\n\n                    return false;\n\n                }\n\n                if (!this._busy) {\n                    this._element[pluginInstance + '_IDEvent'] = this._idEvent;\n                }\n\n            }\n\n            this._resource = this._element.currentSrc || this._element.src;\n\n            return !this._busy;\n\n        }\n\n        done(callback) {\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            this._done = function (element, status, resource, id) {\n                callback.apply(this, [element, status, resource, id]);\n            };\n\n        };\n\n        abort() {\n\n            detachEventListener(this._element, '.' + this._idEvent);\n\n            if (isLoaded(this._exists ? this._element : this._resource)) {\n                return;\n            }\n\n            const\n                src = this._element.getAttribute('srcset'),\n                srcset = this._element.getAttribute('src');\n\n            if (undefined !== src) {\n                this._element.dataset[this.srcAttr] = src;\n                this._element.setAttribute(this._settings.srcAttr, src);\n                this._element.removeAttribute('src');\n                this._element.removeAttribute('srcset');\n            }\n\n            if (undefined !== srcset) {\n                this._element.dataset[this.srcsetAttr] = srcset;\n                this._element.setAttribute(this._settings.srcsetAttr, srcset);\n                this._element.removeAttribute('src');\n                this._element.removeAttribute('srcset');\n            }\n\n        }\n\n    }\n\n    // TODO: Promise support\n    // TODO: private vars\n    // TODO: refactory succes/done/progress code...\n    class Loader {\n\n        constructor(options) {\n\n            this._collection = [];\n            this._collectionLoaded = [];\n            this._collectionInstances = [];\n            this._collectionPending = [];\n            this._resourcesLoaded = [];\n\n            this._settings = {\n                ...{\n                    srcAttr: 'data-src',\n                    srcsetAttr: 'data-srcset',\n                    playthrough: false,\n                    visible: false,\n                    backgrounds: false,\n                    attributes: []\n                }, ...options\n            };\n\n            this.srcAttr = '';\n            this.srcsetAttr = '';\n            if (!this._settings.srcAttr.startsWith('data-')) {\n                this.srcAttr = this._settings.srcAttr;\n                this._settings.srcAttr = 'data-' + this._settings.srcAttr;\n            } else {\n                this.srcAttr = this._settings.srcAttr.replace('data-', '');\n            }\n            if (!this._settings.srcsetAttr.startsWith('data-')) {\n                this.srcsetAttr = this._settings.srcsetAttr;\n                this._settings.srcsetAttr = 'data-' + this._settings.srcsetAttr;\n            } else {\n                this.srcsetAttr = this._settings.srcsetAttr.replace('data-', '');\n            }\n\n            if (typeof this._settings.attributes === 'string') {\n                this._settings.attributes = this._settings.attributes.split(this._settings.attributes.contains(',') ? ',' : ' ');\n            }\n            if (!Array.isArray(this._settings.attributes)) {\n                this._settings.attributes = [];\n            }\n\n            this.srcAttr = hyphensToCamelCase(this.srcAttr);\n            this.srcsetAttr = hyphensToCamelCase(this.srcsetAttr);\n\n            this.percentage = 0;\n\n            this._done = () => { };\n            this._progress = () => { };\n            this._success = () => { };\n            this._error = () => { };\n            this._loop = this.load;\n\n            this._abort = false;\n            this._loaded = 0;\n            this._complete = false;\n            this._busy = false;\n\n        }\n\n        set collection(collection) {\n\n            //TODO:\n            /*\n            if (!Array.isArray(collection)){\n                collection = [];\n            }\n\n            collection.forEach(item => {\n\n                let element = {\n                    resource: '',\n                    element: null,\n                    id: generateInstanceID()\n                };\n\n                if (typeof item === 'string') {\n                    element.resource = item;\n                } else if (typeof item === 'object' && 'resource' in item) {\n                    element = { ...element, ...item };\n                } else {\n                    return;\n                }\n\n                this._collection.push(element);\n\n            });*/\n\n            if (Array.isArray(collection) && (typeof collection[0] === 'string' || isHTMLObject(collection[0]))) {\n                for (const resource in collection) {\n                    if (collection.hasOwnProperty(resource)) {\n                        this._collection.push({ id: generateInstanceID(), resource: collection[resource] });\n                    }\n                }\n            }\n\n            if (typeof collection === 'string' || isHTMLObject(collection)) {\n                this._collection.push({ id: generateInstanceID(), resource: collection });\n            }\n\n        }\n\n        get collection() {\n\n            return this._collection;\n\n        }\n\n        collect(element) {\n\n            const\n                targets = 'img, video, audio',\n                targetsExtended = targets + ', picture, source';\n\n            let\n                collection = [],\n                targetsTags = nodelistToArray(element.querySelectorAll(targets));\n\n            if (element.matches(targets)) {\n                targetsTags.push(element);\n            }\n\n            targetsTags = targetsTags.filter((target) => {\n                let filter = '[' + this._settings.srcAttr + '], [' + this._settings.srcsetAttr + ']',\n                    children = nodelistToArray(target.children);\n                children = children.filter(x => x.matches(targetsExtended));\n                children = children.filter(x => x.matches(filter));\n                return target.matches(filter) || children.length;\n            });\n\n            targetsTags.forEach((target) => {\n\n                let collectionItem = {\n                    element: target,\n                    resource: target.getAttribute(this._settings.srcAttr) || target.getAttribute(this._settings.srcsetAttr)\n                };\n\n                collectionItem = collectionItem.element;\n\n                collection.push(collectionItem);\n\n                /*TODO:\n                collection.push({\n                    element: target,\n                    resource: target.getAttribute(this._settings.srcAttr) || target.getAttribute(this._settings.srcsetAttr)\n                });*/\n\n            });\n\n            if (true === this._settings.backgrounds) {\n                let targetsBg = nodelistToArray(element.querySelectorAll('*'));\n                targetsBg.push(element);\n                targetsBg = targetsBg.filter(target => !target.matches(targetsExtended));\n                targetsBg = targetsBg.filter(target => getComputedStyle(target).backgroundImage !== 'none');\n                targetsBg.forEach((target) => {\n\n                    const url = getComputedStyle(target).backgroundImage.match(/\\((.*?)\\)/);\n\n                    if (null === url || url.length < 2) {\n                        return true;\n                    }\n\n                    let collectionItem = {\n                        element: target,\n                        resource: url[1].replace(/('|\")/g, '')\n                    };\n\n                    collectionItem = collectionItem.resource;\n\n                    collection.push(collectionItem);\n\n                    /* TODO:\n                    collection.push({\n                        element: target,\n                        resource: url[1].replace(/('|\")/g, '')\n                    });*/\n\n                });\n            }\n\n            if (this._settings.attributes.length) {\n                for (const attr in this._settings.attributes) {\n                    if (this._settings.attributes.hasOwnProperty(attr)) {\n\n                        nodelistToArray(element.querySelectorAll('[' + attr + ']:not(' + targetsExtended + ')')).forEach((target) => {\n\n                            let collectionItem = {\n                                element: target,\n                                resource: target.getAttribute(attr)\n                            };\n\n                            collectionItem = collectionItem.resource;\n\n                            collection.push(collectionItem);\n\n                            /*TODO:\n                            collection.push({\n                                element: target,\n                                resource: target.getAttribute(attr)\n                            });*/\n\n                        });\n\n                        if (element.matches('[' + attr + ']') && !element.matches(targetsExtended)) {\n\n                            let collectionItem = {\n                                element: element,\n                                resource: element.getAttribute(attr)\n                            };\n\n                            collectionItem = collectionItem.resource;\n\n                            collection.push(collectionItem);\n\n                            /* TODO:\n                            collection.push({\n                                element: element,\n                                resource: element.getAttribute(attr)\n                            });*/\n\n                        }\n\n                    }\n                }\n            }\n\n            this.collection = collection;\n\n        }\n\n        load() {\n\n            // resets pending elements (sequential opt helper array) every time we loop\n            this._collectionPending = [];\n\n            const sequentialMode = true === this._settings.sequential;\n\n            for (let i = 0; i < this._collection.length; i++) {\n\n                if (this._abort) {\n                    break;\n                }\n\n                let thisLoadId = this._collection[i].id,\n                    thisLoadIndex = this._collectionInstances.findIndex(x => x.id === thisLoadId),\n                    thisLoadInstance = new SingleLoader(this._settings);\n\n                if (thisLoadIndex === -1) {\n                    this._collectionInstances.push({ id: thisLoadId, instance: thisLoadInstance });\n                    thisLoadIndex = this._collectionInstances.findIndex(x => x.id === thisLoadId);\n                } else {\n                    this._collectionInstances[thisLoadIndex].instance = thisLoadInstance;\n                }\n\n                thisLoadInstance.resource = this._collection[i];\n\n                thisLoadInstance.done((element, status, resource, id) => {\n\n                    if (this._complete || this._abort) {\n                        return;\n                    }\n\n                    const aProgress = !isInArray(id, this._collectionLoaded);\n\n                    if (aProgress) {\n\n                        this._collectionLoaded.push(id);\n                        this._busy = false;\n\n                        this._loaded++;\n                        this.percentage = this._loaded / this._collection.length * 100;\n                        this.percentage = parseFloat(this.percentage.toFixed(4));\n\n                        // TODO: cleanup/refactory\n                        const thisResource = { resource: resource, status: status, element: element };\n                        this._resourcesLoaded.push(thisResource);\n\n                        this._progress.call(this, thisResource);\n                        this[status !== 'error' ? '_success' : '_error'].call(this, thisResource);\n\n                        // TODO: dispatch event on element maybe?\n                        // element.dispatchEvent(new CustomEvent(pluginPrefix + capitalize(status) + '.' + pluginPrefix));\n\n                    }\n\n                    if (this._loaded === this._collection.length) {\n\n                        this._done.call(this, this._resourcesLoaded);\n\n                        this._complete = true;\n\n                    } else if (aProgress && sequentialMode && this._collectionPending.length) {\n\n                        this._collectionPending = this._collectionPending.filter(x => x.id !== id);\n\n                        if (this._collectionPending.length) {\n                            this._busy = this._collectionPending[0].instance.load();\n                        }\n\n                    }\n\n                });\n\n                if (!sequentialMode || (sequentialMode && !this._busy)) {\n                    this._busy = thisLoadInstance.load();\n\n                } else if (sequentialMode && this._busy && (!this._settings.visible || (this._settings.visible && isVisible(thisLoadInstance._element)))) {\n                    this._collectionPending.push({ id: thisLoadId, instance: thisLoadInstance });\n\n                }\n\n\n            }\n\n        }\n\n        done(callback) {\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            const _func = function (resources) {\n                callback.call(this, resources);\n            };\n\n            if (this._collection.length) {\n\n                this._done = _func;\n\n                //this._loop();\n\n            } else {\n                _func();\n            }\n\n        };\n\n        progress(callback) {\n\n            if (typeof callback !== 'function')\n                return;\n\n            const _func = function (resource) {\n                callback.call(this, resource);\n            };\n\n            if (this._collection.length) {\n\n                this._progress = _func;\n\n                //this._loop();\n\n            }\n\n        };\n\n        success(callback) {\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            const _func = function (resource) {\n                callback.call(this, resource);\n            };\n\n            if (this._collection.length) {\n\n                this._success = _func;\n\n                //this._loop();\n\n            }\n\n        };\n\n        error(callback) {\n\n            if (typeof callback !== 'function') {\n                return;\n            }\n\n            const _func = function (resource) {\n                callback.call(this, resource);\n            };\n\n            if (this._collection.length) {\n\n                this._error = _func;\n\n                //this._loop();\n\n            }\n\n        };\n\n        abort() {\n\n            for (const key in this._collectionInstances) {\n                this._collectionInstances[key].instance.abort();\n            }\n\n            if (this._collection.length) {\n                this._abort = true;\n            }\n\n        };\n\n    }\n\n    // public interface\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    // requirejs\n    if (typeof define === 'function' && define.amd) {\n        define(capitalize(pluginName), Loader);\n        // nodejs\n    } else if ('object' === typeof exports) {\n        module.exports[capitalize(pluginName)] = Loader;\n        // vanilla\n    } else {\n        window[capitalize(pluginName)] = Loader;\n    }\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    // jQuery interface\n    // - - - - - - - - - - - - - - - - - - - -\n    if (!$) {\n        return undefined;\n    }\n\n    $[capitalize(pluginName)] = Loader;\n\n    const\n        $document = $(document),\n        $window = $(window),\n        // thanks https://gist.github.com/beaucharman/e46b8e4d03ef30480d7f4db5a78498ca\n        throttle = (callback, wait, context = this) => {\n            let timeout = null,\n                callbackArgs = null\n            const later = () => {\n                callback.apply(context, callbackArgs)\n                timeout = null\n            }\n            return function () {\n                if (!timeout) {\n                    callbackArgs = arguments\n                    timeout = setTimeout(later, wait)\n                }\n            }\n        };\n\n    let methodCollection = [];\n\n    $.fn[pluginMethod] = function (options) {\n\n        let originalUserOptions = options;\n\n        if (typeof options !== 'object') {\n            options = {};\n        }\n\n        let settings = {\n            ...{\n\n                srcAttr: 'data-src',\n                srcsetAttr: 'data-srcset',\n\n                visible: false,\n\n                sequential: false,\n\n                backgrounds: false,\n                extraAttrs: [],\n\n                playthrough: false,\n\n                early: false,\n                earlyTimeout: 0,\n\n                onProgress: () => { },\n                onLoad: () => { },\n                onError: () => { },\n\n                onComplete: () => { },\n\n            }, ...options\n        };\n\n        let callback = settings.onComplete;\n        if ($.isFunction(originalUserOptions)) {\n            callback = originalUserOptions;\n        }\n\n        return this.each(function (i) {\n\n            const\n                $element = $(this),\n                uniqueMethodPluginName = generateInstanceID() + i,\n                thisLoadInstance = new Loader(settings);\n\n            thisLoadInstance.collect(this);\n\n            methodCollection.push({\n                id: uniqueMethodPluginName,\n                instance: thisLoadInstance,\n                element: this,\n                timeout: null\n            });\n\n            thisLoadInstance.progress((resource) => {\n\n                $(resource.element).trigger(pluginPrefix + capitalize(resource.status) + '.' + pluginPrefix, [resource.element, resource.resource]);\n                $element.trigger(pluginPrefix + 'Progress.' + pluginPrefix, [this, resource]);\n\n                const thisArguments = [thisLoadInstance, resource];\n\n                if (typeof settings.onProgress === 'function') {\n                    settings.onProgress.apply(this, thisArguments);\n                }\n\n                let eventName = capitalize(resource.status);\n                if (typeof settings['on' + eventName] === 'function') {\n                    settings['on' + eventName].apply(this, thisArguments);\n                }\n\n            });\n\n            thisLoadInstance.done(resources => {\n\n                $element.trigger(pluginPrefix + 'Complete.' + pluginPrefix, [this, resources]);\n                callback.apply(this, [thisLoadInstance, resources]);\n\n                if (settings.visible) {\n                    // TODO: intersection observer\n                    $window.off('scroll.' + uniqueMethodPluginName);\n                }\n\n                // refresh other method calls for same el (omitting this one)\n                methodCollection = methodCollection.filter(x => x.id !== uniqueMethodPluginName);\n                methodCollection.forEach(thisMethodCollection => {\n                    if ($element.is(thisMethodCollection.element)) {\n                        thisMethodCollection.instance.load();\n                    }\n                });\n\n            });\n\n            thisLoadInstance.load();\n\n            if (settings.visible) {\n                // TODO: intersection observer\n                $window.on('scroll.' + uniqueMethodPluginName, throttle(() => thisLoadInstance.load(), 250));\n            }\n\n            if (true === settings.early) for (let key in methodCollection) {\n\n                let thisMethodCollection = methodCollection[key];\n\n                if (methodCollection[key].id === uniqueMethodPluginName) {\n\n                    clearTimeout(thisMethodCollection.timeout);\n\n                    let timeout = parseInt(settings.earlyTimeout);\n\n                    thisMethodCollection.timeout = setTimeout(function () {\n\n                        // TODO: appropriate method to set/update settings?\n                        thisMethodCollection.instance._settings.visible = false;\n                        thisMethodCollection.instance._settings.sequential = true;\n\n                        thisMethodCollection.instance.load();\n\n                    }, !isNaN(timeout) && isFinite(timeout) ? timeout : 0);\n\n                    break;\n\n                }\n\n            }\n\n        });\n\n    };\n\n})(window, document, jQuery);"],"file":"nite.loader.js"}