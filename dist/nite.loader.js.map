{"version":3,"names":[],"mappings":"","sources":["nite.loader.js"],"sourcesContent":["/*! Nite Loader | Daniele Fioroni | dfioroni91@gmail.com */\n(() => {\n\t'use strict';\n\n\t/**\n\t * @returns {string}\n\t */\n\tconst generateInstanceID = () => {\n\t\treturn Math.floor(Math.random() * (9999 - 1000)) + 1000;\n\t};\n\n\tconst pluginPrefix = 'nite';\n\tconst pluginMethod = pluginPrefix + 'Load';\n\tconst pluginName = pluginMethod + 'er';\n\tconst pluginInstance = generateInstanceID();\n\tconst eventNamespaceParserSeparator = '__namespace__';\n\n\tconst CustomEvent =\n\t\twindow.CustomEvent ||\n\t\t(() => {\n\t\t\tconst _polyfill = (event, params) => {\n\t\t\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\n\t\t\t\tconst evt = document.createEvent('CustomEvent');\n\t\t\t\tevt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t\t\t\treturn evt;\n\t\t\t};\n\t\t\t_polyfill.prototype = window.Event.prototype;\n\t\t\treturn _polyfill;\n\t\t})();\n\n\tconst supportedExtensions = {\n\t\timage: 'jp[e]?g|jpe|jif|jfif|jfi|gif|png|tif[f]?|bmp|dib|webp|ico|cur|svg',\n\t\taudio: 'mp3|ogg|oga|spx|ogg|wav',\n\t\tvideo: 'mp4|ogv|webm'\n\t};\n\tconst supportedTags = {\n\t\timage: 'img|picture|source',\n\t\taudio: 'audio|source',\n\t\tvideo: 'video|source'\n\t};\n\n\tconst IntersectionObserverSupported = 'IntersectionObserver' in window;\n\tconst pictureElementSupported = 'HTMLPictureElement' in window;\n\n\t/**\n\t * @param {string} heystack\n\t * @param {string} needle\n\t * @returns {boolean}\n\t */\n\tconst stringContains = (heystack, needle) => {\n\t\treturn String.prototype.includes ? heystack.includes(needle) : heystack.indexOf(needle, 0) !== -1;\n\t};\n\n\t/**\n\t * @param {string} heystack\n\t * @param {string} needle\n\t * @returns {boolean}\n\t */\n\tconst stringStartsWith = (heystack, needle) => {\n\t\treturn String.prototype.startsWith\n\t\t\t? heystack.startsWith(needle)\n\t\t\t: heystack.substr(0, needle.length) === needle;\n\t};\n\n\t/**\n\t * @param {Array} heystack\n\t * @param {Function} filter\n\t * @returns {number}\n\t */\n\tconst arrayFindIndex = (heystack, filter) => {\n\t\treturn Array.prototype.findIndex\n\t\t\t? heystack.findIndex(filter)\n\t\t\t: (() => {\n\t\t\t\t\tlet length = heystack.length,\n\t\t\t\t\t\tindex = -1;\n\t\t\t\t\twhile (++index < length) {\n\t\t\t\t\t\tif (filter(heystack[index], index, heystack)) {\n\t\t\t\t\t\t\treturn index;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t  })();\n\t};\n\n\t/**\n\t * @param {HTMLElement} element\n\t * @param {string} events\n\t * @returns {undefined}\n\t */\n\tconst detachEventListener = (element, events) => {\n\t\tif (!element || typeof events !== 'string') {\n\t\t\treturn;\n\t\t}\n\n\t\tif (stringStartsWith(events, '.')) {\n\t\t\tfor (let key in privateEventsStorage) {\n\t\t\t\tconst eventNameWithNamespace = key.replace(eventNamespaceParserSeparator, '.');\n\t\t\t\tif (\n\t\t\t\t\tstringContains(eventNameWithNamespace, events) &&\n\t\t\t\t\tprivateEventsStorage[key].element === element\n\t\t\t\t) {\n\t\t\t\t\tdetachEventListener(element, eventNameWithNamespace);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tevents = events.split('.');\n\n\t\t\tconst type = events[0],\n\t\t\t\tnamespace = events[1];\n\n\t\t\tif (namespace) {\n\t\t\t\tevents = events.join(eventNamespaceParserSeparator);\n\t\t\t}\n\n\t\t\tif (events in privateEventsStorage) {\n\t\t\t\telement.removeEventListener(type, privateEventsStorage[events].handler);\n\t\t\t\tdelete privateEventsStorage[events];\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @param {HTMLElement} element\n\t * @param {string} events\n\t * @param {Function} handler\n\t * @param {boolean} once\n\t * @returns {undefined}\n\t */\n\tconst attachEventListener = (element, events, handler, once) => {\n\t\tif (!element || typeof events !== 'string' || typeof handler !== 'function') {\n\t\t\treturn;\n\t\t}\n\n\t\tevents = events.split('.');\n\n\t\tconst type = events[0];\n\t\tconst namespace = events[1];\n\n\t\tif (namespace) {\n\t\t\tevents = events.join(eventNamespaceParserSeparator);\n\t\t}\n\n\t\tprivateEventsStorage[events] = { element: element, count: 0, once: false };\n\n\t\tif (true === once) {\n\t\t\tlet _handler = handler;\n\t\t\thandler = function(event) {\n\t\t\t\tif (events in privateEventsStorage) {\n\t\t\t\t\tprivateEventsStorage[events].count++;\n\t\t\t\t\tif (privateEventsStorage[events].once && privateEventsStorage[events].count > 1) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t_handler.call(this, event);\n\t\t\t\t}\n\t\t\t\tdetachEventListener(element, events);\n\t\t\t};\n\t\t} else {\n\t\t\tonce = false;\n\t\t}\n\n\t\tprivateEventsStorage[events] = {\n\t\t\t...privateEventsStorage[events],\n\t\t\t...{ handler: handler, once: once }\n\t\t};\n\n\t\telement.addEventListener(type, privateEventsStorage[events].handler, { once: once });\n\t};\n\n\t/**\n\t * @param {string} string\n\t * @returns {string}\n\t */\n\tconst hyphensToCamelCase = string => {\n\t\treturn string.replace(/-([a-z])/g, g => g[1].toUpperCase());\n\t};\n\n\t/**\n\t * @param {string} string\n\t * @returns {string}\n\t */\n\tconst capitalize = string => {\n\t\treturn string.charAt(0).toUpperCase() + string.slice(1);\n\t};\n\n\t/**\n\t * @param {NodeList} nodelist\n\t * @returns {Array}\n\t */\n\tconst nodelistToArray = nodelist => {\n\t\treturn [...nodelist];\n\t};\n\n\t/**\n\t * @param {String|number} needle\n\t * @param {Array} heystack\n\t * @returns {boolean}\n\t */\n\tconst isInArray = (needle, heystack) => {\n\t\treturn heystack.indexOf(needle) > -1;\n\t};\n\n\t/**\n\t * @param {HTMLElement} element\n\t * @returns {boolean}\n\t */\n\tconst isVisible = element => {\n\t\tif (IntersectionObserverSupported && 'intersectionRatio' in element) {\n\t\t\treturn element.intersectionRatio > 0;\n\t\t}\n\n\t\tif (window.getComputedStyle(element, 'display') === 'none') {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst bodyEl = document.getElementsByTagName('body')[0];\n\t\tconst winWidth = window.innerWidth || documnt.documentElement.clientWidth || bodyEl.clientWidth;\n\t\tconst winHeight = window.innerHeight || documnt.documentElement.clientHeight || bodyEl.clientHeight;\n\t\tconst rect = element.getBoundingClientRect();\n\n\t\treturn !(rect.right < 0 || rect.bottom < 0 || rect.left > winWidth || rect.top > winHeight);\n\t};\n\n\t/**\n\t * @param {HTMLElement} element\n\t * @returns {boolean}\n\t */\n\tconst isHTMLElement = element => {\n\t\tif (typeof element !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\treturn element instanceof HTMLElement;\n\t\t} catch (e) {\n\t\t\treturn (\n\t\t\t\telement.nodeType === 1 &&\n\t\t\t\ttypeof element.style === 'object' &&\n\t\t\t\ttypeof element.ownerDocument === 'object'\n\t\t\t);\n\t\t}\n\t};\n\n\t/**\n\t * @param {(string|HTMLVideoElement|HTMLAudioElement|HTMLImageElement)} source\n\t * @returns {boolean}\n\t */\n\tconst isLoaded = source => {\n\t\treturn (\n\t\t\t(typeof source === 'string' && isInArray(source, privateCache)) ||\n\t\t\t(isHTMLElement(source) &&\n\t\t\t\t('currentSrc' in source && source.currentSrc.length > 0) &&\n\t\t\t\t(('complete' in source && source.complete) ||\n\t\t\t\t\t('readyState' in source && source.readyState >= 2)))\n\t\t);\n\t};\n\n\t/**\n\t * @param {(HTMLVideoElement|HTMLAudioElement)} source\n\t * @returns {boolean}\n\t */\n\tconst isFullyBuffered = media => {\n\t\treturn (\n\t\t\tmedia.buffered.length &&\n\t\t\tMath.round(media.buffered.end(0)) / Math.round(media.seekable.end(0)) === 1\n\t\t);\n\t};\n\n\t/**\n\t * @param {(string|HTMLElement)} source\n\t * @returns {boolean}\n\t */\n\tconst isBroken = source => {\n\t\treturn (\n\t\t\tisLoaded(source) &&\n\t\t\t((isHTMLElement(source) &&\n\t\t\t\t(('naturalWidth' in source && Math.floor(source.naturalWidth) === 0) ||\n\t\t\t\t\t('videoWidth' in source && source.videoWidth === 0))) ||\n\t\t\t\ttypeof source === 'string')\n\t\t);\n\t};\n\n\t/**\n\t * @param {Object} resource\n\t * @returns {Object}\n\t */\n\tconst decodeResource = resource => {\n\t\tlet output = { format: null, extension: null, tag: null, consistent: false };\n\n\t\tresource.resource = resource.resource.split('?')[0];\n\t\tresource.resource = resource.resource.split('#')[0];\n\t\tfor (let formatCandidate in supportedExtensions) {\n\t\t\tconst base64Heading = ';base64,';\n\n\t\t\tif (\n\t\t\t\tnew RegExp('(.(' + supportedExtensions[formatCandidate] + ')$)|' + base64Heading, 'g').test(\n\t\t\t\t\tresource.resource\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tif (new RegExp(base64Heading, 'g').test(resource.resource)) {\n\t\t\t\t\tlet matches64 = resource.resource.match(\n\t\t\t\t\t\tnew RegExp(\n\t\t\t\t\t\t\t'^data:' + formatCandidate + '/(' + supportedExtensions[formatCandidate] + ')',\n\t\t\t\t\t\t\t'g'\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tif (null === matches64) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tmatches64 = matches64[0];\n\n\t\t\t\t\toutput.format = formatCandidate;\n\t\t\t\t\toutput.extension = matches64.replace('data:' + formatCandidate + '/', '');\n\t\t\t\t\toutput.tag = supportedTags[formatCandidate];\n\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tlet matches = resource.resource.match(\n\t\t\t\t\t\tnew RegExp(supportedExtensions[formatCandidate], 'g')\n\t\t\t\t\t);\n\n\t\t\t\t\tif (matches) {\n\t\t\t\t\t\toutput.format = formatCandidate;\n\t\t\t\t\t\toutput.extension = matches[0];\n\t\t\t\t\t\toutput.tag = supportedTags[formatCandidate];\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isHTMLElement(resource.element)) {\n\t\t\tlet tagName = resource.element.tagName.toLowerCase();\n\t\t\tlet allTags = '';\n\n\t\t\tObject.values(supportedTags).forEach(tags => {\n\t\t\t\tallTags += '|' + tags;\n\t\t\t});\n\n\t\t\tallTags = allTags.split('|');\n\n\t\t\tif (isInArray(tagName, allTags)) {\n\t\t\t\toutput.tag = tagName;\n\t\t\t\toutput.consistent = true;\n\t\t\t\tif (output.format === null) {\n\t\t\t\t\tfor (let format in supportedTags) {\n\t\t\t\t\t\tif (stringContains(supportedTags[format], output.tag)) {\n\t\t\t\t\t\t\toutput.format = format;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (stringContains(output.tag, '|')) {\n\t\t\toutput.tag = output.tag.split('|')[0];\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tlet privateEventsStorage = {};\n\n\tlet privateCache = [];\n\n\t// TODO: Promise support\n\t// TODO: think about useful vars in callback args (this class is not public but its vars are returned in .progress() callback)\n\t/** TODO: description of the MyClass constructor function.\n\t * @class\n\t * @classdesc TODO: description of the SingleLoader class.\n\t */\n\tclass SingleLoader {\n\t\t/**\n\t\t * @param {Object} [options={ srcAttr: 'data-src', srcsetAttr: 'data-srcset', playthrough: false, visible: false }]\n\t\t */\n\t\tconstructor(options) {\n\t\t\tthis._settings = {\n\t\t\t\t...{\n\t\t\t\t\tsrcAttr: 'data-src',\n\t\t\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\t\t\tplaythrough: false,\n\t\t\t\t\tvisible: false\n\t\t\t\t},\n\t\t\t\t...options\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\t!stringStartsWith(this._settings.srcAttr, 'data-') ||\n\t\t\t\t!stringStartsWith(this._settings.srcsetAttr, 'data-')\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Wrong arguments format: srcAttr and srcsetAttr parameters must be dataset values.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.srcAttr = hyphensToCamelCase(this._settings.srcAttr.replace('data-', ''));\n\t\t\tthis.srcsetAttr = hyphensToCamelCase(this._settings.srcsetAttr.replace('data-', ''));\n\n\t\t\tthis._id = null;\n\t\t\tthis._idEvent = null;\n\t\t\tthis._busy = false;\n\n\t\t\tthis._element = null;\n\t\t\tthis._resource = null;\n\t\t\tthis._format = null;\n\t\t\tthis._observer = null;\n\n\t\t\tthis._done = () => {};\n\t\t\tthis._success = () => {};\n\t\t\tthis._error = () => {};\n\n\t\t\tthis._callback = e => {\n\t\t\t\tthis._busy = false;\n\t\t\t\tif (null !== this._observer) {\n\t\t\t\t\tthis._observer.unobserve(this._element);\n\t\t\t\t}\n\n\t\t\t\tconst src = this._element.currentSrc || this._element.src;\n\n\t\t\t\tif (!isInArray(src, privateCache)) {\n\t\t\t\t\tprivateCache.push(src);\n\t\t\t\t}\n\n\t\t\t\tlet thisArguments = [this._element, e.type, src, this._id];\n\n\t\t\t\tthis[e.type !== 'error' ? '_success' : '_error'].apply(this, thisArguments);\n\t\t\t\tthis._done.apply(this, thisArguments);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @param {Object} data\n\t\t */\n\t\tset resource(data) {\n\t\t\tif (typeof data === 'object' && 'id' in data && 'element' in data && 'resource' in data) {\n\t\t\t\tthis._id = data.id;\n\t\t\t\tthis._element = data.element;\n\t\t\t\tthis._resource = data.resource;\n\n\t\t\t\tlet info = decodeResource({\n\t\t\t\t\tresource: this._resource,\n\t\t\t\t\telement: this._element\n\t\t\t\t});\n\t\t\t\tthis._tag = info.tag;\n\t\t\t\tthis._consistent = info.consistent;\n\t\t\t\tthis._format = info.format;\n\t\t\t\tthis._exists = this._element !== null;\n\t\t\t\tthis._originalElement = this._element;\n\n\t\t\t\tif (!this._exists || !this._consistent) {\n\t\t\t\t\tthis._element = document.createElement(this._tag);\n\t\t\t\t\tthis._element.dataset[this.srcAttr] = this._resource;\n\t\t\t\t}\n\n\t\t\t\tif (this._exists && this._settings.visible && IntersectionObserverSupported) {\n\t\t\t\t\tthis._observer = new IntersectionObserver(\n\t\t\t\t\t\t(entries, observer) => {\n\t\t\t\t\t\t\tentries.forEach(\n\t\t\t\t\t\t\t\tentry => (entry.target.intersectionRatio = entry.intersectionRatio)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\troot: null,\n\t\t\t\t\t\t\trootMargin: '0px',\n\t\t\t\t\t\t\tthreshold: 0.1\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\tthis._observer.observe(this._originalElement);\n\t\t\t\t}\n\n\t\t\t\tthis._idEvent = this._element[pluginInstance + '_IDEvent'];\n\t\t\t\tthis._busy = this._idEvent !== undefined;\n\t\t\t\tthis._idEvent = this._busy\n\t\t\t\t\t? this._idEvent\n\t\t\t\t\t: pluginName + '_unique_' + this._element.tagName + '_' + generateInstanceID();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @returns {string}\n\t\t */\n\t\tget resource() {\n\t\t\treturn this._resource;\n\t\t}\n\n\t\t/**\n\t\t * @returns {boolean} se ha preso in carico il caricamento oppure no per vari motivi (è già caricato, non è nella viewport etc)\n\t\t */\n\t\tload() {\n\t\t\tif (isLoaded(this._exists && this._consistent ? this._element : this._resource)) {\n\t\t\t\tif (!this._busy) {\n\t\t\t\t\t// TODO: mayabe this should be called in this._callback\n\t\t\t\t\tdetachEventListener(this._element, '.' + this._idEvent);\n\t\t\t\t}\n\n\t\t\t\tthis._callback(\n\t\t\t\t\tnew CustomEvent(\n\t\t\t\t\t\t!isBroken(this._exists && this._consistent ? this._element : this._resource)\n\t\t\t\t\t\t\t? 'load'\n\t\t\t\t\t\t\t: 'error'\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\treturn false;\n\t\t\t} else if (this._exists && this._settings.visible && !isVisible(this._originalElement)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tif (this._format === 'image') {\n\t\t\t\t\tattachEventListener(this._element, 'load.' + this._idEvent, this._callback, !this._busy);\n\t\t\t\t\tattachEventListener(this._element, 'error.' + this._idEvent, this._callback, !this._busy);\n\n\t\t\t\t\tconst picture = this._element.closest('picture');\n\n\t\t\t\t\tif (picture && pictureElementSupported) {\n\t\t\t\t\t\tdelete this._element.dataset[this.srcsetAttr];\n\t\t\t\t\t\tdelete this._element.dataset[this.srcAttr];\n\n\t\t\t\t\t\tpicture.querySelectorAll('source[' + this._settings.srcsetAttr + ']').forEach(el => {\n\t\t\t\t\t\t\tel.setAttribute('srcset', el.dataset[this.srcAttr]);\n\t\t\t\t\t\t\tdelete el.dataset[this.srcAttr];\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this._element.matches('[' + this._settings.srcsetAttr + ']')) {\n\t\t\t\t\t\t\tthis._element.setAttribute('srcset', this._element.dataset[this.srcsetAttr]);\n\t\t\t\t\t\t\tdelete this._element.dataset[this.srcsetAttr];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this._element.matches('[' + this._settings.srcAttr + ']')) {\n\t\t\t\t\t\t\tthis._element.setAttribute('src', this._element.dataset[this.srcAttr]);\n\t\t\t\t\t\t\tdelete this._element.dataset[this.srcAttr];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (this._format === 'video' || this._format === 'audio') {\n\t\t\t\t\tconst isStandardPlaythrough = true === this._settings.playthrough;\n\t\t\t\t\tconst isFullPlaythrough = 'full' === this._settings.playthrough;\n\t\t\t\t\tconst sources = this._element.querySelectorAll('source');\n\n\t\t\t\t\tlet callMediaLoad = false;\n\n\t\t\t\t\tif (sources) {\n\t\t\t\t\t\tsources.forEach(source => {\n\t\t\t\t\t\t\tif (source.matches('[' + this._settings.srcAttr + ']')) {\n\t\t\t\t\t\t\t\tsource.setAttribute('src', source.dataset[this.srcAttr]);\n\t\t\t\t\t\t\t\tdelete source.dataset[this.srcsetAttr];\n\n\t\t\t\t\t\t\t\tcallMediaLoad = true;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tattachEventListener(\n\t\t\t\t\t\t\t\tsource,\n\t\t\t\t\t\t\t\t'error.' + this._idEvent,\n\t\t\t\t\t\t\t\te => {\n\t\t\t\t\t\t\t\t\tconst sourcesErrorId = pluginName + '_error';\n\n\t\t\t\t\t\t\t\t\tsource[pluginInstance + '_' + sourcesErrorId] = true;\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tsources.length ===\n\t\t\t\t\t\t\t\t\t\tnodelistToArray(sources).filter(\n\t\t\t\t\t\t\t\t\t\t\tthisSource =>\n\t\t\t\t\t\t\t\t\t\t\t\ttrue === thisSource[pluginInstance + '_' + sourcesErrorId]\n\t\t\t\t\t\t\t\t\t\t).length\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tthis._callback(e);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t!this._busy\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (this._element.matches('[' + this._settings.srcAttr + ']')) {\n\t\t\t\t\t\tthis._element.setAttribute('src', this._element.dataset[this.srcAttr]);\n\t\t\t\t\t\tdelete this._element.dataset[this.srcAttr];\n\n\t\t\t\t\t\tattachEventListener(\n\t\t\t\t\t\t\tthis._element,\n\t\t\t\t\t\t\t'error.' + this._idEvent,\n\t\t\t\t\t\t\tthis._callback,\n\t\t\t\t\t\t\t!this._busy\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tcallMediaLoad = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (callMediaLoad) {\n\t\t\t\t\t\tthis._element.load();\n\t\t\t\t\t}\n\n\t\t\t\t\tattachEventListener(\n\t\t\t\t\t\tthis._element,\n\t\t\t\t\t\t'loadedmetadata.' + this._idEvent,\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tif (!isStandardPlaythrough && !isFullPlaythrough) {\n\t\t\t\t\t\t\t\tthis._callback(new CustomEvent('load'));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (isFullPlaythrough) {\n\t\t\t\t\t\t\t\tlet onProgressReplacementInterval = setInterval(() => {\n\t\t\t\t\t\t\t\t\tlet isError = this._element.readyState > 0 && !this._element.duration;\n\n\t\t\t\t\t\t\t\t\tif (isError || isFullyBuffered(this._element)) {\n\t\t\t\t\t\t\t\t\t\tthis._element.currentTime = 0;\n\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t!isError &&\n\t\t\t\t\t\t\t\t\t\t\t!this._busy &&\n\t\t\t\t\t\t\t\t\t\t\tthis._element.paused &&\n\t\t\t\t\t\t\t\t\t\t\tthis._element.matches('[autoplay]')\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tthis._element.play();\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclearInterval(onProgressReplacementInterval);\n\n\t\t\t\t\t\t\t\t\t\tthis._callback(new CustomEvent(!isError ? 'load' : 'error'));\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif (!this._element.paused) {\n\t\t\t\t\t\t\t\t\t\t\tthis._element.pause();\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif (!this._busy) {\n\t\t\t\t\t\t\t\t\t\t\tthis._element.currentTime += 2;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, 500);\n\n\t\t\t\t\t\t\t\tthis._element[\n\t\t\t\t\t\t\t\t\tpluginName + '_' + this._idEvent\n\t\t\t\t\t\t\t\t] = onProgressReplacementInterval;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t!this._busy\n\t\t\t\t\t);\n\n\t\t\t\t\tattachEventListener(\n\t\t\t\t\t\tthis._element,\n\t\t\t\t\t\t'canplay.' + this._idEvent,\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tisFullPlaythrough &&\n\t\t\t\t\t\t\t\tthis._element.currentTime === 0 &&\n\t\t\t\t\t\t\t\t!isFullyBuffered(this._element)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tthis._element.currentTime++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t!this._busy\n\t\t\t\t\t);\n\n\t\t\t\t\tattachEventListener(\n\t\t\t\t\t\tthis._element,\n\t\t\t\t\t\t'canplaythrough.' + this._idEvent,\n\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\tif (isStandardPlaythrough) {\n\t\t\t\t\t\t\t\tthis._callback(new CustomEvent('load'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t!this._busy\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (!this._busy) {\n\t\t\t\t\tthis._element[pluginInstance + '_IDEvent'] = this._idEvent;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._resource = this._element.currentSrc || this._element.src;\n\n\t\t\treturn !this._busy;\n\t\t}\n\n\t\t/**\n\t\t * @param {Function} callback\n\t\t * @returns {undefined}\n\t\t */\n\t\tdone(callback) {\n\t\t\tif (typeof callback !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._done = function(element, status, resource, id) {\n\t\t\t\tcallback.apply(this, [element, status, resource, id]);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @returns {undefined}\n\t\t */\n\t\tabort() {\n\t\t\tdetachEventListener(this._element, '.' + this._idEvent);\n\n\t\t\tif (isLoaded(this._exists ? this._element : this._resource)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst src = this._element.getAttribute('srcset'),\n\t\t\t\tsrcset = this._element.getAttribute('src');\n\n\t\t\tif (undefined !== src) {\n\t\t\t\tthis._element.dataset[this.srcAttr] = src;\n\t\t\t\tthis._element.setAttribute(this._settings.srcAttr, src);\n\t\t\t\tthis._element.removeAttribute('src');\n\t\t\t\tthis._element.removeAttribute('srcset');\n\t\t\t}\n\n\t\t\tif (undefined !== srcset) {\n\t\t\t\tthis._element.dataset[this.srcsetAttr] = srcset;\n\t\t\t\tthis._element.setAttribute(this._settings.srcsetAttr, srcset);\n\t\t\t\tthis._element.removeAttribute('src');\n\t\t\t\tthis._element.removeAttribute('srcset');\n\t\t\t}\n\t\t}\n\t}\n\n\t// TODO: Promise support\n\t// TODO: private vars\n\t// TODO: refactory succes/done/progress code...\n\t/** TODO: description of the MyClass constructor function.\n\t * @class\n\t * @classdesc TODO: description of the Loader class.\n\t */\n\tclass Loader {\n\t\t/**\n\t\t * @param {Object} [options={srcAttr: 'data-src', srcsetAttr: 'data-srcset', playthrough: false, visible: false, backgrounds: false }]\n\t\t */\n\t\tconstructor(options) {\n\t\t\tthis._collection = [];\n\t\t\tthis._collectionLoaded = [];\n\t\t\tthis._collectionInstances = [];\n\t\t\tthis._collectionPending = [];\n\t\t\tthis._resourcesLoaded = [];\n\n\t\t\tthis._settings = {\n\t\t\t\t...{\n\t\t\t\t\tsrcAttr: 'data-src',\n\t\t\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\t\t\tplaythrough: false,\n\t\t\t\t\tvisible: false,\n\t\t\t\t\tbackgrounds: false\n\t\t\t\t},\n\t\t\t\t...options\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\t!stringStartsWith(this._settings.srcAttr, 'data-') ||\n\t\t\t\t!stringStartsWith(this._settings.srcsetAttr, 'data-')\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Wrong arguments format: srcAttr and srcsetAttr parameters must be dataset values.'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.srcAttr = hyphensToCamelCase(this._settings.srcAttr.replace('data-', ''));\n\t\t\tthis.srcsetAttr = hyphensToCamelCase(this._settings.srcsetAttr.replace('data-', ''));\n\n\t\t\tthis.percentage = 0;\n\n\t\t\tthis._done = () => {};\n\t\t\tthis._progress = () => {};\n\t\t\tthis._success = () => {};\n\t\t\tthis._error = () => {};\n\t\t\tthis._loop = this.load;\n\n\t\t\tthis._abort = false;\n\t\t\tthis._loaded = 0;\n\t\t\tthis._complete = false;\n\t\t\tthis._busy = false;\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {HTMLElement} [element=document.body]\n\t\t * @param {Object} [options={ srcAttr: 'src', srcsetAttr: 'srcset', backgrounds: false }]\n\t\t */\n\t\tstatic findResources(element, options) {\n\t\t\tlet settings = {\n\t\t\t\tsrcAttr: 'src',\n\t\t\t\tsrcsetAttr: 'srcset',\n\t\t\t\tbackgrounds: false\n\t\t\t};\n\n\t\t\tif (typeof element === 'object' && undefined === options) {\n\t\t\t\tfor (let key in settings) {\n\t\t\t\t\tif (key in element) {\n\t\t\t\t\t\toptions = element;\n\t\t\t\t\t\telement = undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (undefined === element || element === document) {\n\t\t\t\telement = document.body;\n\t\t\t}\n\n\t\t\tif (!isHTMLElement(element)) {\n\t\t\t\tthrow new Error('TypeError: ' + element + ' is not of type HTMLElement.');\n\t\t\t}\n\n\t\t\tlet collectedResources = [];\n\n\t\t\tsettings = {\n\t\t\t\t...settings,\n\t\t\t\t...options\n\t\t\t};\n\n\t\t\tconst targets = 'img, video, audio';\n\t\t\tconst targetsExtended = targets + ', picture, source';\n\t\t\tconst targetsFilter = '[' + settings.srcAttr + '], [' + settings.srcsetAttr + ']';\n\n\t\t\tlet targetsTags = nodelistToArray(element.querySelectorAll(targets));\n\n\t\t\tif (element.matches(targetsExtended)) {\n\t\t\t\ttargetsTags.push(element);\n\t\t\t}\n\n\t\t\ttargetsTags = targetsTags.filter(target => {\n\t\t\t\tlet children = nodelistToArray(target.children);\n\t\t\t\tchildren = children.filter(x => x.matches(targetsExtended));\n\t\t\t\tchildren = children.filter(x => x.matches(targetsFilter));\n\t\t\t\treturn target.matches(targetsFilter) || children.length;\n\t\t\t});\n\t\t\ttargetsTags.forEach(target => {\n\t\t\t\tlet targetSource = target;\n\n\t\t\t\tif (!targetSource.matches(targetsFilter)) {\n\t\t\t\t\ttargetSource = targetSource.querySelectorAll(targetsFilter);\n\t\t\t\t\ttargetSource = [...targetSource][0];\n\t\t\t\t}\n\n\t\t\t\tcollectedResources.push({\n\t\t\t\t\telement: target,\n\t\t\t\t\tresource:\n\t\t\t\t\t\ttargetSource.getAttribute(settings.srcAttr) ||\n\t\t\t\t\t\ttargetSource.getAttribute(settings.srcsetAttr)\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (true === settings.backgrounds) {\n\t\t\t\tlet targetsBg = nodelistToArray(element.querySelectorAll('*'));\n\t\t\t\ttargetsBg.push(element);\n\t\t\t\ttargetsBg = targetsBg.filter(target => !target.matches(targetsExtended));\n\t\t\t\ttargetsBg = targetsBg.filter(target => getComputedStyle(target).backgroundImage !== 'none');\n\t\t\t\ttargetsBg.forEach(target => {\n\t\t\t\t\tconst url = getComputedStyle(target).backgroundImage.match(/\\((.*?)\\)/);\n\n\t\t\t\t\tif (null !== url && url.length >= 2) {\n\t\t\t\t\t\tcollectedResources.push({\n\t\t\t\t\t\t\telement: target,\n\t\t\t\t\t\t\tresource: url[1].replace(/('|\")/g, '')\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn collectedResources;\n\t\t}\n\n\t\t/**\n\t\t * @param {(Array.<String>|HTMLElement)} collection\n\t\t */\n\t\tset collection(collection) {\n\t\t\tlet collectedResources = collection;\n\n\t\t\ttry {\n\t\t\t\tcollectedResources = Loader.findResources(collection, this._settings);\n\t\t\t} catch (err) {}\n\n\t\t\tcollectedResources.forEach(item => {\n\t\t\t\tlet element = {\n\t\t\t\t\tresource: '',\n\t\t\t\t\telement: null,\n\t\t\t\t\tid: generateInstanceID()\n\t\t\t\t};\n\n\t\t\t\tif (typeof item === 'string') {\n\t\t\t\t\telement.resource = item;\n\t\t\t\t} else if (typeof item === 'object' && 'resource' in item) {\n\t\t\t\t\telement = { ...element, ...item };\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._collection.push(element);\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @returns {Array} collection\n\t\t */\n\t\tget collection() {\n\t\t\treturn this._collection;\n\t\t}\n\n\t\t/**\n\t\t * @returns {undefined}\n\t\t */\n\t\tload() {\n\t\t\tif (!this._collection.length) {\n\t\t\t\tthis._done.call(this, this._resourcesLoaded);\n\t\t\t}\n\n\t\t\t// resets pending elements (sequential opt helper array) every time we loop\n\t\t\tthis._collectionPending = [];\n\n\t\t\tconst sequentialMode = true === this._settings.sequential;\n\n\t\t\tfor (let i = 0; i < this._collection.length; i++) {\n\t\t\t\tif (this._abort) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlet thisLoadId = this._collection[i].id;\n\t\t\t\tlet thisLoadIndex = arrayFindIndex(this._collectionInstances, x => x.id === thisLoadId);\n\t\t\t\tlet thisLoadInstance = new SingleLoader(this._settings);\n\n\t\t\t\tif (thisLoadIndex === -1) {\n\t\t\t\t\tthis._collectionInstances.push({\n\t\t\t\t\t\tid: thisLoadId,\n\t\t\t\t\t\tinstance: thisLoadInstance\n\t\t\t\t\t});\n\t\t\t\t\tthisLoadIndex = arrayFindIndex(this._collectionInstances, x => x.id === thisLoadId);\n\t\t\t\t} else {\n\t\t\t\t\tthis._collectionInstances[thisLoadIndex].instance = thisLoadInstance;\n\t\t\t\t}\n\n\t\t\t\tthisLoadInstance.resource = this._collection[i];\n\n\t\t\t\tthisLoadInstance.done((element, status, resource, id) => {\n\t\t\t\t\tif (this._complete || this._abort) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst aProgress = !isInArray(id, this._collectionLoaded);\n\n\t\t\t\t\tif (aProgress) {\n\t\t\t\t\t\tthis._collectionLoaded.push(id);\n\t\t\t\t\t\tthis._busy = false;\n\n\t\t\t\t\t\tthis._loaded++;\n\t\t\t\t\t\tthis.percentage = this._loaded / this._collection.length * 100;\n\t\t\t\t\t\tthis.percentage = parseFloat(this.percentage.toFixed(4));\n\n\t\t\t\t\t\tconst thisResource = {\n\t\t\t\t\t\t\tresource: resource,\n\t\t\t\t\t\t\tstatus: status,\n\t\t\t\t\t\t\telement: element\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis._resourcesLoaded.push(thisResource);\n\t\t\t\t\t\tthis._progress.call(this, thisResource);\n\t\t\t\t\t\tthis[status !== 'error' ? '_success' : '_error'].call(this, thisResource);\n\t\t\t\t\t\t// TODO: dispatch event on element maybe?\n\t\t\t\t\t\t// element.dispatchEvent(new CustomEvent(pluginPrefix + capitalize(status) + '.' + pluginPrefix));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this._loaded === this._collection.length) {\n\t\t\t\t\t\tthis._done.call(this, this._resourcesLoaded);\n\n\t\t\t\t\t\tthis._complete = true;\n\t\t\t\t\t} else if (aProgress && sequentialMode && this._collectionPending.length) {\n\t\t\t\t\t\tthis._collectionPending = this._collectionPending.filter(x => x.id !== id);\n\n\t\t\t\t\t\tif (this._collectionPending.length) {\n\t\t\t\t\t\t\tthis._busy = this._collectionPending[0].instance.load();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!sequentialMode || (sequentialMode && !this._busy)) {\n\t\t\t\t\tthis._busy = thisLoadInstance.load();\n\t\t\t\t} else if (\n\t\t\t\t\tsequentialMode &&\n\t\t\t\t\tthis._busy &&\n\t\t\t\t\t(!this._settings.visible ||\n\t\t\t\t\t\t!thisLoadInstance._exists ||\n\t\t\t\t\t\t(this._settings.visible &&\n\t\t\t\t\t\t\tthisLoadInstance._exists &&\n\t\t\t\t\t\t\tisVisible(thisLoadInstance._originalElement)))\n\t\t\t\t) {\n\t\t\t\t\tthis._collectionPending.push({\n\t\t\t\t\t\tid: thisLoadId,\n\t\t\t\t\t\tinstance: thisLoadInstance\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {Function} callback\n\t\t * @returns {undefined}\n\t\t */\n\t\tdone(callback) {\n\t\t\tif (typeof callback !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._done = function(resources) {\n\t\t\t\tcallback.call(this, resources);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @param {Function} callback\n\t\t * @returns {undefined}\n\t\t */\n\t\tprogress(callback) {\n\t\t\tif (typeof callback !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = function(resource) {\n\t\t\t\tcallback.call(this, resource);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @param {Function} callback\n\t\t * @returns {undefined}\n\t\t */\n\t\tsuccess(callback) {\n\t\t\tif (typeof callback !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._success = function(resource) {\n\t\t\t\tcallback.call(this, resource);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @param {Function} callback\n\t\t * @returns {undefined}\n\t\t */\n\t\terror(callback) {\n\t\t\tif (typeof callback !== 'function') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._error = function(resource) {\n\t\t\t\tcallback.call(this, resource);\n\t\t\t};\n\t\t}\n\n\t\t/**\n\t\t * @returns {undefined}\n\t\t */\n\t\tabort() {\n\t\t\tthis._collectionInstances.forEach(thisInstance => {\n\t\t\t\tthisInstance.instance.abort();\n\t\t\t});\n\n\t\t\tthis._abort = true;\n\t\t}\n\t}\n\n\t// public interface\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t// requirejs\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(capitalize(pluginName), Loader);\n\t\t// nodejs\n\t} else if ('object' === typeof exports) {\n\t\tmodule.exports[capitalize(pluginName)] = Loader;\n\t\t// vanilla\n\t} else {\n\t\twindow[capitalize(pluginName)] = Loader;\n\t}\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\t// jQuery interface\n\t// - - - - - - - - - - - - - - - - - - - -\n\tif (!('jQuery' in window)) {\n\t\treturn;\n\t}\n\n\tconst $ = jQuery;\n\n\t$[capitalize(pluginName)] = Loader;\n\n\tconst $document = $(document);\n\tconst $window = $(window);\n\t// thanks https://gist.github.com/beaucharman/e46b8e4d03ef30480d7f4db5a78498ca\n\tconst throttle = (callback, wait, context = this) => {\n\t\tlet timeout = null;\n\t\tlet callbackArgs = null;\n\t\tconst later = () => {\n\t\t\tcallback.apply(context, callbackArgs);\n\t\t\ttimeout = null;\n\t\t};\n\t\treturn function() {\n\t\t\tif (!timeout) {\n\t\t\t\tcallbackArgs = arguments;\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\tlet methodCollection = [];\n\n\t$.fn[pluginMethod] = function(options) {\n\t\tlet originalUserOptions = options;\n\n\t\tif (typeof options !== 'object') {\n\t\t\toptions = {};\n\t\t}\n\n\t\tlet settings = {\n\t\t\t...{\n\t\t\t\tsrcAttr: 'data-src',\n\t\t\t\tsrcsetAttr: 'data-srcset',\n\n\t\t\t\tvisible: false,\n\t\t\t\tsequential: false,\n\n\t\t\t\tbackgrounds: false,\n\t\t\t\tplaythrough: false,\n\n\t\t\t\tearly: false,\n\t\t\t\tearlyTimeout: 0,\n\n\t\t\t\tonProgress: () => {},\n\t\t\t\tonLoad: () => {},\n\t\t\t\tonError: () => {},\n\n\t\t\t\tonComplete: () => {}\n\t\t\t},\n\t\t\t...options\n\t\t};\n\n\t\tlet callback = settings.onComplete;\n\t\tif ($.isFunction(originalUserOptions)) {\n\t\t\tcallback = originalUserOptions;\n\t\t}\n\n\t\treturn this.each(function(i) {\n\t\t\t// TODO: mutation observer when new children are appended\n\n\t\t\tconst $element = $(this);\n\t\t\tconst uniqueMethodPluginName = generateInstanceID() + i;\n\t\t\tconst thisLoadInstance = new Loader(settings);\n\n\t\t\tthisLoadInstance.collection = this;\n\n\t\t\tmethodCollection.push({\n\t\t\t\tid: uniqueMethodPluginName,\n\t\t\t\tinstance: thisLoadInstance,\n\t\t\t\telement: this,\n\t\t\t\ttimeout: null\n\t\t\t});\n\n\t\t\tthisLoadInstance.progress(resource => {\n\t\t\t\t$(resource.element).trigger(pluginPrefix + capitalize(resource.status) + '.' + pluginPrefix, [\n\t\t\t\t\tresource.element,\n\t\t\t\t\tresource.resource\n\t\t\t\t]);\n\t\t\t\t$element.trigger(pluginPrefix + 'Progress.' + pluginPrefix, [this, resource]);\n\n\t\t\t\tconst thisArguments = [thisLoadInstance, resource];\n\n\t\t\t\tif (typeof settings.onProgress === 'function') {\n\t\t\t\t\tsettings.onProgress.apply(this, thisArguments);\n\t\t\t\t}\n\n\t\t\t\tlet eventName = capitalize(resource.status);\n\t\t\t\tif (typeof settings['on' + eventName] === 'function') {\n\t\t\t\t\tsettings['on' + eventName].apply(this, thisArguments);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthisLoadInstance.done(resources => {\n\t\t\t\t$element.trigger(pluginPrefix + 'Complete.' + pluginPrefix, [this, resources]);\n\t\t\t\tcallback.apply(this, [thisLoadInstance, resources]);\n\n\t\t\t\tif (settings.visible) {\n\t\t\t\t\t/*if (IntersectionObserverSupported) {\n                        thisLoadInstance.collection.forEach(item => item.element.intersectionObserver.unobserve(item.element));\n\n                    } else {*/\n\t\t\t\t\t$window.off('scroll.' + uniqueMethodPluginName);\n\n\t\t\t\t\t//}\n\t\t\t\t}\n\n\t\t\t\t// refresh other method calls for same el (omitting this one)\n\t\t\t\tmethodCollection = methodCollection.filter(x => x.id !== uniqueMethodPluginName);\n\t\t\t\tmethodCollection.forEach(thisMethodCollection => {\n\t\t\t\t\tif ($element.is(thisMethodCollection.element)) {\n\t\t\t\t\t\tthisMethodCollection.instance.load();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tthisLoadInstance.load();\n\n\t\t\tif (settings.visible) {\n\t\t\t\t/* if (IntersectionObserverSupported) {\n\n                    thisLoadInstance.collection.forEach(item => {\n\n                        item.element.intersectionObserver = new IntersectionObserver((entries, observer) => {\n                            entries.forEach(entry => {\n                                if( entry.intersectionRatio > 0 ){\n                                    thisLoadInstance.load();\n                                }\n                            });\n                        }, {\n                            root: null,\n                            rootMargin: '0px',\n                            threshold: 0.0\n                        });\n\n                        item.element.intersectionObserver.observe(item.element);\n\n                    });\n\n                } else {*/\n\n\t\t\t\t$window.on('scroll.' + uniqueMethodPluginName, throttle(() => thisLoadInstance.load(), 250));\n\n\t\t\t\t//}\n\t\t\t}\n\n\t\t\tif (true === settings.early) {\n\t\t\t\tlet breakLoop = false;\n\n\t\t\t\tmethodCollection.forEach(thisMethodCollection => {\n\t\t\t\t\tif (breakLoop) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (methodCollection[key].id === uniqueMethodPluginName) {\n\t\t\t\t\t\tclearTimeout(thisMethodCollection.timeout);\n\n\t\t\t\t\t\tlet timeout = parseInt(settings.earlyTimeout);\n\n\t\t\t\t\t\tthisMethodCollection.timeout = setTimeout(() => {\n\t\t\t\t\t\t\t// TODO: appropriate method to set/update settings?\n\t\t\t\t\t\t\tthisMethodCollection.instance._settings.visible = false;\n\t\t\t\t\t\t\tthisMethodCollection.instance._settings.sequential = true;\n\n\t\t\t\t\t\t\tthisMethodCollection.instance.load();\n\t\t\t\t\t\t}, !isNaN(timeout) && isFinite(timeout) ? timeout : 0);\n\n\t\t\t\t\t\tbreakLoop = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t};\n})();\n"],"file":"nite.loader.js"}