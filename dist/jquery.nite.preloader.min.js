"use strict";var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";var d=Math.floor,f="nite",e=f+"Preload",g=e+"er";if(function(a){a.console||(a.console={});for(var b,c,d=a.console,e=function(){},f=["memory"],g=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profiles","profileEnd","show","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"];b=f.pop();)d[b]||(d[b]={});for(;c=g.pop();)d[c]||(d[c]=e)}(a),!c)return console.error("jQuery is needed for "+g+" to work!"),void 0;Array.prototype.findIndex=Array.prototype.findIndex||function(a){if(null===this)throw new TypeError("Array.prototype.findIndex called on null or undefined");else if("function"!=typeof a)throw new TypeError("callback must be a function");for(var b=Object(this),c=b.length>>>0,d=arguments[1],e=0;e<c;e++)if(a.call(d,b[e],e,b))return e;return-1},[].filter||(Array.prototype.filter=function(f,a,b,c,d){for(d in b=this,c=[],b)~~d+""==d&&0<=d&&f.call(a,b[d],+d,b)&&c.push(b[d]);return c});var h=function(a){return a.charAt(0).toUpperCase()+a.slice(1)},i=c(b),j=c(a),k=function(){return c.nite&&"uniqueId"in c.nite?c.nite.uniqueId():d(8999*Math.random())+1e3},l=function(a){var b=c(a),d=!1;if(c.nite&&"inViewport"in c.nite)d=c.nite.inViewport(a).ratio;else{var e=a.getBoundingClientRect();d=!(0>e.right||0>e.bottom||e.left>j.width()||e.top>j.height())}return d&&b.is(":visible")&&"hidden"!==b.css("visibility")},m=function(a){if("object"!==("undefined"==typeof a?"undefined":_typeof(a)))return!1;try{return a instanceof HTMLElement}catch(b){return 1===a.nodeType&&"object"===_typeof(a.style)&&"object"===_typeof(a.ownerDocument)}},n=function(a){return m(a)&&"currentSrc"in a&&a.currentSrc.length&&("complete"in a&&a.complete||"readyState"in a&&2<=a.readyState)},o=function(a){return n(a)&&("naturalWidth"in a&&0===d(a.naturalWidth)||"videoWidth"in a&&0===a.videoWidth)},p=function(a,b){var d={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},e=Object.keys(d),f={format:null,extension:null};if("string"==typeof a){if(a=a.split("?")[0],a=a.split("#")[0],""===a)return!1;var g=void 0===b?e:[b];for(var h in g)if(g.hasOwnProperty(h)&&new RegExp("(.("+d[g[h]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var i=a.match(new RegExp("^data:"+g[h]+"/("+d[g[h]]+")","g"));if(!i||null===i)continue;i=i[0],f.format=i.replace("data:"+g[h]+"/g","");break}else{var j=a.match(new RegExp(d[g[h]],"g"));if(j){f.format=g[h],f.extension=j[0];break}}}if(m(a)){var k=a.tagName.toLowerCase();-1<c.inArray(k,e)&&(f.format=a.tagName.toLowerCase()),"img"===k&&(f.format="image")}return f},q=function(){function d(a){_classCallCheck(this,d);var b=this;this._settings=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",playthrough:!1,visible:!1},a),this._id=null,this._id_event=null,this._element=null,this._$element=c(),this._resource=null,this._busy=!1,this._format=null,this._callback=c.noop,this._done=function(a){var c=b._element.currentSrc||b._element.src;if(!b._busy){var d=h(a.type);b._$element.trigger(f+d+"."+f,[b._element,c])}b._$element.removeData(g),b._busy=!1,b._callback.call(b,a.type,c,b._id)}}return _createClass(d,[{key:"process",value:function(){var b=this,d=this._settings.srcAttr,e=this._settings.srcAttr.replace("data-","");if(n(this._element))return this._busy||this._$element.off("."+this._id_event),this._done(new Event(o(this._element)?"error":"load")),!1;if(this._settings.visible&&!l(this._element))return!1;if("image"===this._format){this._$element[this._busy?"on":"one"]("load."+this._id_event+" error."+this._id_event,this._done);var f=this._$element.closest("picture"),h=this._settings.srcsetAttr,i=this._settings.srcsetAttr.replace("data-","");f.length&&"HTMLPictureElement"in a?(this._$element.removeData(i).removeAttr(h).removeData(e).removeAttr(d),f.find("source["+h+"]").attr("srcset",f.data(i)).removeData(i).removeAttr(h)):(this._$element.is("["+h+"]")&&this._$element.attr("srcset",this._$element.data(i)).removeData(i).removeAttr(h),this._$element.is("["+d+"]")&&this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d))}else if("video"===this._format||"audio"===this._format){var j=this._$element.find("source"),k=function(a){var b=Math.round;return a.buffered.length&&1==b(a.buffered.end(0))/b(a.seekable.end(0))},m=!1;j.length?j.each(function(){c(this).is("["+d+"]")&&(c(this).attr("src",c(this).data(e)).removeData(e).removeAttr(d),m=!0)})[this._busy?"on":"one"]("error."+this._id_event,function(a){var d=g+"_error";c(this).data(d,!0),j.length===j.filter(function(){return!0===c(this).data(d)}).length&&b._done(a)}):this._$element.is("["+d+"]")&&(this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d)[this._busy?"on":"one"]("error."+this._id_event,b._done),m=!0),m&&this._element.load(),this._$element[this._busy?"on":"one"]("loadedmetadata."+this._id_event,function(){if(!0!==b._settings.playthrough&&"full"!==b._settings.playthrough&&b._done(new Event("load")),"full"===b._settings.playthrough){var a=setInterval(function(){var d=0<b._element.readyState&&!b._element.duration;d||k(b._element)?(b._element.currentTime=0,!d&&!b._busy&&b._element.paused&&c(b._element).is("[autoplay]")&&b._element.play(),clearInterval(a),b._done(new Event(d?"error":"load"))):(!b._element.paused&&b._element.pause(),!b._busy&&(b._element.currentTime+=2))},500);b._$element.data(b._id_event,a)}})[this._busy?"on":"one"]("canplay."+this._id_event,function(){"full"!==b._settings.playthrough||0!==this.currentTime||k(this)||this.currentTime++})[this._busy?"on":"one"]("canplaythrough."+this._id_event,function(){!0===b._settings.playthrough&&b._done(new Event("load"))})}else return!1;return this._busy||this._$element.data(g,this._id_event),this._resource=this._element.currentSrc||this._element.src,!this._busy}},{key:"abort",value:function(){if(this._$element.off("."+this._id_event),!n(this._element)){var a=this._$element.attr("srcset"),b=this._$element.attr("src");void 0!==a&&this._$element.data(this._settings.srcAttr,a).attr(this._settings.srcAttr,a).removeAttr("src").removeAttr("srcset"),void 0!==b&&this._$element.data(this._settings.srcsetAttr,b).attr(this._settings.srcsetAttr,b).removeAttr("src").removeAttr("srcset")}}},{key:"done",value:function(a){c.isFunction(a)&&(this._callback=function(b,c,d){a.call(this,b,c,d)})}},{key:"resource",set:function(a){var d=m(a.resource),e="string"==typeof a.resource;if(d||e){if(this._id=a.id,this._format=p(a.resource).format,e){var f="image"===this._format;this._element=b.createElement(f?"img":this._format),f&&(this._settings.srcsetAttr="data-srcset"),this._settings.srcAttr="data-src",this._resource=a.resource}d&&(this._element=a.resource),this._$element=c(this._element),e&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),this._id_event=this._$element.data(g),this._busy=void 0!==this._id_event,this._id_event=this._busy?this._id_event:g+"_unique_"+this._element.tagName+"_"+k()}}}]),d}(),r=function(){function a(b,d){_classCallCheck(this,a);var e=this;if(this._collection=[],this._collection_loaded=[],this._collection_instances=[],this._resources_loaded=[],c.isArray(b)&&("string"==typeof b[0]||m(b[0])))for(var f in b)b.hasOwnProperty(f)&&this._collection.push({id:k(),resource:b[f]});("string"==typeof b||m(b))&&this._collection.push({id:k(),resource:b}),this._settings=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",playthrough:!1,visible:!1},d),this.percentage=0,this._callback=c.noop,this._progress=c.noop,this._abort=!1,this._loaded=0,this._complete=!1,this._busy=!1,this._loop=function a(){return setTimeout(function(){e.loop()},25),a}()}return _createClass(a,[{key:"loop",value:function(){for(var a,b=this,d=this,e=!0===this._settings.sequential,f=function(a){if(b._abort)return"break";var f=b._collection[a].id,g=d._collection_instances.findIndex(function(a){return a.id===f}),h=new q(b._settings);-1===g?(b._collection_instances.push({id:f,instance:h}),g=d._collection_instances.findIndex(function(a){return a.id===f})):b._collection_instances[g].instance=h,h.resource=b._collection[a],h.done(function(a,b,f){if(!d._complete&&!d._abort&&-1===c.inArray(f,d._collection_loaded)){d._collection_loaded.push(f),d._busy=!1,d._loaded++,d.percentage=100*(d._loaded/d._collection.length),d.percentage=parseFloat(d.percentage.toFixed(4));var g={resource:b,status:a};if(d._resources_loaded.push(g),d._progress.call(this,g),e){var h=d._collection_instances.findIndex(function(a){return a.id===f})+1;0<h&&h<d._collection_instances.length&&(h=d._collection_instances[h],h.instance.process())}}d._complete||d._abort||d._loaded!==d._collection.length||(d._callback.call(d,d._resources_loaded),d._complete=!0)}),e&&(!e||b._busy)||(b._busy=h.process())},g=0;g<this._collection.length&&(a=f(g),"break"!==a);g++);}},{key:"done",value:function(a){if(!c.isFunction(a))return!1;var b=function(b){a.call(this,b)};return this._collection.length?(this._callback=b,this._loop()):b(),!0}},{key:"progress",value:function(a){if(!c.isFunction(a))return!1;return!!this._collection.length&&(this._progress=function(b){a.call(this,b)},this._loop(),!0)}},{key:"abort",value:function(){for(var a in this._collection_instances)this._collection_instances[a].instance.abort();this._collection.length&&(this._abort=!0)}}]),a}(),s=function(){function a(b,d){_classCallCheck(this,a),this._$element=b,this._element=b[0],this._settings=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",backgrounds:!1,attributes:[]},d)}return _createClass(a,[{key:"collect",value:function(a){var b=[],d="plain"===a,e=this,f="img, video, audio",g=f+", picture, source",h=this._$element.find(f);if(this._$element.is(f)&&(h=h.add(this._$element)),h=h.filter(function(){var a="["+e._settings.srcAttr+"], ["+e._settings.srcsetAttr+"]";return c(this).is(a)||c(this).children(g).filter(a).length}),h.each(function(){var a={element:this,resource:c(this).attr(e._settings.srcAttr)||c(this).attr(e._settings.srcsetAttr)};d&&(a=a.element),b.push(a)}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(g).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){var a={element:this,resource:c(this).css("background-image").replace(/url\("|url\('|url\(|(("')\)$)/igm,"")};d&&(a=a.resource),b.push(a)}),this._settings.attributes.length){var i=function(a){if(this._settings.attributes.hasOwnProperty(a)&&(this._$element.find("["+a+"]:not("+g+")").each(function(){let e={element:this,resource:c(this).attr(a)};d&&(e=e.resource),b.push(e)}),this._$element.is("["+a+"]")&&!this._$element.is(g))){let c={element:this._element,resource:this._$element.attr(a)};d&&(c=c.resource),b.push(c)}};for(const a in this._settings.attributes)i(a)}return b}}]),a}();c[e]=r;var t=[];c.fn[e]=function(a){var b=a;"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",visible:!1,sequential:!1,backgrounds:!1,extraAttrs:[],playthrough:!1,early:!1,earlyTimeout:0,onProgress:c.noop,onLoad:c.noop,onError:c.noop,onComplete:c.noop},a),e=d.onComplete;return c.isFunction(b)&&(e=b),c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=this,b=c(a),l=new s(b,d).collect("plain"),m=g+"_"+k(),n=new r(l,d);if(t.push({id:m,instance:n,element:a,timeout:null}),n.progress(function(e){b.trigger(f+"Progress."+f,[a,e]),c.isFunction(d.onProgress)&&d.onProgress.call(a,n,e);var g=h(e.status);c.isFunction(d["on"+g])&&d["on"+g].call(a,n,e)}),n.done(function(g){for(var h in b.trigger(f+"Complete."+f,[a,g]),e.call(a,n,g),d.visible&&c(c.nite&&"scroll"in c.nite?i:j).off("scroll."+m),t=t.filter(function(a){return a.id!==m}),t){var k=t[h];b.is(k.element)&&k.instance.loop()}}),d.visible)if(c.nite&&"scroll"in c.nite)c.nite.scroll(m,function(){n.loop()},{fps:25});else{var o=function(a,b){var c=Date.now();return function(){0>c+b-Date.now()&&(a(),c=Date.now())}};j.on("scroll."+m,o(function(){n.loop()},1e3))}if(!0===d.early)for(var p in t)if(t[p].id===m){var q=function(){var a=t[p];return clearTimeout(a.timeout),a.timeout=setTimeout(function(){a.instance._settings.visible=!1,a.instance._settings.sequential=!0,a.instance.loop()},c.isNumeric(d.earlyTimeout)?parseInt(d.earlyTimeout):0),"break"}();if("break"===q)break}})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
