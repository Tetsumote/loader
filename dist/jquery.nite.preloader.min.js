'use strict';(function(a,b,c){'use strict';if(!c)return console.error('jQuery is needed for $.fn.niteCrop() to work!'),void 0;var d=function(){this.image=function(a){a()},this.audio=function(a){a()},this.video=function(a){a()},this.iframe=function(a){a()}},e=function(){return{type:'audio',extension:'mp3'}},f=function(a){var b=[];c.isArray(a)&&(b=a),'string'==typeof a&&b.push(a);var f=c.extend(!0,{pipeline:!1,playthrough:!1},{}),g=c.noop(),h=c.noop(),j=!1,k=b.length;if(!0!==f.pipeline)for(var l=0;l<k&&!j;l++){var i=b[l],m=e(i);d[m](function(){})}else{var n=null,o=-1,p=function a(){o++,n=b[o];var c=e(n);d[c](function(){j||a()})};p()}this.done=function(a){if(c.isFunction(a)){var b=this;g=function(){a.call(b)}}},this.progress=function(a){if(c.isFunction(a)){var b=this;h=function(){a.call(b)}}},this.abort=function(){j=!0}},g=function(a){var b=c();if('string'!=typeof a)return!1;try{b=c(a)}catch(a){return!1}return b.length};c.nitePreload=f,c.niteLazyload=function(a){return c.nite&&'inViewport'in c.nite&&'scroll'in c.nite?void c.nite.scroll('nitePreloader',function(){c(g(a)?a:'[data-nite-src]').inViewport().nitePreload(function(){})},{fps:25}):void console.log('nite is needed, maybe outdated?')};var h=function(a,b,d){var e=[],f=function(a){if(a&&'string'==typeof a){d&&(a=a.replace(/url\(\"|url\(\'|url\(|((\"|\')\)$)/igm,''));var b='_'+Math.round(new Date().getTime()+100*Math.random())+'_';for(var f in a=a.replace(new RegExp('('+formats.image+'|'+formats.audio+'|'+formats.video+')(s|$|,)','igm'),function(a,c){return c+b}).split(new RegExp(b,'igm')),a)-1<c.inArray(e)&&e.push(a[f])}};return a.find('*').addBack().filter(function(){return'none'!==c(this).css('background-image')}).each(function(){f(c(this).css('background-image'))}),d&&a.find('*').addBack().filter(function(){return'none'!==c(this).css('background-image')}).each(function(){f(c(this).css('background-image'))}),e};c.nitePreloaderFinder=h,c.fn.nitePreload=function(a,b){c.isFunction(a)&&void 0===b&&(b=a,a={});var d=['src','data-src','srcset','data-nite-src'],e=c.extend(!0,{pipeline:!1,attributes:d,backgrounds:!1,playthrough:!1},a);return c.isArray(e.attributes)||(e.attributes=d),'string'==typeof e.attributes&&(e.attributes=e.attributes.split(' ')),this.each(function(){var a=c(this),d=a.data('nitePreloader');void 0!==d&&d.abort(),d=new f(h(a,e.attributes,!0===e.backgrounds)),d.progress(function(){}),d.done(function(){b.call(a[0])}),a.data('nitePreloader',d)})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
