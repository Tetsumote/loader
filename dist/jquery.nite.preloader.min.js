"use strict";var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";var d=Math.floor,f="nite",e=f+"Preload",g=e+"er";if(!c)return function(b,c){if(a.console){var d=a.console.log;1===c?a.console.warn&&(d=a.console.warn):2===c?a.console.error&&(d=a.console.error):void 0,d(b)}}("jQuery is needed for "+g+" to work!",2),void 0;var h=c(b),i=c(a),j=function(){return c.nite?c.nite.uniqueId():d(Math.random()*8999)+1e3},k=function(a){var b=c(a),d=!1;if(c.nite)d=c.nite.inViewport(a).ratio;else{var e=a.getBoundingClientRect();d=!(0>e.right||0>e.bottom||e.left>i.width()||e.top>i.height())}return d&&b.is(":visible")&&"hidden"!==b.css("visibility")},l=function(a){if("object"!==("undefined"==typeof a?"undefined":_typeof(a)))return!1;try{return a instanceof HTMLElement}catch(b){return 1===a.nodeType&&"object"===_typeof(a.style)&&"object"===_typeof(a.ownerDocument)}},m=function(a){return l(a)&&(a.complete&&1<=d(a.naturalWidth)&&1<=d(a.naturalHeight)||2<=a.readyState&&0!==a.videoWidth&&0!==a.videoHeight)},n=function(a,b){var d={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},e=Object.keys(d),f={format:null,extension:null};if("string"==typeof a){if(a=a.split("?")[0],a=a.split("#")[0],""===a)return!1;var g=void 0===b?e:[b];for(var h in g)if(g.hasOwnProperty(h)&&new RegExp("(.("+d[g[h]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var i=a.match(new RegExp("^data:"+g[h]+"/("+d[g[h]]+")","g"));if(!i||null===i)continue;i=i[0],f.format=i.replace("data:"+g[h]+"/g","");break}else{var j=a.match(new RegExp(d[g[h]],"g"));if(j){f.format=g[h],f.extension=j[0];break}}}if(l(a)){var k=a.tagName.toLowerCase();-1<c.inArray(k,e)&&(f.format=a.tagName.toLowerCase()),"img"===k&&(f.format="image")}return f},o=function(){function d(a){_classCallCheck(this,d);var b=this;this._settings=c.extend(!0,{playthrough:!1,srcsetAttr:"data-srcset",srcAttr:"data-src",visible:!1},a),this._id=null,this._id_event=null,this._element=null,this._$element=c(),this._resource=null,this._process=!1,this._format=null,this._callback=c.noop,this._done=function(a){if(!b._process){var c=a.type.charAt(0).toUpperCase()+a.type.slice(1);b._$element.trigger(f+c+"."+f,[b._$element])}b._callback.call(null,b._id,b._element.currentSrc||b._element.src)}}return _createClass(d,[{key:"process",value:function(){if(!this._settings.visible||k(this._element)){var b=this,d=this._settings.srcAttr,e=this._settings.srcAttr.replace("data-","");if(m(this._element))this._process||this._$element.off("."+this._id_event),this._done(new Event(c.isNumeric(this._element.naturalWidth)?f+"Load":f+"Error"));else{if("image"===this._format){this._$element[this._process?"on":"one"]("load."+this._id_event+" error."+this._id_event,this._done);var h=this._$element.closest("picture"),i=this._settings.srcsetAttr,j=this._settings.srcsetAttr.replace("data-","");h.length&&"HTMLPictureElement"in a?(this._$element.removeData(j).removeAttr(i).removeData(e).removeAttr(d),h.find("source["+i+"]").attr("srcset",h.data(j)).removeData(j).removeAttr(i)):(this._$element.is("["+i+"]")&&this._$element.attr("srcset",this._$element.data(j)).removeData(j).removeAttr(i),this._$element.is("["+d+"]")&&this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d))}if("video"===this._format||"audio"===this._format){var l=this._$element.find("source"),n=function(a){var b=Math.round;return a.buffered.length&&1==b(a.buffered.end(0))/b(a.seekable.end(0))},o=!1;l.length?l.each(function(){c(this).is("["+d+"]")&&(c(this).attr("src",c(this).data(e)).removeData(e).removeAttr(d),o=!0)})[this._process?"on":"one"]("error."+this._id_event,function(a){var d=g+"_error";c(this).data(d,!0),l.length===l.filter(function(){return!0===c(this).data(d)}).length&&b._done(a)}):this._$element.is("["+d+"]")&&(this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d)[this._process?"on":"one"]("error."+this._id_event,b._done),o=!0),o&&this._element.load(),this._$element[this._process?"on":"one"]("loadedmetadata."+this._id_event,function(){!0!==b._settings.playthrough&&"full"!==b._settings.playthrough&&b._done(new Event("load"))})[this._process?"on":"one"]("canplay."+b._id_event,function(){"full"!==b._settings.playthrough||0!==this.currentTime||n(this)||this.currentTime++})[this._process?"on":"one"]("progress."+b._id_event,function(){if("full"===b._settings.playthrough){var a=this;setTimeout(function(){0<a.readyState&&!a.duration?b._done(new Event("error")):n(a)?(a.currentTime=0,!b._process&&a.paused&&c(a).is("[autoplay]")&&a.play(),b._done(new Event("load"))):(!a.paused&&a.pause(),!b._process&&(a.currentTime+=2))},25)}})[this._process?"on":"one"]("canplaythrough."+this._id_event,function(){!0===b._settings.playthrough&&b._done(new Event("load"))})}this._process||this._$element.data(g,this._id_event)}this._resource=this._element.currentSrc||this._element.src}}},{key:"abort",value:function(){if(this._$element.off("."+this._id_event),!m(this._element)){var a=this._$element.attr("srcset"),b=this._$element.attr("src");void 0!==a&&this._$element.data(this._settings.srcAttr,a).attr(this._settings.srcAttr,a).removeAttr("src").removeAttr("srcset"),void 0!==b&&this._$element.data(this._settings.srcsetAttr,b).attr(this._settings.srcsetAttr,b).removeAttr("src").removeAttr("srcset")}}},{key:"done",value:function(a){if(c.isFunction(a)){var b=this;this._callback=function(c){a.call(b,c)}}}},{key:"resource",set:function(a){var d=l(a.resource),e="string"==typeof a.resource;if(d||e){if(this._id=a.id,this._format=n(a.resource).format,e){var f="image"===this._format;this._element=b.createElement(f?"img":this._format),f&&(this._settings.srcsetAttr="data-srcset"),this._settings.srcAttr="data-src",this._resource=a.resource}d&&(this._element=a.resource),this._$element=c(this._element),e&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),this._id_event=this._$element.data(g),this._process=void 0!==this._id_event,this._id_event=this._process?this._id_event:g+"_unique_"+j()}}}]),d}(),p=function(){function a(b,d){if(_classCallCheck(this,a),this._collection=[],this._collection_loaded=[],this._collection_instances=[new o(this._settings)],c.isArray(b)&&("string"==typeof b[0]||l(b[0])))for(var e in b)b.hasOwnProperty(e)&&this._collection.push({id:j(),resource:b[e]});("string"==typeof b||l(b))&&this._collection.push({id:j(),resource:b}),this._settings=c.extend(!0,{sequential:!1},d),this.percentage=0,this._callback=c.noop(),this._progress=c.noop(),this._abort=!1,this._complete=!1,this._loaded=0,this.loop()}return _createClass(a,[{key:"loop",value:function(){var a=this;if(this._collection.length){if(!0===this._complete)return void a._callback.call(null);for(var b,d=0;d<this._collection.length&&!this._abort;d++)b=new o(this._settings),this._collection_instances.push(b),b.resource=this._collection[d],b.process(),b.done(function(b,d){-1===c.inArray(b,a._collection_loaded)&&(a._loaded++,a._collection_loaded.push(b),a.percentage=100*(a._loaded/a._collection.length),a._progress.call(null,d)),a._loaded>a._collection.length||a._abort||a._loaded===a._collection.length&&(a._callback.call(null),a._complete=!0)})}}},{key:"done",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(){a.call(b)};return this._collection.length?this._callback=d:d(),!0}},{key:"progress",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(c){a.call(b,c)};return this._collection.length?this._progress=d:d(),!0}},{key:"abort",value:function(){for(var a in this._collection_instances)this._collection_instances[a].abort();this._collection.length&&(this._abort=!0)}}]),a}(),q=function(){function a(b,c){_classCallCheck(this,a),this._$element=b,this._settings=c}return _createClass(a,[{key:"collect",value:function(){var a=[],b="img, video, audio",d=b+", picture, source",e=this._$element.find(b);if(this._$element.is(b)&&e.add(this._$element),e.each(function(){a.push(this)}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(d).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){a.push(c(this).css("background-image").replace(/url\("|url\('|url\(|(("')\)$)/igm,""))}),this._settings.attributes.length){var f=function(b){this._settings.attributes.hasOwnProperty(b)&&(this._$element.find("["+b+"]:not("+d+")").each(function(){a.push(c(this).attr(b))}),this._$element.is("["+b+"]")&&!this._$element.is(d)&&a.push(this._$element.attr(b)))};for(const a in this._settings.attributes)f(a)}return a}}]),a}();c[e]=p,c.fn[e]=function(a,b){c.isFunction(a)&&(b=a),c.isFunction(b)||(b=c.noop),"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",visible:!1,sequential:!1,backgrounds:!1,extraAttrs:[],playthrough:!1},a);return c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=!1,e=this,k=c(e),l=new q(k,d).collect(),m=g+"_"+j(),n=function(){c.nite?h.off("scroll."+m):i.off("scroll."+m),k.removeData(g),a=!0},o=k.data(g);if(void 0!==o&&(o.abort(),n()),o=new p(l,d),o.progress(function(){k.trigger(f+"Progress."+f,[k])}),o.done(function(){a||(n(),k.trigger(f+"Load."+f,[k]),b.call(e),b=c.noop)}),k.data(g,o),d.visible)if(c.nite)c.nite.scroll(m,function(){o.loop()},{fps:25});else{var r=function(a,b){var c=Date.now();return function(){0>c+b-Date.now()&&(a(),c=Date.now())}};i.on("scroll."+m,r(function(){o.loop()},1e3))}})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
