"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";if(!c)return console.error("jQuery is needed for $.fn.nitePreload(), $.nitePreload, $.niteLazyLoad to work!"),void 0;var d="nite",f=d+"Preload",g=d+"er",h=c(b),i=function(a){var b=c();if("string"!=typeof a)return!1;try{b=c(a)}catch(a){return!1}return b.length},j=function(){function a(){_classCallCheck(this,a),this._resource=null,this._$resource=c(),this._type=null,this._instance=null,this._processed=!1,this.callback=function(a){this._processed||(this._$resource.trigger(a.type+"."+d),h.trigger(a.type+"."+d,[this._$resource]))}}return _createClass(a,[{key:"complete",value:function(a){switch(this._type){case"image":this._$resource[this._processed?"on":"one"]("load."+this._instance+" error."+this._instance,function(b){this.callback(b,a)});var b=this._$resource.closest("picture");b.length?(this._$resource.removeData("srcset").removeAttr("data-srcset").removeData("src").removeAttr("data-src"),b.find("source[data-srcset]").attr("srcset",b.data("srcset")).removeData("srcset").removeAttr("data-srcset")):(this._$resource.is("[data-srcset]")&&this._$resource.attr("srcset",this._$resource.data("srcset")).removeData("srcset").removeAttr("data-srcset"),this._$resource.is("[data-src]")&&this._$resource.attr("src",this._$resource.data("src")).removeData("src").removeAttr("data-src")),!0===this._resource.complete&&0!==this._resource.naturalWidth&&0!==this._resource.naturalHeight&&(!this._processed&&this._$resource.off("."+this._instance),this.callback(new Event(void 0===this._resource.naturalWidth?"error":"load"),a));break;case"media":break;case"iframe":}this._processed||this._$resource.data(g,this._instance)}},{key:"resource",set:function(a){"string"==typeof a,"object"===("undefined"==typeof a?"undefined":_typeof(a))&&"element"in a&&(this._resource=a.element,this._type=a.type),this._$resource=c(this._resource),this._instance=this._$resource.data(g),this._processed=void 0!==this._instance,this._instance=this._processed?this._instance:g+"_unique_"+(c.nite?c.nite.uniqueId():Math.random(1e3,9999))}}]),a}(),k=function(){function a(b,d){if(_classCallCheck(this,a),this._collection=[],c.isArray(b)&&("string"==typeof b[0]||"object"===_typeof(b[0])&&"subject"in b[0])&&(this._collection=b),"string"==typeof b&&this._collection.push(b),this._settings=c.extend(!0,{sequential:!1,pipelineDelay:0,playthrough:!1},d),this._callback=c.noop(),this._progress=c.noop(),this._abort=!1,this._collection.length)if(!0!==this._settings.sequential)for(var f,g=0;g<this._collection.length&&!this._abort;g++)f=new j,f.resource=this._collection[g],f.complete(function(){this._abort});else{var h=-1,i=function a(){h++;var b=new j;b.resource=this._collection[h],b.complete(function(){this._abort||setTimeout(a,c.isNumeric(this._settings.pipelineDelay)?parseInt(this._settings.pipelineDelay):0)})};i()}}return _createClass(a,[{key:"done",value:function(a){if(c.isFunction(a)){var b=this,d=function(){a.call(b)};this.collection.length?this._callback=d:d()}}},{key:"progress",value:function(a){if(c.isFunction(a)){var b=this,d=function(){a.call(b)};this._collection.length?this._progress=d:d()}}},{key:"abort",value:function(){this._collection.length&&(this._abort=!0)}}]),a}();c[f]=k,c.fn[f]=function(a,b){c.isFunction(a)&&(b=a),c.isFunction(b)||(b=c.noop),"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=["src","data-src","srcset","data-nite-src"],f=c.extend(!0,{sequential:!1,pipelineDelay:0,attributes:d,backgrounds:!1,playthrough:!1},a);return c.isArray(f.attributes)||(f.attributes=d),"string"==typeof f.attributes&&(f.attributes=f.attributes.split(" ")),this.each(function(){var a=this,d=c(a),h=d.data(g);void 0!==h&&h.abort();var i=[],j="img, video, audio, iframe",l=j+", picture, source";if(i.concat(d.find(j).toArray()),d.is(j)&&i.add(d[0]),!0===f.backgrounds&&d.find("*").addBack().not(l).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){i.push(c(this).css("background-image").replace(/url\(\"|url\(\'|url\(|((\"|\')\)$)/igm,""))}),f.attributes.length){var m=function(a){d.find("["+a+"]:not("+l+")").each(function(){i.push(c(this).attr(a))}),d.is("["+a+"]")&&!d.is(l)&&i.add(d.attr(a))};for(let a in f.attributes)m(a)}h=new k(i,f),h.progress(function(){}),h.done(function(){b.call(a)}),d.data(g,h)})},c[d+"Lazyload"]=function(a){return c.nite&&"inViewport"in c.nite&&"scroll"in c.nite?void c.nite.scroll(g,function(){c(i(a)?a:"[data-nite-src]").inViewport()[f](function(){var a=c(this);a.trigger(e.type+"."+d+"LazyLoad"),h.trigger(e.type+"."+d+"LazyLoad",[a])})},{fps:25}):void console.log("A recent version of $.nite is needed.")}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
