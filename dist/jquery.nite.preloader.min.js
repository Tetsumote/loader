"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}();function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";if(!c)return console.error("jQuery is needed for $.fn.nitePreload(), $.nitePreload, $.niteLazyLoad to work!"),void 0;var d="nite",f=d+"Preload",g=d+"er",h=c(b),i=function(a){var b=c();if("string"!=typeof a)return!1;try{b=c(a)}catch(a){return!1}return b.length},j=function(a,b){if(a=a.toLowerCase().split("?")[0],""===a)return!1;var c={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},d=void 0===b?Object.keys(c):[b],f={format:null,extension:null};for(var g in d)if(new RegExp("(.("+c[d[g]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var h=a.match(new RegExp("^data:"+d[g]+"/("+c[d[g]]+")","g"));if(!h||null===h){console.warn(a+": base64 "+d[g]+" format not recognized.");continue}h=h[0],f={format:h.replace("data:"+d[g]+"/g",""),extension:"base64"};break}else{var i=a.match(new RegExp(c[d[g]],"g"));if(i){f={format:d[g],extension:i[0]};break}}return f},k=function(){function a(b){_classCallCheck(this,a);var f=this;this._settings=b,this._element=null,this._$element=c(),this._resource=null,this._format=null,this._instance=null,this._processed=!1,this._callback=c.noop,this._done=function(a){f._callback.call(null,f._resource),f._processed||(f._$element.trigger(a.type+"."+d),h.trigger(a.type+"."+d,[this._$element]))}}return _createClass(a,[{key:"abort",value:function(){this._$element.filter("[src], [srcset]").data(this._settings.srcsetAttr,this._$element.attr("srcset")).data(this._settings.srcAttr,this._$element.attr("src")).attr(this._settings.srcsetAttr,this._$element.attr("srcset")).attr(this._settings.srcAttr,this._$element.attr("src")).removeAttr("src").removeAttr("srcset").end().off("load."+this._instance+" error."+this._instance)}},{key:"done",value:function(a){if(c.isFunction(a)){var b=this;this._callback=function(c){console.log(c),a.call(b,c)}}}},{key:"resource",set:function(a){var d="object"===("undefined"==typeof a?"undefined":_typeof(a))&&"standard"in a,f=d&&!0===a.standard,h="string"==typeof a;if(!d&&!h)return!1;this;switch((h||!f)&&(this._format=j(a).format,this._element="image"===this._format?new Image:b.createElement(this._format),this._settings.srcsetAttr="data-srcset",this._settings.srcAttr="data-src",this._resource=a),this._$element=c(this._element),(h||!f)&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),!h&&f&&(this._element=a.element,this._format=a.format,this._$element=c(this._element)),this._instance=this._$element.data(g),this._processed=void 0!==this._instance,this._instance=this._processed?this._instance:g+"_unique_"+(c.nite?c.nite.uniqueId():Math.random(1e3,9999)),this._format){case"image":this._$element[this._processed?"on":"one"]("load."+this._instance+" error."+this._instance,this._done);var i=this._$element.closest("picture"),k=this._settings.srcAttr,l=this._settings.srcAttr.replace("data-",""),m=this._settings.srcsetAttr,n=this._settings.srcsetAttr.replace("data-","");i.length?(this._$element.removeData(n).removeAttr(m).removeData(l).removeAttr(k),i.find("source[data-srcset]").attr("srcset",i.data("srcset")).removeData(n).removeAttr(m)):(this._$element.is("[data-srcset]")&&this._$element.attr("srcset",this._$element.data("srcset")).removeData(n).removeAttr(m),this._$element.is("[data-src]")&&this._$element.attr("src",this._$element.data("src")).removeData(l).removeAttr(k)),this._resource=this._element.currentSrc||this._element.src,!0===this._element.complete&&0!==this._element.naturalWidth&&0!==this._element.naturalHeight&&(!this._processed&&this._$element.off("."+this._instance),this._done.call(new Event(void 0===this._element.naturalWidth?"error":"load")));break;case"media":break;case"iframe":}this._processed||this._$element.data(g,this._instance)}}]),a}(),l=function(){function a(b,d){var f=this;_classCallCheck(this,a);var g=this;if(this._collection=[],c.isArray(b)&&("string"==typeof b[0]||"object"===_typeof(b[0])&&"subject"in b[0])&&(this._collection=b),"string"==typeof b&&this._collection.push(b),this._settings=c.extend(!0,{sequential:!1,pipelineDelay:0,playthrough:!1},d),this.percentage=0,this._callback=c.noop(),this._progress=c.noop(),this._abort=!1,this._load_instances=[new k(this._settings)],this._collection.length)if(!0!==this._settings.sequential)(function(){for(var a,b=0,c=0;c<f._collection.length&&!f._abort;c++)a=new k(f._settings),f._load_instances.push(a),a.resource=f._collection[c],a.done(function(a){b++,g.percentage=100*(b/g._collection.length),g._progress.call(null,a),b>g._collection.length||g._abort||b===g._collection.length&&g._callback.call(null)})})();else{var h=-1,i=function a(){h++,h>this._collection.length||this._abort||(h===this._collection.length&&this._callback.call(null),this._load_instances[0].resource=this._collection[h],this._load_instances[0].done(function(b){g.percentage=100*(h/g._collection.length),g._progress.call(null,b),setTimeout(a,c.isNumeric(this._settings.pipelineDelay)?parseInt(this._settings.pipelineDelay):0)}))};i()}}return _createClass(a,[{key:"done",value:function(a){if(c.isFunction(a)){var b=this,d=function(){a.call(b)};this._collection.length?this._callback=d:d()}}},{key:"progress",value:function(a){if(c.isFunction(a)){var b=this,d=function(c){a.call(b,c)};this._collection.length?this._progress=d:d()}}},{key:"abort",value:function(){for(var a in this._load_instances)this._load_instances[a].abort();this._collection.length&&(this._abort=!0)}}]),a}(),m=function(){function a(b,c){_classCallCheck(this,a),this._$element=b,this._settings=c}return _createClass(a,[{key:"collect",value:function(){var a=[],b="img, video, audio, iframe",d=b+", picture, source",f=this._$element.find(b);if(this._$element.is(b)&&f.add($element),f.each(function(){a.push({element:this,resource:this.currentSrc||this.src,standard:!0})}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(d).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){a.push({element:this,resource:c(this).css("background-image").replace(/url\(\"|url\(\'|url\(|((\"|\')\)$)/igm,""),standard:!1})}),this._settings.attributes.length){var g=function(b){this._$element.find("["+b+"]:not("+d+")").each(function(){a.push({element:this,resource:c(this).attr(b),standard:!1})}),this._$element.is("["+b+"]")&&!this._$element.is(d)&&a.add({element:this,resource:this._$element.attr(b),standard:!1})};for(let a in this._settings.attributes)g(a)}return a}}]),a}();c[f]=l,c.fn[f]=function(a,b){c.isFunction(a)&&(b=a),c.isFunction(b)||(b=c.noop),"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",sequential:!1,pipelineDelay:0,extraAttrs:[],backgrounds:!1,playthrough:!1},a);return c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=this,f=c(a),h=f.data(g);void 0!==h&&h.abort(),h=new l(new m(f,d).collect(),d),h.progress(function(){}),h.done(function(){b.call(a)}),f.data(g,h)})},c[d+"Lazyload"]=function(a){return c.nite&&"inViewport"in c.nite&&"scroll"in c.nite?void c.nite.scroll(g,function(){c(i(a)?a:"[data-nite-src]").inViewport()[f](function(){var a=c(this);a.trigger(e.type+"."+d+"LazyLoad"),h.trigger(e.type+"."+d+"LazyLoad",[a])})},{fps:25}):void console.log("A recent version of $.nite is needed.")}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
