"use strict";var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";var d=Math.floor;if(!c)return function(b,c){if(a.console){var d=a.console.log;1===c?a.console.warn&&(d=a.console.warn):2===c?a.console.error&&(d=a.console.error):void 0,d(b)}}("jQuery is needed for nitePreloader to work!",2),void 0;var f="nite",e=f+"Preload",g=f+"er",h=c(b),i=c(a),j=function(){return c.nite?c.nite.uniqueId():d(Math.random()*8999)+1e3},k=function(a){var b=c(a),d=!1;if(c.nite)d=c.nite.inViewport(a).ratio;else{var e=a.getBoundingClientRect();d=!(0>e.right||0>e.bottom||e.left>i.width()||e.top>i.height())}return d&&b.is(":visible")&&"hidden"!==b.css("visibility")},l=function(a){return a.complete&&1<=d(a.naturalWidth)&&1<=d(a.naturalHeight)||2<=a.readyState&&0!==a.videoWidth&&0!==a.videoHeight},m=function(a){if("object"!==("undefined"==typeof a?"undefined":_typeof(a)))return!1;try{return a instanceof HTMLElement}catch(b){return 1===a.nodeType&&"object"===_typeof(a.style)&&"object"===_typeof(a.ownerDocument)}},n=function(a,b){var d={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},e=Object.keys(d),f={format:null,extension:null};if("string"==typeof a){if(a=a.split("?")[0],a=a.split("#")[0],""===a)return!1;var g=void 0===b?e:[b];for(var h in g)if(g.hasOwnProperty(h)&&new RegExp("(.("+d[g[h]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var i=a.match(new RegExp("^data:"+g[h]+"/("+d[g[h]]+")","g"));if(!i||null===i)continue;i=i[0],f.format=i.replace("data:"+g[h]+"/g","");break}else{var j=a.match(new RegExp(d[g[h]],"g"));if(j){f.format=g[h],f.extension=j[0];break}}}if(m(a)){var k=a.tagName.toLowerCase();-1<c.inArray(k,e)&&(f.format=a.tagName.toLowerCase()),"img"===k&&(f.format="image")}return f},o=function(){function a(b){_classCallCheck(this,a);var d=this;this._settings=c.extend(!0,{playthrough:!1,srcsetAttr:"data-srcset",srcAttr:"data-src",visible:!1},b),this._id=null,this._id_event=null,this._element=null,this._$element=c(),this._resource=null,this._process=!1,this._format=null,this._callback=c.noop,this._done=function(a){if(d._callback.call(null,d._id,d._element.currentSrc||d._element.src),!d._process){var b=a.type.charAt(0).toUpperCase()+a.type.slice(1);d._$element.trigger(f+b+"."+f,[d._$element])}}}return _createClass(a,[{key:"process",value:function(){if(l(this._element))this._process||this._$element.off("."+this._id_event),this._done(new Event(c.isNumeric(this._element.naturalWidth)?f+"Load":f+"Error"));else{if("image"===this._format){this._$element[this._process?"on":"one"]("load."+this._id_event+" error."+this._id_event,this._done);var a=this._$element.closest("picture"),b=this._settings.srcAttr,d=this._settings.srcAttr.replace("data-",""),e=this._settings.srcsetAttr,h=this._settings.srcsetAttr.replace("data-","");a.length?(this._$element.removeData(h).removeAttr(e).removeData(d).removeAttr(b),a.find("source["+e+"]").attr("srcset",a.data(h)).removeData(h).removeAttr(e)):(this._$element.is("["+e+"]")&&this._$element.attr("srcset",this._$element.data(h)).removeData(h).removeAttr(e),this._$element.is("["+b+"]")&&this._$element.attr("src",this._$element.data(d)).removeData(d).removeAttr(b))}"video"!==this._format&&"audio"!==this._format,this._process||this._$element.data(g,this._id_event)}this._resource=this._element.currentSrc||this._element.src}},{key:"abort",value:function(){if(this._$element.off("."+this._id_event),!l(this._element)){var a=this._$element.attr("srcset"),b=this._$element.attr("src");void 0!==a&&this._$element.data(this._settings.srcAttr,a).attr(this._settings.srcAttr,a).removeAttr("src").removeAttr("srcset"),void 0!==b&&this._$element.data(this._settings.srcsetAttr,b).attr(this._settings.srcsetAttr,b).removeAttr("src").removeAttr("srcset")}}},{key:"done",value:function(a){if(c.isFunction(a)){var b=this;this._callback=function(c){a.call(b,c)}}}},{key:"resource",set:function(a){var d=m(a.resource),e="string"==typeof a.resource;if(!d&&!e)return!1;if(this._id=a.id,this._format=n(a.resource).format,e){var f="image"===this._format;this._element=b.createElement(f?"img":this._format),f&&(this._settings.srcsetAttr="data-srcset"),this._settings.srcAttr="data-src",this._resource=a.resource}return d&&(this._element=a.resource,this._settings.visible&&!k(this._element))?!1:(this._$element=c(this._element),e&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),this._id_event=this._$element.data(g),this._process=void 0!==this._id_event,this._id_event=this._process?this._id_event:g+"_unique_"+j(),!0)}}]),a}(),p=function(){function a(b,d){_classCallCheck(this,a);var e=this;if(this._collection=[],this._collection_loaded=[],this._collection_instances=[new o(this._settings)],c.isArray(b)&&("string"==typeof b[0]||m(b[0])))for(var f in b)b.hasOwnProperty(f)&&this._collection.push({id:j(),resource:b[f]});("string"==typeof b||m(b))&&this._collection.push({id:j(),resource:b}),this._settings=c.extend(!0,{sequential:!1},d),this.percentage=0,this._callback=c.noop(),this._progress=c.noop(),this._abort=!1,this._complete=!1,this._loaded=0,this._loop=function(){if(this._collection.length){if(!0===this._complete)return void e._callback.call(null);for(var a,b=0;b<this._collection.length&&!this._abort;b++)a=new o(this._settings),this._collection_instances.push(a),a.resource=this._collection[b],a.process(),a.done(function(a,b){-1===c.inArray(a,e._collection_loaded)&&(e._loaded++,e._collection_loaded.push(a),e.percentage=100*(e._loaded/e._collection.length),e._progress.call(null,b)),e._loaded>e._collection.length||e._abort||e._loaded===e._collection.length&&(e._callback.call(null),e._complete=!0)})}},this._loop()}return _createClass(a,[{key:"loop",value:function(){this._loop()}},{key:"done",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(){a.call(b)};return this._collection.length?this._callback=d:d(),!0}},{key:"progress",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(c){a.call(b,c)};return this._collection.length?this._progress=d:d(),!0}},{key:"abort",value:function(){for(var a in this._collection_instances)this._collection_instances[a].abort();this._collection.length&&(this._abort=!0)}}]),a}(),q=function(){function a(b,c){_classCallCheck(this,a),this._$element=b,this._settings=c}return _createClass(a,[{key:"collect",value:function(){var a=[],b="img, video, audio",d=b+", picture, source",e=this._$element.find(b);if(this._$element.is(b)&&e.add(this._$element),e.each(function(){a.push(this)}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(d).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){a.push(c(this).css("background-image").replace(/url\("|url\('|url\(|(("')\)$)/igm,""))}),this._settings.attributes.length){var f=function(b){this._settings.attributes.hasOwnProperty(b)&&(this._$element.find("["+b+"]:not("+d+")").each(function(){a.push(c(this).attr(b))}),this._$element.is("["+b+"]")&&!this._$element.is(d)&&a.push(this._$element.attr(b)))};for(const a in this._settings.attributes)f(a)}return a}}]),a}();c[e]=p,c.fn[e]=function(a,b){c.isFunction(a)&&(b=a),c.isFunction(b)||(b=c.noop),"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",visible:!1,sequential:!1,backgrounds:!1,extraAttrs:[],playthrough:!1},a);return c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=this,e=c(a),k=new q(e,d).collect(),l=g+"_"+j(),m=function(){h.off("scroll."+l),i.off("scroll."+l),e.removeData(g)},n=e.data(g);if(void 0!==n&&(n.abort(),m()),n=new p(k,d),n.progress(function(){e.trigger(f+"Progress."+f,[e])}),n.done(function(){m(),e.trigger(f+"Load."+f,[e]),b.call(a),b=c.noop}),e.data(g,n),d.visible)if(c.nite)c.nite.scroll(l,function(){n.loop()},{fps:25});else{var o=function(a,b){var c=Date.now();return function(){0>c+b-Date.now()&&(a(),c=Date.now())}};i.on("scroll."+l,o(function(){n.loop()},1e3))}})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
