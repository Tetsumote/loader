"use strict";var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";var d=Math.floor;if(!c)return console.error("jQuery is needed for nitePreloader to work!"),void 0;var f="nite",e=f+"Preload",g=f+"er",h=c(b),i=c(a),j=function(){return c.nite?c.nite.uniqueId():d(Math.random()*8999)+1e3},k=function(a){var b=c(a),d=!1;if(c.nite)d=c.nite.inViewport(a).ratio;else{var e=a.getBoundingClientRect();d=!(0>e.right||0>e.bottom||e.left>i.width()||e.top>i.height())}return d&&b.is(":visible")&&"hidden"!==b.css("visibility")},l=function(a){return a.complete&&1<=d(a.naturalWidth)&&1<=d(a.naturalHeight)||2<=a.readyState&&0!==a.videoWidth&&0!==a.videoHeight},m=function(a){if("object"!==("undefined"==typeof a?"undefined":_typeof(a)))return!1;try{return a instanceof HTMLElement}catch(b){return 1===a.nodeType&&"object"===_typeof(a.style)&&"object"===_typeof(a.ownerDocument)}},n=function(a,b){var d={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},e=Object.keys(d),f={format:null,extension:null};if("string"==typeof a){if(a=a.split("?")[0],a=a.split("#")[0],""===a)return!1;var g=void 0===b?e:[b];for(var h in g)if(g.hasOwnProperty(h)&&new RegExp("(.("+d[g[h]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var i=a.match(new RegExp("^data:"+g[h]+"/("+d[g[h]]+")","g"));if(!i||null===i)continue;i=i[0],f.format=i.replace("data:"+g[h]+"/g","");break}else{var j=a.match(new RegExp(d[g[h]],"g"));if(j){f.format=g[h],f.extension=j[0];break}}}if(m(a)){var k=a.tagName.toLowerCase();-1<c.inArray(k,e)&&(f.format=a.tagName.toLowerCase()),"img"===k&&(f.format="image")}return f},o=function(){function a(b){_classCallCheck(this,a);var d=this;this._settings=c.extend(!0,{playthrough:!1,srcsetAttr:"data-srcset",srcAttr:"data-src",visible:!1},b),this._id=null,this._id_event=null,this._element=null,this._$element=c(),this._resource=null,this._process=!1,this._format=null,this._callback=c.noop,this._done=function(a){if(d._callback.call(null,d._id,d._element.currentSrc||d._element.src),!d._process){var b=a.type.charAt(0).toUpperCase()+a.type.slice(1);d._$element.trigger(f+b+"."+f,[d._$element])}}}return _createClass(a,[{key:"process",value:function(){if(l(this._element))this._process||this._$element.off("."+this._id_event),this._done(new Event(c.isNumeric(this._element.naturalWidth)?f+"Load":f+"Error"));else{if("image"===this._format){this._$element[this._process?"on":"one"]("load."+this._id_event+" error."+this._id_event,this._done);var a=this._$element.closest("picture"),b=this._settings.srcAttr,d=this._settings.srcAttr.replace("data-",""),e=this._settings.srcsetAttr,h=this._settings.srcsetAttr.replace("data-","");a.length?(this._$element.removeData(h).removeAttr(e).removeData(d).removeAttr(b),a.find("source["+e+"]").attr("srcset",a.data(h)).removeData(h).removeAttr(e)):(this._$element.is("["+e+"]")&&this._$element.attr("srcset",this._$element.data(h)).removeData(h).removeAttr(e),this._$element.is("["+b+"]")&&this._$element.attr("src",this._$element.data(d)).removeData(d).removeAttr(b))}"video"!==this._format&&"audio"!==this._format,this._process||this._$element.data(g,this._id_event)}this._resource=this._element.currentSrc||this._element.src}},{key:"abort",value:function(){if(this._$element.off("."+this._id_event),!l(this._element)){var a=this._$element.attr("srcset"),b=this._$element.attr("src");void 0!==a&&this._$element.data(this._settings.srcAttr,a).attr(this._settings.srcAttr,a).removeAttr("src").removeAttr("srcset"),void 0!==b&&this._$element.data(this._settings.srcsetAttr,b).attr(this._settings.srcsetAttr,b).removeAttr("src").removeAttr("srcset")}}},{key:"done",value:function(a){if(c.isFunction(a)){var b=this;this._callback=function(c){a.call(b,c)}}}},{key:"resource",set:function(a){var d=m(a.resource),e="string"==typeof a.resource;if(!d&&!e)return!1;if(this._id=a.id,this._format=n(a.resource).format,e){var f="image"===this._format;this._element=b.createElement(f?"img":this._format),f&&(this._settings.srcsetAttr="data-srcset"),this._settings.srcAttr="data-src",this._resource=a.resource}return d&&(this._element=a.resource,this._settings.visible&&!k(this._element))?!1:(this._$element=c(this._element),e&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),this._id_event=this._$element.data(g),this._process=void 0!==this._id_event,this._id_event=this._process?this._id_event:g+"_unique_"+j(),!0)}}]),a}(),p=function(){function a(b,d){_classCallCheck(this,a);var e=this;if(this._collection=[],this._collection_loaded=[],this._collection_instances=[new o(this._settings)],c.isArray(b)&&("string"==typeof b[0]||m(b[0])))for(var f in b)b.hasOwnProperty(f)&&this._collection.push({id:j(),resource:b[f]});("string"==typeof b||m(b))&&this._collection.push({id:j(),resource:b}),this._settings=c.extend(!0,{sequential:!1},d),this.percentage=0,this._callback=c.noop(),this._progress=c.noop(),this._abort=!1,this._complete=!1,this._loaded=0,this._loop=function(){if(this._collection.length){if(!0===this._complete)return void e._callback.call(null);for(var a,b=0;b<this._collection.length&&!this._abort;b++)a=new o(this._settings),this._collection_instances.push(a),a.resource=this._collection[b],a.process(),a.done(function(a,b){-1===c.inArray(a,e._collection_loaded)&&(e._loaded++,e._collection_loaded.push(a),e.percentage=100*(e._loaded/e._collection.length),e._progress.call(null,b)),e._loaded>e._collection.length||e._abort||e._loaded===e._collection.length&&(e._callback.call(null),e._complete=!0)})}},this._loop()}return _createClass(a,[{key:"loop",value:function(){this._loop()}},{key:"done",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(){a.call(b)};return this._collection.length?this._callback=d:d(),!0}},{key:"progress",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(c){a.call(b,c)};return this._collection.length?this._progress=d:d(),!0}},{key:"abort",value:function(){for(var a in this._collection_instances)this._collection_instances[a].abort();this._collection.length&&(this._abort=!0)}}]),a}(),q=function(){function a(b,c){_classCallCheck(this,a),this._$element=b,this._settings=c}return _createClass(a,[{key:"collect",value:function(){var a=[],b="img, video, audio",d=b+", picture, source",e=this._$element.find(b);if(this._$element.is(b)&&e.add(this._$element),e.each(function(){a.push(this)}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(d).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){a.push(c(this).css("background-image").replace(/url\("|url\('|url\(|(("')\)$)/igm,""))}),this._settings.attributes.length){var f=function(b){this._settings.attributes.hasOwnProperty(b)&&(this._$element.find("["+b+"]:not("+d+")").each(function(){a.push(c(this).attr(b))}),this._$element.is("["+b+"]")&&!this._$element.is(d)&&a.push(this._$element.attr(b)))};for(const a in this._settings.attributes)f(a)}return a}}]),a}();c[e]=p,c.fn[e]=function(a,b){c.isFunction(a)&&(b=a),c.isFunction(b)||(b=c.noop),"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",visible:!1,sequential:!1,backgrounds:!1,extraAttrs:[],playthrough:!1},a);return c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=this,e=c(a),k=new q(e,d).collect(),l=g+"_"+j(),m=function(){h.off("scroll."+l),i.off("scroll."+l),e.removeData(g)},n=e.data(g);if(void 0!==n&&(n.abort(),m()),n=new p(k,d),n.progress(function(){e.trigger(f+"Progress."+f,[e])}),n.done(function(){m(),e.trigger(f+"Load."+f,[e]),b.call(a),b=c.noop}),e.data(g,n),d.visible)if(c.nite)c.nite.scroll(l,function(){n.loop()},{fps:25});else{var o=function(a,b){var c=Date.now();return function(){0>c+b-Date.now()&&(a(),c=Date.now())}};i.on("scroll."+l,o(function(){n.loop()},1e3))}})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5uaXRlLnByZWxvYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiMGtCQUFBLENBQ0EsQ0FBQyxBQUFTLEFBQVEsQUFBVSxBQUFHLGVBQVUsQUFDckMsQ0FFQSxBQUNBLG1CQWlCNEMsS0FBQSxBQUFLLFNBakJqRCxBQUFJLEFBQUMsQUFBSSxBQUNMLEdBQ0EsQUFBTyxBQUNWLEFBQ0QsQUFHQSxlQU5JLEFBQVEsTUFBUixBQUFjLEFBQ2QseURBTUEsR0FESixBQUN1QixPQUNuQixFQUFtQixFQUZ2QixBQUV3QyxVQUNwQyxFQUFZLEVBSGhCLEFBR2lDLEtBRTdCLEVBTEosQUFLZ0IsQUFBRSxLQUNkLEVBTkosQUFNYyxBQUFFLEtBRVosRUFBQSxBQUFZLFVBQVUsQUFFbEIsT0FBTyxHQUFBLEFBQUUsS0FBTyxFQUFBLEFBQUUsS0FBWCxBQUFTLEFBQU8sYUFBd0IsS0FBL0MsQUFBb0MsQUFBVyxBQUFLLEFBQVksQUFBTyxBQUFTLEFBRW5GLGtCQVpMLEVBY0ksRUFBQSxBQUFhLEFBQVMsV0FBUSxBQUUxQixJQUFNLEdBQU4sQUFBWSxBQUFFLEFBRWQsS0FBQSxBQUFJLEFBQWMsQUFFbEIsUUFBSSxFQUFKLEFBQU0sS0FDRixFQUFjLEVBQUEsQUFBRSxLQUFGLEFBQU8sQUFBVyxjQURwQyxBQUNJLEFBQXlDLFVBRXpDLEFBRUEsSUFBTSxHQUFPLEVBQWIsQUFBYSxBQUFRLEFBRXJCLDBCQUFjLEVBQUcsQUFBYSxDQUFiLEdBQUEsQUFBSyxPQUFMLEFBQWdDLENBQWQsR0FBQSxBQUFLLFFBQWMsRUFBQSxBQUFLLEtBQU8sRUFBakQsQUFBaUQsQUFBUSxTQUFXLEVBQUEsQUFBSyxJQUFNLEVBQWhHLEFBQWMsQUFBa0YsQUFBUSxBQUUzRyxTQUVELE9BQU8sSUFBZSxFQUFBLEFBQUksR0FBbkIsQUFBZSxBQUFPLGFBQTdCLEFBQXNFLEFBRXpFLFFBRitDLEtBQUEsQUFBSSxJQUFKLEFBQVEsYUEvQjVELEVBbUNJLEVBQUEsQUFBWSxBQUFT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RCxPQUFBLEFBQVMsQUFBSyxBQUNkLFVBQVcsRUFBWCxBQUFhLEFBRWhCLElBVEQsQUFXQSxLQUFBLEFBQVMsQUFBSyxBQUFXLEFBRXpCLFVBQUksRUFBSixBQUFhLEFBQVMsQUFFbEIsV0FBSSxFQUFKLEFBQU0sS0FDRixFQUFBLEFBQUUsS0FBRixBQUFPLEFBQU8sU0FBaUIsVUFBVSxBQUFFLEdBQUEsQUFBYyxBQUFTLE1BQWxFLEVBQW9FLENBQUUsSUFEMUUsQUFDSSxBQUFvRSxBQUFRLFNBRTVFLEFBRUEsSUFBTSxHQUFBLEFBQXdCLEFBQVMsQUFBSSxhQUFNLEFBRTdDLElBQUksR0FBTyxLQUFYLEFBQVcsQUFBSyxBQUVoQixZQUFPLFdBQVcsQUFDZCxDQUFBLEFBQWlDLEFBQUcsQUFDaEMsQ0FEQyxBQUFPLEtBQU8sS0FBZixBQUFlLEFBQUssUUFFcEIsTUFBTyxLQUFQLEFBQU8sQUFBSyxBQUNmLEFBQ0osTUFMRCxBQU9ILENBWEQsQUFhQSxJQUFBLEFBQVEsR0FBUixBQUFXLEFBQVUsWUFBaUIsRUFBc0IsVUFBVSxBQUFFLEdBQUEsQUFBYyxBQUFTLE1BQS9GLEFBQXNDLEFBQTJELEFBRXBHLE9BRUosQUFFSixDQXpFRCxBQUFPLEFBMkVWLEVBekdELEFBMkdILENBbHFCRCxHQUFBLEFBa3FCRyxPQWxxQkgsQUFrcUJXLFNBbHFCWCxBQWtxQnFCIiwiZmlsZSI6ImpxdWVyeS5uaXRlLnByZWxvYWRlci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgSlF1ZXJ5IEhlYXZ5IFJlc291cmNlc0xvYWRlciB8IERhbmllbGUgRmlvcm9uaSB8IGRmaW9yb25pOTFAZ21haWwuY29tICovXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgJCwgdW5kZWZpbmVkKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvLyB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gflxuICAgIGlmKCAhJCApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignalF1ZXJ5IGlzIG5lZWRlZCBmb3Igbml0ZVByZWxvYWRlciB0byB3b3JrIScpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyB+IH4gfiB+IH4gfiB+IH4gfiB+IH4gflxuXG5cbiAgICBjb25zdFxuICAgICAgICBuYW1lc3BhY2VfcHJlZml4ID0gJ25pdGUnLFxuICAgICAgICBuYW1lc3BhY2VfbWV0aG9kID0gbmFtZXNwYWNlX3ByZWZpeCsnUHJlbG9hZCcsXG4gICAgICAgIG5hbWVzcGFjZSA9IG5hbWVzcGFjZV9wcmVmaXgrJ2VyJyxcblxuICAgICAgICAkZG9jdW1lbnQgPSAkKGRvY3VtZW50KSxcbiAgICAgICAgJHdpbmRvdyA9ICQod2luZG93KSxcblxuICAgICAgICB1bmlxdWVfaWQgPSBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICByZXR1cm4gJC5uaXRlID8gJC5uaXRlLnVuaXF1ZUlkKCkgOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoOTk5OSAtIDEwMDApKSArIDEwMDA7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBpc192aXNpYmxlID0gZnVuY3Rpb24oZWxlbWVudCl7XG5cbiAgICAgICAgICAgIGNvbnN0ICRlbCA9ICQoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGxldCBpbl92aWV3cG9ydCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiggJC5uaXRlIClcbiAgICAgICAgICAgICAgICBpbl92aWV3cG9ydCA9ICQubml0ZS5pblZpZXdwb3J0KGVsZW1lbnQpLnJhdGlvO1xuXG4gICAgICAgICAgICBlbHNle1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgICAgICBpbl92aWV3cG9ydCA9ICEoIHJlY3QucmlnaHQgPCAwIHx8IHJlY3QuYm90dG9tIDwgMCB8fCByZWN0LmxlZnQgPiAkd2luZG93LndpZHRoKCkgfHwgcmVjdC50b3AgPiAkd2luZG93LmhlaWdodCgpICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGluX3ZpZXdwb3J0ICYmICRlbC5pcygnOnZpc2libGUnKSAmJiAkZWwuY3NzKCd2aXNpYmlsaXR5JykgIT09ICdoaWRkZW4nO1xuXG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNfbG9hZGVkID0gZnVuY3Rpb24oZWxlbWVudCl7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jb21wbGV0ZSAmJlxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoZWxlbWVudC5uYXR1cmFsV2lkdGgpID49IDEgJiZcbiAgICAgICAgICAgICAgICBNYXRoLmZsb29yKGVsZW1lbnQubmF0dXJhbEhlaWdodCkgPj0gMVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgfHxcbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlYWR5U3RhdGUgPj0gMiAmJlxuICAgICAgICAgICAgICAgIGVsZW1lbnQudmlkZW9XaWR0aCAhPT0gMCAmJlxuICAgICAgICAgICAgICAgIGVsZW1lbnQudmlkZW9IZWlnaHQgIT09IDBcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBpc19odG1sX29iamVjdCA9IGZ1bmN0aW9uKCBvYmplY3QgKXtcblxuICAgICAgICAgICAgaWYoIHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2goZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5ub2RlVHlwZSA9PT0gMSAmJiB0eXBlb2Ygb2JqZWN0LnN0eWxlID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm93bmVyRG9jdW1lbnQgPT09ICdvYmplY3QnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sXG4gICAgICAgIFxuICAgICAgICBpc19mb3JtYXQgPSBmdW5jdGlvbiggaXRlbSwgZXhwZWN0ZWRfZm9ybWF0ICl7XG5cbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgZm9ybWF0X2V4dGVuc2lvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlIDogJ2pwW2VdP2d8Z2lmfHBuZ3x0aWZbZl0/fGJtcCcsXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvIDogJ21wM3xvZ2cnLFxuICAgICAgICAgICAgICAgICAgICB2aWRlbyA6ICdtcDR8b2d2fG9nZ3x3ZWJtJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9ybWF0X25hbWVzID0gT2JqZWN0LmtleXMoZm9ybWF0X2V4dGVuc2lvbnMpLFxuICAgICAgICAgICAgICAgIGJhc2U2NF9oZWFkaW5nID0gJ1xcO2Jhc2U2NFxcLCc7XG5cbiAgICAgICAgICAgIGxldCBvdXRwdXQgPSB7IGZvcm1hdDogbnVsbCwgZXh0ZW5zaW9uOiBudWxsIH07XG5cbiAgICAgICAgICAgIGlmKCB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgKSB7XG5cbiAgICAgICAgICAgICAgICBpdGVtID0gaXRlbS5zcGxpdCgnPycpWzBdOyAvLyBnZXQgcmlkIG9mIHF1ZXJ5IHN0cmluZ3NcbiAgICAgICAgICAgICAgICBpdGVtID0gaXRlbS5zcGxpdCgnIycpWzBdOyAvLyBnZXQgcmlkIG9mIGhhc2hlc1xuXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09ICcnKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBsZXQgZm9ybWF0X3F1ZXVlID0gdW5kZWZpbmVkICE9PSBleHBlY3RlZF9mb3JtYXQgPyBbIGV4cGVjdGVkX2Zvcm1hdCBdIDogZm9ybWF0X25hbWVzO1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB4IGluIGZvcm1hdF9xdWV1ZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXRfcXVldWUuaGFzT3duUHJvcGVydHkoeCkpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3IFJlZ0V4cCgnKFxcLignICsgZm9ybWF0X2V4dGVuc2lvbnNbZm9ybWF0X3F1ZXVlW3hdXSArICcpJCl8JyArIGJhc2U2NF9oZWFkaW5nLCAnZycpLnRlc3QoaXRlbSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKGJhc2U2NF9oZWFkaW5nLCAnZycpLnRlc3QoaXRlbSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlczY0ID0gaXRlbS5tYXRjaChuZXcgUmVnRXhwKCdeZGF0YTonICsgZm9ybWF0X3F1ZXVlW3hdICsgJ1xcLygnICsgZm9ybWF0X2V4dGVuc2lvbnNbZm9ybWF0X3F1ZXVlW3hdXSArICcpJywgJ2cnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhbWF0Y2hlczY0IHx8IG51bGwgPT09IG1hdGNoZXM2NCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGVzNjQgPSBtYXRjaGVzNjRbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmZvcm1hdCA9IG1hdGNoZXM2NC5yZXBsYWNlKCdkYXRhOicgKyBmb3JtYXRfcXVldWVbeF0gKyAnL2cnLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVzID0gaXRlbS5tYXRjaChuZXcgUmVnRXhwKGZvcm1hdF9leHRlbnNpb25zW2Zvcm1hdF9xdWV1ZVt4XV0sICdnJykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5mb3JtYXQgPSBmb3JtYXRfcXVldWVbeF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZXh0ZW5zaW9uID0gbWF0Y2hlc1swXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCBpc19odG1sX29iamVjdChpdGVtKSApe1xuXG4gICAgICAgICAgICAgICAgbGV0IHRhZ19uYW1lID0gaXRlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYoICQuaW5BcnJheSh0YWdfbmFtZSwgZm9ybWF0X25hbWVzKSA+IC0xIClcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmZvcm1hdCA9IGl0ZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgaWYoIHRhZ19uYW1lID09PSAnaW1nJyApXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5mb3JtYXQgPSAnaW1hZ2UnO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgXG4gICAgICAgIH07XG5cbiAgICBjbGFzcyBSZXNvdXJjZUxvYWRlciB7XG5cbiAgICAgICAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG5cbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncyAgPSAkLmV4dGVuZCh0cnVlLCB7XG4gICAgICAgICAgICAgICAgcGxheXRocm91Z2ggIDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc3Jjc2V0QXR0ciAgIDogJ2RhdGEtc3Jjc2V0JyxcbiAgICAgICAgICAgICAgICBzcmNBdHRyICAgICAgOiAnZGF0YS1zcmMnLFxuICAgICAgICAgICAgICAgIHZpc2libGUgICAgICA6IGZhbHNlXG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgdGhpcy5faWQgICAgICAgID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2lkX2V2ZW50ICA9IG51bGw7XG5cbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgICA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl8kZWxlbWVudCAgPSAkKCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlICA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzICAgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5fZm9ybWF0ICAgID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgID0gJC5ub29wO1xuICAgICAgICAgICAgdGhpcy5fZG9uZSAgICAgID0gZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl9jYWxsYmFjay5jYWxsKG51bGwgLyp0ZW1wKi8sIHNlbGYuX2lkLCBzZWxmLl9lbGVtZW50LmN1cnJlbnRTcmMgfHwgc2VsZi5fZWxlbWVudC5zcmMpO1xuXG4gICAgICAgICAgICAgICAgaWYoIHNlbGYuX3Byb2Nlc3MgKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0cmlnZ2VyX2V2ZW50ID0gZS50eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZS50eXBlLnNsaWNlKDEpO1xuXG4gICAgICAgICAgICAgICAgc2VsZi5fJGVsZW1lbnQudHJpZ2dlcihuYW1lc3BhY2VfcHJlZml4ICsgdHJpZ2dlcl9ldmVudCArICcuJyArIG5hbWVzcGFjZV9wcmVmaXgsIFsgc2VsZi5fJGVsZW1lbnQgXSk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNldCByZXNvdXJjZSggZGF0YSApe1xuXG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIGVsZW1lbnRfcmVzb3VyY2UgPSBpc19odG1sX29iamVjdChkYXRhLnJlc291cmNlKSxcbiAgICAgICAgICAgICAgICBzdHJpbmdfcmVzb3VyY2UgPSB0eXBlb2YgZGF0YS5yZXNvdXJjZSA9PT0gJ3N0cmluZyc7XG5cbiAgICAgICAgICAgIGlmKCAhZWxlbWVudF9yZXNvdXJjZSAmJiAhc3RyaW5nX3Jlc291cmNlIClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMuX2lkID0gZGF0YS5pZDtcbiAgICAgICAgICAgIHRoaXMuX2Zvcm1hdCA9IGlzX2Zvcm1hdChkYXRhLnJlc291cmNlKS5mb3JtYXQ7XG5cbiAgICAgICAgICAgIGlmKCBzdHJpbmdfcmVzb3VyY2UgKXtcblxuICAgICAgICAgICAgICAgIGxldCBpc19pbWcgPSB0aGlzLl9mb3JtYXQgPT09ICdpbWFnZSc7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpc19pbWcgPyAnaW1nJyA6IHRoaXMuX2Zvcm1hdCk7XG5cbiAgICAgICAgICAgICAgICBpZiggaXNfaW1nIClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3Muc3Jjc2V0QXR0ciA9ICdkYXRhLXNyY3NldCc7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3Muc3JjQXR0ciA9ICdkYXRhLXNyYyc7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNvdXJjZSA9IGRhdGEucmVzb3VyY2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGVsZW1lbnRfcmVzb3VyY2UgKXtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkYXRhLnJlc291cmNlO1xuXG4gICAgICAgICAgICAgICAgaWYoIHRoaXMuX3NldHRpbmdzLnZpc2libGUgJiYgIWlzX3Zpc2libGUodGhpcy5fZWxlbWVudCkgKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQgPSAkKHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAgICAgICBpZiggc3RyaW5nX3Jlc291cmNlICl7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLl9zZXR0aW5ncy5zcmNBdHRyLnJlcGxhY2UoJ2RhdGEtJywgJycpLCB0aGlzLl9yZXNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEodGhpcy5fc2V0dGluZ3Muc3Jjc2V0QXR0ci5yZXBsYWNlKCdkYXRhLScsICcnKSwgdGhpcy5fcmVzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHRoaXMuX3NldHRpbmdzLnNyY0F0dHIsIHRoaXMuX3Jlc291cmNlKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih0aGlzLl9zZXR0aW5ncy5zcmNzZXRBdHRyLCB0aGlzLl9yZXNvdXJjZSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5faWRfZXZlbnQgID0gdGhpcy5fJGVsZW1lbnQuZGF0YShuYW1lc3BhY2UpO1xuICAgICAgICAgICAgdGhpcy5fcHJvY2VzcyAgID0gdGhpcy5faWRfZXZlbnQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX2lkX2V2ZW50ICA9IHRoaXMuX3Byb2Nlc3MgPyB0aGlzLl9pZF9ldmVudCA6IG5hbWVzcGFjZSArICdfdW5pcXVlXycgKyB1bmlxdWVfaWQoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3MoKXtcblxuICAgICAgICAgICAgaWYgKCBpc19sb2FkZWQodGhpcy5fZWxlbWVudCkgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Byb2Nlc3MpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50Lm9mZignLicgKyB0aGlzLl9pZF9ldmVudCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9kb25lKG5ldyBFdmVudCgkLmlzTnVtZXJpYyh0aGlzLl9lbGVtZW50Lm5hdHVyYWxXaWR0aCkgPyBuYW1lc3BhY2VfcHJlZml4KydMb2FkJyA6IG5hbWVzcGFjZV9wcmVmaXgrJ0Vycm9yJykpO1xuXG4gICAgICAgICAgICB9ZWxzZXtcblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLl9mb3JtYXQgPT09ICdpbWFnZScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnRbdGhpcy5fcHJvY2VzcyA/ICdvbicgOiAnb25lJ10oJ2xvYWQuJyArIHRoaXMuX2lkX2V2ZW50ICsgJyBlcnJvci4nICsgdGhpcy5faWRfZXZlbnQsIHRoaXMuX2RvbmUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgICAgICAgICAkcGljdHVyZSA9IHRoaXMuXyRlbGVtZW50LmNsb3Nlc3QoJ3BpY3R1cmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IHRoaXMuX3NldHRpbmdzLnNyY0F0dHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNfY2xlYW4gPSB0aGlzLl9zZXR0aW5ncy5zcmNBdHRyLnJlcGxhY2UoJ2RhdGEtJywgJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Jjc2V0ID0gdGhpcy5fc2V0dGluZ3Muc3Jjc2V0QXR0cixcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY3NldF9jbGVhbiA9IHRoaXMuX3NldHRpbmdzLnNyY3NldEF0dHIucmVwbGFjZSgnZGF0YS0nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCRwaWN0dXJlLmxlbmd0aCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVEYXRhKHNyY3NldF9jbGVhbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cihzcmNzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3JjX2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyYyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRwaWN0dXJlLmZpbmQoJ3NvdXJjZVsnICsgc3Jjc2V0ICsgJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCAkcGljdHVyZS5kYXRhKHNyY3NldF9jbGVhbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3Jjc2V0X2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyY3NldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuXyRlbGVtZW50LmlzKCdbJyArIHNyY3NldCArICddJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIHRoaXMuXyRlbGVtZW50LmRhdGEoc3Jjc2V0X2NsZWFuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3Jjc2V0X2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cihzcmNzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fJGVsZW1lbnQuaXMoJ1snICsgc3JjICsgJ10nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgdGhpcy5fJGVsZW1lbnQuZGF0YShzcmNfY2xlYW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShzcmNfY2xlYW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyYyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLl9mb3JtYXQgPT09ICd2aWRlbycgfHwgdGhpcy5fZm9ybWF0ID09PSAnYXVkaW8nICl7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kb1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCAhdGhpcy5fcHJvY2VzcyApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50LmRhdGEobmFtZXNwYWNlLCB0aGlzLl9pZF9ldmVudCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSB0aGlzLl9lbGVtZW50LmN1cnJlbnRTcmMgfHwgdGhpcy5fZWxlbWVudC5zcmM7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGFib3J0KCl7XG5cbiAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50XG4gICAgICAgICAgICAgICAgLm9mZignLicgKyB0aGlzLl9pZF9ldmVudCk7XG5cbiAgICAgICAgICAgIGlmKCBpc19sb2FkZWQodGhpcy5fZWxlbWVudCkgKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBzcmMgPSB0aGlzLl8kZWxlbWVudC5hdHRyKCdzcmNzZXQnKSxcbiAgICAgICAgICAgICAgICBzcmNzZXQgPSB0aGlzLl8kZWxlbWVudC5hdHRyKCdzcmMnKTtcblxuICAgICAgICAgICAgaWYoIHVuZGVmaW5lZCAhPT0gc3JjIClcbiAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLl9zZXR0aW5ncy5zcmNBdHRyLCBzcmMpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHRoaXMuX3NldHRpbmdzLnNyY0F0dHIsIHNyYylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3NyYycpLnJlbW92ZUF0dHIoJ3NyY3NldCcpO1xuXG4gICAgICAgICAgICBpZiggdW5kZWZpbmVkICE9PSBzcmNzZXQgKVxuICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRoaXMuX3NldHRpbmdzLnNyY3NldEF0dHIsIHNyY3NldClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIodGhpcy5fc2V0dGluZ3Muc3Jjc2V0QXR0ciwgc3Jjc2V0KVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignc3JjJykucmVtb3ZlQXR0cignc3Jjc2V0Jyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRvbmUoY2FsbGJhY2spe1xuXG4gICAgICAgICAgICBpZiggISQuaXNGdW5jdGlvbihjYWxsYmFjaykgKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gZnVuY3Rpb24ocmVzb3VyY2Upe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgcmVzb3VyY2UpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9O1xuXG4gICAgfVxuICAgIFxuICAgIGNsYXNzIFJlc291cmNlc0xvYWRlciB7XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuXG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbiA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbl9sb2FkZWQgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2NvbGxlY3Rpb25faW5zdGFuY2VzID0gWyBuZXcgUmVzb3VyY2VMb2FkZXIodGhpcy5fc2V0dGluZ3MpIF07XG5cbiAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoY29sbGVjdGlvbikgJiYgKCB0eXBlb2YgY29sbGVjdGlvblswXSA9PT0gJ3N0cmluZycgfHwgaXNfaHRtbF9vYmplY3QoY29sbGVjdGlvblswXSkgKSlcbiAgICAgICAgICAgICAgICBmb3IgKCBjb25zdCByZXNvdXJjZSBpbiBjb2xsZWN0aW9uIClcbiAgICAgICAgICAgICAgICAgICAgaWYoIGNvbGxlY3Rpb24uaGFzT3duUHJvcGVydHkocmVzb3VyY2UpIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3Rpb24ucHVzaCh7IGlkIDogdW5pcXVlX2lkKCksIHJlc291cmNlIDogY29sbGVjdGlvbltyZXNvdXJjZV0gfSk7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBjb2xsZWN0aW9uID09PSAnc3RyaW5nJyB8fCBpc19odG1sX29iamVjdChjb2xsZWN0aW9uKSApXG4gICAgICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbi5wdXNoKHsgaWQgOiB1bmlxdWVfaWQoKSwgcmVzb3VyY2UgOiBjb2xsZWN0aW9uIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgICAgICBzZXF1ZW50aWFsOiBmYWxzZVxuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9IDA7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gJC5ub29wKCk7XG4gICAgICAgICAgICB0aGlzLl9wcm9ncmVzcyA9ICQubm9vcCgpO1xuICAgICAgICAgICAgdGhpcy5fYWJvcnQgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5fbG9hZGVkID0gMDtcblxuICAgICAgICAgICAgdGhpcy5fbG9vcCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICBpZiAoICF0aGlzLl9jb2xsZWN0aW9uLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGlmKCB0cnVlID09PSB0aGlzLl9jb21wbGV0ZSApe1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrLmNhbGwobnVsbCAvKiB0b2RvIGNvbnRleHQgKi8pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYm9ydClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG8gdGhpcy5fc2V0dGluZ3Muc2VxdWVudGlhbCAtLT4gbXVzdCBiZSBjYWxsZWQgaW4gdGhlIGZvbGxvd2luZyAuZG9uZSgpIGNhbGwgYW5kIHRha2luZyBhY2NvdW50IG9mIHZpc2liaWxpdHkgY2hlY2sgaW4gUmVzb3VyY2VMb2FkZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZF9pbnN0YW5jZSA9IG5ldyBSZXNvdXJjZUxvYWRlcih0aGlzLl9zZXR0aW5ncyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbl9pbnN0YW5jZXMucHVzaChsb2FkX2luc3RhbmNlKTtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkX2luc3RhbmNlLnJlc291cmNlID0gdGhpcy5fY29sbGVjdGlvbltpXTtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkX2luc3RhbmNlLnByb2Nlc3MoKTtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkX2luc3RhbmNlLmRvbmUoZnVuY3Rpb24oaWQsIHJlc291cmNlKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQuaW5BcnJheShpZCwgc2VsZi5fY29sbGVjdGlvbl9sb2FkZWQpID09PSAtMSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvYWRlZCsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY29sbGVjdGlvbl9sb2FkZWQucHVzaChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBlcmNlbnRhZ2UgPSBzZWxmLl9sb2FkZWQgLyBzZWxmLl9jb2xsZWN0aW9uLmxlbmd0aCAqIDEwMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3Byb2dyZXNzLmNhbGwobnVsbCAvKiB0b2RvICovLCByZXNvdXJjZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLl9sb2FkZWQgPiBzZWxmLl9jb2xsZWN0aW9uLmxlbmd0aCB8fCBzZWxmLl9hYm9ydCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc2VsZi5fbG9hZGVkID09PSBzZWxmLl9jb2xsZWN0aW9uLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrLmNhbGwobnVsbCAvKiB0b2RvICovKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NvbXBsZXRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLl9sb29wKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxvb3AoKXtcblxuICAgICAgICAgICAgdGhpcy5fbG9vcCgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBkb25lKGNhbGxiYWNrKXtcblxuICAgICAgICAgICAgaWYoICEkLmlzRnVuY3Rpb24oY2FsbGJhY2spIClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgX2Z1bmMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLl9jb2xsZWN0aW9uLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBfZnVuYztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfZnVuYygpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHByb2dyZXNzKGNhbGxiYWNrKXtcblxuICAgICAgICAgICAgaWYoICEkLmlzRnVuY3Rpb24oY2FsbGJhY2spIClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgX2Z1bmMgPSBmdW5jdGlvbihyZXNvdXJjZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgcmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLl9jb2xsZWN0aW9uLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSBfZnVuYztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfZnVuYygpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIGFib3J0KCl7XG5cbiAgICAgICAgICAgIGZvciggY29uc3QgaW5zdGFuY2UgaW4gdGhpcy5fY29sbGVjdGlvbl9pbnN0YW5jZXMgKVxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3Rpb25faW5zdGFuY2VzWyBpbnN0YW5jZSBdLmFib3J0KCk7XG5cbiAgICAgICAgICAgIGlmKCAhdGhpcy5fY29sbGVjdGlvbi5sZW5ndGggKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5fYWJvcnQgPSB0cnVlO1xuXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBjbGFzcyBDb2xsZWN0aW9uUG9wdWxhdG9yIHtcblxuICAgICAgICBjb25zdHJ1Y3RvcigkZWxlbWVudCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxlY3QoIC8qb3V0cHV0Ki8gKSB7IC8vIHRvZG8gb3V0cHV0IHR5cGVzIGVzOiBvbmx5IGVsZW1lbnRzLCBvbmx5LCB1cmxzLCBtaXhlZCwgYWxsIC4uLiBkdW5ub1xuXG4gICAgICAgICAgICBsZXQgY29sbGVjdGlvbiA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHRhcmdldHMgPSAnaW1nLCB2aWRlbywgYXVkaW8nLFxuICAgICAgICAgICAgICAgIHRhcmdldHNfZXh0ZW5kZWQgPSB0YXJnZXRzICsgJywgcGljdHVyZSwgc291cmNlJztcblxuICAgICAgICAgICAgbGV0ICR0YXJnZXRzID0gdGhpcy5fJGVsZW1lbnQuZmluZCh0YXJnZXRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl8kZWxlbWVudC5pcyh0YXJnZXRzKSlcbiAgICAgICAgICAgICAgICAkdGFyZ2V0cy5hZGQodGhpcy5fJGVsZW1lbnQpO1xuICAgICAgICAgICAgJHRhcmdldHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0cnVlID09PSB0aGlzLl9zZXR0aW5ncy5iYWNrZ3JvdW5kcylcbiAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudC5maW5kKCcqJykuYWRkQmFjaygpLm5vdCh0YXJnZXRzX2V4dGVuZGVkKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSAhPT0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKS5yZXBsYWNlKC91cmxcXChcInx1cmxcXCgnfHVybFxcKHwoKFwiJylcXCkkKS9pZ20sICcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5hdHRyaWJ1dGVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHIgaW4gdGhpcy5fc2V0dGluZ3MuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5fc2V0dGluZ3MuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQuZmluZCgnWycgKyBhdHRyICsgJ106bm90KCcgKyB0YXJnZXRzX2V4dGVuZGVkICsgJyknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goJCh0aGlzKS5hdHRyKGF0dHIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fJGVsZW1lbnQuaXMoJ1snICsgYXR0ciArICddJykgJiYgIXRoaXMuXyRlbGVtZW50LmlzKHRhcmdldHNfZXh0ZW5kZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaCh0aGlzLl8kZWxlbWVudC5hdHRyKGF0dHIpKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAkW25hbWVzcGFjZV9tZXRob2RdID0gUmVzb3VyY2VzTG9hZGVyO1xuXG4gICAgJC5mbltuYW1lc3BhY2VfbWV0aG9kXSA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKXtcblxuICAgICAgICBpZiggJC5pc0Z1bmN0aW9uKG9wdGlvbnMpIClcbiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgaWYoICEkLmlzRnVuY3Rpb24oY2FsbGJhY2spIClcbiAgICAgICAgICAgIGNhbGxiYWNrID0gJC5ub29wO1xuICAgICAgICBpZiggdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIClcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICBsZXQgc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7XG5cbiAgICAgICAgICAgIHNyY0F0dHIgICAgICAgOiAnZGF0YS1zcmMnLFxuICAgICAgICAgICAgc3Jjc2V0QXR0ciAgICA6ICdkYXRhLXNyY3NldCcsXG5cbiAgICAgICAgICAgIHZpc2libGUgICAgICAgOiBmYWxzZSxcblxuICAgICAgICAgICAgc2VxdWVudGlhbCAgICA6IGZhbHNlLFxuXG4gICAgICAgICAgICBiYWNrZ3JvdW5kcyAgIDogZmFsc2UsXG4gICAgICAgICAgICBleHRyYUF0dHJzICAgIDogW10sXG5cbiAgICAgICAgICAgIHBsYXl0aHJvdWdoICAgOiBmYWxzZVxuXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmKCAhJC5pc0FycmF5KHNldHRpbmdzLmF0dHJpYnV0ZXMpIClcbiAgICAgICAgICAgIHNldHRpbmdzLmF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgaWYoIHR5cGVvZiBzZXR0aW5ncy5hdHRyaWJ1dGVzID09PSAnc3RyaW5nJyApXG4gICAgICAgICAgICBzZXR0aW5ncy5hdHRyaWJ1dGVzID0gc2V0dGluZ3MuYXR0cmlidXRlcy5zcGxpdCgnICcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkZWxlbWVudCA9ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uUG9wdWxhdG9yKCRlbGVtZW50LCBzZXR0aW5ncykuY29sbGVjdCgpLFxuICAgICAgICAgICAgICAgIGV2ZW50X25hbWVzcGFjZSA9IG5hbWVzcGFjZSArICdfJyArIHVuaXF1ZV9pZCgpLFxuICAgICAgICAgICAgICAgIGNsZWFyID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub2ZmKCdzY3JvbGwuJyArIGV2ZW50X25hbWVzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cub2ZmKCdzY3JvbGwuJytldmVudF9uYW1lc3BhY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZURhdGEobmFtZXNwYWNlKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBsb2FkX2luc3RhbmNlID0gJGVsZW1lbnQuZGF0YShuYW1lc3BhY2UpO1xuXG4gICAgICAgICAgICBpZiggdW5kZWZpbmVkICE9PSBsb2FkX2luc3RhbmNlICkge1xuXG4gICAgICAgICAgICAgICAgbG9hZF9pbnN0YW5jZS5hYm9ydCgpO1xuXG4gICAgICAgICAgICAgICAgY2xlYXIoKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2FkX2luc3RhbmNlID0gbmV3IFJlc291cmNlc0xvYWRlcihjb2xsZWN0aW9uLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIGxvYWRfaW5zdGFuY2UucHJvZ3Jlc3MoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcihuYW1lc3BhY2VfcHJlZml4KydQcm9ncmVzcy4nK25hbWVzcGFjZV9wcmVmaXgsIFskZWxlbWVudF0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbG9hZF9pbnN0YW5jZS5kb25lKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKG5hbWVzcGFjZV9wcmVmaXgrJ0xvYWQuJytuYW1lc3BhY2VfcHJlZml4LCBbJGVsZW1lbnRdKTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSAkLm5vb3A7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKG5hbWVzcGFjZSwgbG9hZF9pbnN0YW5jZSk7XG5cbiAgICAgICAgICAgIGlmKCBzZXR0aW5ncy52aXNpYmxlICl7XG5cbiAgICAgICAgICAgICAgICBpZiggJC5uaXRlIClcbiAgICAgICAgICAgICAgICAgICAgJC5uaXRlLnNjcm9sbChldmVudF9uYW1lc3BhY2UsIGZ1bmN0aW9uKCl7IGxvYWRfaW5zdGFuY2UubG9vcCgpOyB9LCB7IGZwcyA6IDI1IH0pO1xuXG4gICAgICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHJvdHRsZV9zY3JvbGxfZXZlbnQgPSBmdW5jdGlvbihmbiwgd2FpdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRpbWUgKyB3YWl0IC0gRGF0ZS5ub3coKSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cub24oJ3Njcm9sbC4nK2V2ZW50X25hbWVzcGFjZSwgdGhyb3R0bGVfc2Nyb2xsX2V2ZW50KGZ1bmN0aW9uKCl7IGxvYWRfaW5zdGFuY2UubG9vcCgpOyB9LCAxMDAwKSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgIH07XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSk7Il19
