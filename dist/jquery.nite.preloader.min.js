"use strict";var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";var d=Math.floor;if(!c)return function(b,c){if(a.console){var d=a.console.log;1===c?a.console.warn&&(d=a.console.warn):2===c?a.console.error&&(d=a.console.error):void 0,d(b)}}("jQuery is needed for nitePreloader to work!",2),void 0;var f="nite",e=f+"Preload",g=f+"er",h=c(b),i=c(a),j=function(){return c.nite?c.nite.uniqueId():d(Math.random()*8999)+1e3},k=function(a){var b=c(a),d=!1;if(c.nite)d=c.nite.inViewport(a).ratio;else{var e=a.getBoundingClientRect();d=!(0>e.right||0>e.bottom||e.left>i.width()||e.top>i.height())}return d&&b.is(":visible")&&"hidden"!==b.css("visibility")},l=function(a){return a.complete&&1<=d(a.naturalWidth)&&1<=d(a.naturalHeight)||2<=a.readyState&&0!==a.videoWidth&&0!==a.videoHeight},m=function(a){if("object"!==("undefined"==typeof a?"undefined":_typeof(a)))return!1;try{return a instanceof HTMLElement}catch(b){return 1===a.nodeType&&"object"===_typeof(a.style)&&"object"===_typeof(a.ownerDocument)}},n=function(a,b){var d={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},e=Object.keys(d),f={format:null,extension:null};if("string"==typeof a){if(a=a.split("?")[0],a=a.split("#")[0],""===a)return!1;var g=void 0===b?e:[b];for(var h in g)if(g.hasOwnProperty(h)&&new RegExp("(.("+d[g[h]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var i=a.match(new RegExp("^data:"+g[h]+"/("+d[g[h]]+")","g"));if(!i||null===i)continue;i=i[0],f.format=i.replace("data:"+g[h]+"/g","");break}else{var j=a.match(new RegExp(d[g[h]],"g"));if(j){f.format=g[h],f.extension=j[0];break}}}if(m(a)){var k=a.tagName.toLowerCase();-1<c.inArray(k,e)&&(f.format=a.tagName.toLowerCase()),"img"===k&&(f.format="image")}return f},o=function(){function d(a){_classCallCheck(this,d);var b=this;this._settings=c.extend(!0,{playthrough:!1,srcsetAttr:"data-srcset",srcAttr:"data-src",visible:!1},a),this._id=null,this._id_event=null,this._element=null,this._$element=c(),this._resource=null,this._process=!1,this._format=null,this._callback=c.noop,this._done=function(a){if(b._callback.call(null,b._id,b._element.currentSrc||b._element.src),!b._process){var c=a.type.charAt(0).toUpperCase()+a.type.slice(1);b._$element.trigger(f+c+"."+f,[b._$element])}}}return _createClass(d,[{key:"process",value:function(){var b=this,d=this._settings.srcAttr,e=this._settings.srcAttr.replace("data-","");if(l(this._element))this._process||this._$element.off("."+this._id_event),this._done(new Event(c.isNumeric(this._element.naturalWidth)?f+"Load":f+"Error"));else{if("image"===this._format){this._$element[this._process?"on":"one"]("load."+this._id_event+" error."+this._id_event,this._done);var h=this._$element.closest("picture"),i=this._settings.srcsetAttr,j=this._settings.srcsetAttr.replace("data-","");h.length&&"HTMLPictureElement"in a?(this._$element.removeData(j).removeAttr(i).removeData(e).removeAttr(d),h.find("source["+i+"]").attr("srcset",h.data(j)).removeData(j).removeAttr(i)):(this._$element.is("["+i+"]")&&this._$element.attr("srcset",this._$element.data(j)).removeData(j).removeAttr(i),this._$element.is("["+d+"]")&&this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d))}if("video"===this._format||"audio"===this._format){var k=this._$element.find("source");this._$element.on("canplaythrough."+this._id_event,function(){b._settings.playthrough&&(b._element.currentTime=0,b._$element.is("[autoplay]")&&b._element.play(),b._done(new Event("load")))}).on("loadedmetadata."+this._id_event+" error."+this._id_event,function(a){b._settings.playthrough||b._done(new Event("error"===a.type?"error":"load"))}).on("loadedmetadata."+this._id_event+" progress."+this._id_event,function(){b._settings.playthrough&&(0<b._element.readyState&&!b._element.duration?b._done(new Event("error")):(!b._element.paused&&b._element.pause(),b._element.currentTime++))}),k.length?k.each(function(){c(this).is("["+d+"]")&&c(this).attr("src",c(this).data(e)).removeData(e).removeAttr(d)}):this._$element.is("["+d+"]")&&this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d)}this._process||this._$element.data(g,this._id_event)}this._resource=this._element.currentSrc||this._element.src}},{key:"abort",value:function(){if(this._$element.off("."+this._id_event),!l(this._element)){var a=this._$element.attr("srcset"),b=this._$element.attr("src");void 0!==a&&this._$element.data(this._settings.srcAttr,a).attr(this._settings.srcAttr,a).removeAttr("src").removeAttr("srcset"),void 0!==b&&this._$element.data(this._settings.srcsetAttr,b).attr(this._settings.srcsetAttr,b).removeAttr("src").removeAttr("srcset")}}},{key:"done",value:function(a){if(c.isFunction(a)){var b=this;this._callback=function(c){a.call(b,c)}}}},{key:"resource",set:function(a){var d=m(a.resource),e="string"==typeof a.resource;if(!d&&!e)return!1;if(this._id=a.id,this._format=n(a.resource).format,e){var f="image"===this._format;this._element=b.createElement(f?"img":this._format),f&&(this._settings.srcsetAttr="data-srcset"),this._settings.srcAttr="data-src",this._resource=a.resource}return d&&(this._element=a.resource,this._settings.visible&&!k(this._element))?!1:(this._$element=c(this._element),e&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),this._id_event=this._$element.data(g),this._process=void 0!==this._id_event,this._id_event=this._process?this._id_event:g+"_unique_"+j(),!0)}}]),d}(),p=function(){function a(b,d){_classCallCheck(this,a);var e=this;if(this._collection=[],this._collection_loaded=[],this._collection_instances=[new o(this._settings)],c.isArray(b)&&("string"==typeof b[0]||m(b[0])))for(var f in b)b.hasOwnProperty(f)&&this._collection.push({id:j(),resource:b[f]});("string"==typeof b||m(b))&&this._collection.push({id:j(),resource:b}),this._settings=c.extend(!0,{sequential:!1},d),this.percentage=0,this._callback=c.noop(),this._progress=c.noop(),this._abort=!1,this._complete=!1,this._loaded=0,this._loop=function(){if(this._collection.length){if(!0===this._complete)return void e._callback.call(null);for(var a,b=0;b<this._collection.length&&!this._abort;b++)a=new o(this._settings),this._collection_instances.push(a),a.resource=this._collection[b],a.process(),a.done(function(a,b){-1===c.inArray(a,e._collection_loaded)&&(e._loaded++,e._collection_loaded.push(a),e.percentage=100*(e._loaded/e._collection.length),e._progress.call(null,b)),e._loaded>e._collection.length||e._abort||e._loaded===e._collection.length&&(e._callback.call(null),e._complete=!0)})}},this._loop()}return _createClass(a,[{key:"loop",value:function(){this._loop()}},{key:"done",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(){a.call(b)};return this._collection.length?this._callback=d:d(),!0}},{key:"progress",value:function(a){if(!c.isFunction(a))return!1;var b=this,d=function(c){a.call(b,c)};return this._collection.length?this._progress=d:d(),!0}},{key:"abort",value:function(){for(var a in this._collection_instances)this._collection_instances[a].abort();this._collection.length&&(this._abort=!0)}}]),a}(),q=function(){function a(b,c){_classCallCheck(this,a),this._$element=b,this._settings=c}return _createClass(a,[{key:"collect",value:function(){var a=[],b="img, video, audio",d=b+", picture, source",e=this._$element.find(b);if(this._$element.is(b)&&e.add(this._$element),e.each(function(){a.push(this)}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(d).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){a.push(c(this).css("background-image").replace(/url\("|url\('|url\(|(("')\)$)/igm,""))}),this._settings.attributes.length){var f=function(b){this._settings.attributes.hasOwnProperty(b)&&(this._$element.find("["+b+"]:not("+d+")").each(function(){a.push(c(this).attr(b))}),this._$element.is("["+b+"]")&&!this._$element.is(d)&&a.push(this._$element.attr(b)))};for(const a in this._settings.attributes)f(a)}return a}}]),a}();c[e]=p,c.fn[e]=function(a,b){c.isFunction(a)&&(b=a),c.isFunction(b)||(b=c.noop),"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",visible:!1,sequential:!1,backgrounds:!1,extraAttrs:[],playthrough:!1},a);return c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=this,e=c(a),k=new q(e,d).collect(),l=g+"_"+j(),m=function(){h.off("scroll."+l),i.off("scroll."+l),e.removeData(g)},n=e.data(g);if(void 0!==n&&(n.abort(),m()),n=new p(k,d),n.progress(function(){e.trigger(f+"Progress."+f,[e])}),n.done(function(){m(),e.trigger(f+"Load."+f,[e]),b.call(a),b=c.noop}),e.data(g,n),d.visible)if(c.nite)c.nite.scroll(l,function(){n.loop()},{fps:25});else{var o=function(a,b){var c=Date.now();return function(){0>c+b-Date.now()&&(a(),c=Date.now())}};i.on("scroll."+l,o(function(){n.loop()},1e3))}})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5uaXRlLnByZWxvYWRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiMGtCQUFBLENBQ0EsQ0FBQyxBQUFTLEFBQVEsQUFBVSxBQUFHLGVBQVUsQUFDckMsQ0FFQSxBQUFNLG1CQXdDc0MsS0FBQSxBQUFLLFNBakJqRCxBQUFJLEFBQUMsQUFBSSxBQUNMLEdBQ0EsQUFBTyxBQUNWLEFBQ0QsQUFHQSxNQTlCTSxBQUFXLEFBQVMsQUFBUyxjQUFNLEFBRXJDLENBQUksR0FBQyxFQUFMLEFBQVksQUFDUixBQUVKLFlBQUksR0FBVSxFQUFBLEFBQU8sUUFBckIsQUFBNkIsQUFFN0IsQUFBTyxBQUNILElBQUEsQUFBSyxBQUNELE1BQUksRUFBQSxBQUFPLFFBQVgsQUFBbUIsT0FDZixFQUFVLEVBQUEsQUFBTyxRQUFqQixBQUF5QixBQUM3QixBQUNKLE1BQUEsQUFBSyxBQUNELE1BQUksRUFBQSxBQUFPLFFBQVgsQUFBbUIsUUFDZixFQUFVLEVBQUEsQUFBTyxRQVA3QixBQU9ZLEFBQXlCLEFBQzdCLEFBR1IsY0FBQSxBQUFRLEFBRVgsS0FwQkQsQUFzQkEsQUFDQSxFQUNJLEFBQVMsOENBQVQsQUFBd0QsQUFDeEQsYUFNQSxHQURKLEFBQ3VCLE9BQ25CLEVBQW1CLEVBRnZCLEFBRXdDLFVBQ3BDLEVBQVksRUFIaEIsQUFHaUMsS0FFN0IsRUFMSixBQUtnQixBQUFFLEtBQ2QsRUFOSixBQU1jLEFBQUUsS0FFWixFQUFBLEFBQVksVUFBVSxBQUVsQixPQUFPLEdBQUEsQUFBRSxLQUFPLEVBQUEsQUFBRSxLQUFYLEFBQVMsQUFBTyxhQUF3QixLQUEvQyxBQUFvQyxBQUFXLEFBQUssQUFBWSxBQUFPLEFBQVMsQUFFbkYsa0JBWkwsRUFjSSxFQUFBLEFBQWEsQUFBUyxXQUFRLEFBRTFCLElBQU0sR0FBTixBQUFZLEFBQUUsQUFFZCxLQUFBLEFBQUksQUFBYyxBQUVsQixRQUFJLEVBQUosQUFBTSxLQUNGLEVBQWMsRUFBQSxBQUFFLEtBQUYsQUFBTyxB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RUFBQSxBQUFFLEtBQUYsQUFBTyxBQUFPLFNBQWlCLFVBQVUsQUFBRSxHQUFBLEFBQWMsQUFBUyxNQUFsRSxFQUFvRSxDQUFFLElBRDFFLEFBQ0ksQUFBb0UsQUFBUSxTQUU1RSxBQUVBLElBQU0sR0FBQSxBQUF3QixBQUFTLEFBQUksYUFBTSxBQUU3QyxJQUFJLEdBQU8sS0FBWCxBQUFXLEFBQUssQUFFaEIsWUFBTyxXQUFXLEFBQ2QsQ0FBQSxBQUFpQyxBQUFHLEFBQ2hDLENBREMsQUFBTyxLQUFPLEtBQWYsQUFBZSxBQUFLLFFBRXBCLE1BQU8sS0FBUCxBQUFPLEFBQUssQUFDZixBQUNKLE1BTEQsQUFPSCxDQVhELEFBYUEsSUFBQSxBQUFRLEdBQVIsQUFBVyxBQUFVLFlBQWlCLEVBQXNCLFVBQVUsQUFBRSxHQUFBLEFBQWMsQUFBUyxNQUEvRixBQUFzQyxBQUEyRCxBQUVwRyxPQUVKLEFBRUosQ0F6RUQsQUFBTyxBQTJFVixFQXpHRCxBQTJHSCxDQXp2QkQsR0FBQSxBQXl2QkcsT0F6dkJILEFBeXZCVyxTQXp2QlgsQUF5dkJxQiIsImZpbGUiOiJqcXVlcnkubml0ZS5wcmVsb2FkZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEpRdWVyeSBIZWF2eSBSZXNvdXJjZXNMb2FkZXIgfCBEYW5pZWxlIEZpb3JvbmkgfCBkZmlvcm9uaTkxQGdtYWlsLmNvbSAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsICQsIHVuZGVmaW5lZCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgY29uc3QgX2NvbnNvbGUgPSBmdW5jdGlvbihtZXNzYWdlLCBsZXZlbCl7XG5cbiAgICAgICAgaWYoICF3aW5kb3cuY29uc29sZSApXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgbGV0IGRpc3BsYXkgPSB3aW5kb3cuY29uc29sZS5sb2c7XG5cbiAgICAgICAgc3dpdGNoKGxldmVsKXtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiggd2luZG93LmNvbnNvbGUud2FybiApXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSB3aW5kb3cuY29uc29sZS53YXJuO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmKCB3aW5kb3cuY29uc29sZS5lcnJvciApXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgPSB3aW5kb3cuY29uc29sZS5lcnJvcjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3BsYXkobWVzc2FnZSk7XG5cbiAgICB9O1xuXG4gICAgLy8gfiB+IH4gfiB+IH4gfiB+IH4gfiB+IH5cbiAgICBpZiggISQgKSB7XG4gICAgICAgIF9jb25zb2xlKCdqUXVlcnkgaXMgbmVlZGVkIGZvciBuaXRlUHJlbG9hZGVyIHRvIHdvcmshJywgMik7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIH4gfiB+IH4gfiB+IH4gfiB+IH4gfiB+XG5cblxuICAgIGNvbnN0XG4gICAgICAgIG5hbWVzcGFjZV9wcmVmaXggPSAnbml0ZScsXG4gICAgICAgIG5hbWVzcGFjZV9tZXRob2QgPSBuYW1lc3BhY2VfcHJlZml4KydQcmVsb2FkJyxcbiAgICAgICAgbmFtZXNwYWNlID0gbmFtZXNwYWNlX3ByZWZpeCsnZXInLFxuXG4gICAgICAgICRkb2N1bWVudCA9ICQoZG9jdW1lbnQpLFxuICAgICAgICAkd2luZG93ID0gJCh3aW5kb3cpLFxuXG4gICAgICAgIHVuaXF1ZV9pZCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgIHJldHVybiAkLm5pdGUgPyAkLm5pdGUudW5pcXVlSWQoKSA6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICg5OTk5IC0gMTAwMCkpICsgMTAwMDtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGlzX3Zpc2libGUgPSBmdW5jdGlvbihlbGVtZW50KXtcblxuICAgICAgICAgICAgY29uc3QgJGVsID0gJChlbGVtZW50KTtcblxuICAgICAgICAgICAgbGV0IGluX3ZpZXdwb3J0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmKCAkLm5pdGUgKVxuICAgICAgICAgICAgICAgIGluX3ZpZXdwb3J0ID0gJC5uaXRlLmluVmlld3BvcnQoZWxlbWVudCkucmF0aW87XG5cbiAgICAgICAgICAgIGVsc2V7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgICAgIGluX3ZpZXdwb3J0ID0gISggcmVjdC5yaWdodCA8IDAgfHwgcmVjdC5ib3R0b20gPCAwIHx8IHJlY3QubGVmdCA+ICR3aW5kb3cud2lkdGgoKSB8fCByZWN0LnRvcCA+ICR3aW5kb3cuaGVpZ2h0KCkgKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaW5fdmlld3BvcnQgJiYgJGVsLmlzKCc6dmlzaWJsZScpICYmICRlbC5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbic7XG5cbiAgICAgICAgfSxcblxuICAgICAgICBpc19sb2FkZWQgPSBmdW5jdGlvbihlbGVtZW50KXtcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNvbXBsZXRlICYmXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcihlbGVtZW50Lm5hdHVyYWxXaWR0aCkgPj0gMSAmJlxuICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoZWxlbWVudC5uYXR1cmFsSGVpZ2h0KSA+PSAxXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB8fFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVhZHlTdGF0ZSA+PSAyICYmXG4gICAgICAgICAgICAgICAgZWxlbWVudC52aWRlb1dpZHRoICE9PSAwICYmXG4gICAgICAgICAgICAgICAgZWxlbWVudC52aWRlb0hlaWdodCAhPT0gMFxuICAgICAgICAgICAgKTtcblxuICAgICAgICB9LFxuXG4gICAgICAgIGlzX2h0bWxfb2JqZWN0ID0gZnVuY3Rpb24oIG9iamVjdCApe1xuXG4gICAgICAgICAgICBpZiggdHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaChlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0Lm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiBvYmplY3Quc3R5bGUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qub3duZXJEb2N1bWVudCA9PT0gJ29iamVjdCc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgIGlzX2Zvcm1hdCA9IGZ1bmN0aW9uKCBpdGVtLCBleHBlY3RlZF9mb3JtYXQgKXtcblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBmb3JtYXRfZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2UgOiAnanBbZV0/Z3xnaWZ8cG5nfHRpZltmXT98Ym1wJyxcbiAgICAgICAgICAgICAgICAgICAgYXVkaW8gOiAnbXAzfG9nZycsXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvIDogJ21wNHxvZ3Z8b2dnfHdlYm0nXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmb3JtYXRfbmFtZXMgPSBPYmplY3Qua2V5cyhmb3JtYXRfZXh0ZW5zaW9ucyksXG4gICAgICAgICAgICAgICAgYmFzZTY0X2hlYWRpbmcgPSAnXFw7YmFzZTY0XFwsJztcblxuICAgICAgICAgICAgbGV0IG91dHB1dCA9IHsgZm9ybWF0OiBudWxsLCBleHRlbnNpb246IG51bGwgfTtcblxuICAgICAgICAgICAgaWYoIHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyApIHtcblxuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtLnNwbGl0KCc/JylbMF07IC8vIGdldCByaWQgb2YgcXVlcnkgc3RyaW5nc1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtLnNwbGl0KCcjJylbMF07IC8vIGdldCByaWQgb2YgaGFzaGVzXG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gJycpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgICAgIGxldCBmb3JtYXRfcXVldWUgPSB1bmRlZmluZWQgIT09IGV4cGVjdGVkX2Zvcm1hdCA/IFsgZXhwZWN0ZWRfZm9ybWF0IF0gOiBmb3JtYXRfbmFtZXM7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHggaW4gZm9ybWF0X3F1ZXVlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdF9xdWV1ZS5oYXNPd25Qcm9wZXJ0eSh4KSl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXcgUmVnRXhwKCcoXFwuKCcgKyBmb3JtYXRfZXh0ZW5zaW9uc1tmb3JtYXRfcXVldWVbeF1dICsgJykkKXwnICsgYmFzZTY0X2hlYWRpbmcsICdnJykudGVzdChpdGVtKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAoYmFzZTY0X2hlYWRpbmcsICdnJykudGVzdChpdGVtKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaGVzNjQgPSBpdGVtLm1hdGNoKG5ldyBSZWdFeHAoJ15kYXRhOicgKyBmb3JtYXRfcXVldWVbeF0gKyAnXFwvKCcgKyBmb3JtYXRfZXh0ZW5zaW9uc1tmb3JtYXRfcXVldWVbeF1dICsgJyknLCAnZycpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFtYXRjaGVzNjQgfHwgbnVsbCA9PT0gbWF0Y2hlczY0IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM2NCA9IG1hdGNoZXM2NFswXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZm9ybWF0ID0gbWF0Y2hlczY0LnJlcGxhY2UoJ2RhdGE6JyArIGZvcm1hdF9xdWV1ZVt4XSArICcvZycsICcnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSBpdGVtLm1hdGNoKG5ldyBSZWdFeHAoZm9ybWF0X2V4dGVuc2lvbnNbZm9ybWF0X3F1ZXVlW3hdXSwgJ2cnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmZvcm1hdCA9IGZvcm1hdF9xdWV1ZVt4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC5leHRlbnNpb24gPSBtYXRjaGVzWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGlzX2h0bWxfb2JqZWN0KGl0ZW0pICl7XG5cbiAgICAgICAgICAgICAgICBsZXQgdGFnX25hbWUgPSBpdGVtLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiggJC5pbkFycmF5KHRhZ19uYW1lLCBmb3JtYXRfbmFtZXMpID4gLTEgKVxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQuZm9ybWF0ID0gaXRlbS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgICAgICAgICBpZiggdGFnX25hbWUgPT09ICdpbWcnIClcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LmZvcm1hdCA9ICdpbWFnZSc7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICBcbiAgICAgICAgfTtcblxuICAgIGNsYXNzIFJlc291cmNlTG9hZGVyIHtcblxuICAgICAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcblxuICAgICAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzICA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgICAgICBwbGF5dGhyb3VnaCAgOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzcmNzZXRBdHRyICAgOiAnZGF0YS1zcmNzZXQnLFxuICAgICAgICAgICAgICAgIHNyY0F0dHIgICAgICA6ICdkYXRhLXNyYycsXG4gICAgICAgICAgICAgICAgdmlzaWJsZSAgICAgIDogZmFsc2VcbiAgICAgICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGlzLl9pZCAgICAgICAgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5faWRfZXZlbnQgID0gbnVsbDtcblxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCAgID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50ICA9ICQoKTtcblxuICAgICAgICAgICAgdGhpcy5fcmVzb3VyY2UgID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MgICA9IGZhbHNlO1xuXG4gICAgICAgICAgICB0aGlzLl9mb3JtYXQgICAgPSBudWxsO1xuXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFjayAgPSAkLm5vb3A7XG4gICAgICAgICAgICB0aGlzLl9kb25lICAgICAgPSBmdW5jdGlvbihlKXtcblxuICAgICAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrLmNhbGwobnVsbCAvKnRlbXAqLywgc2VsZi5faWQsIHNlbGYuX2VsZW1lbnQuY3VycmVudFNyYyB8fCBzZWxmLl9lbGVtZW50LnNyYyk7XG5cbiAgICAgICAgICAgICAgICBpZiggc2VsZi5fcHJvY2VzcyApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRyaWdnZXJfZXZlbnQgPSBlLnR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBlLnR5cGUuc2xpY2UoMSk7XG5cbiAgICAgICAgICAgICAgICBzZWxmLl8kZWxlbWVudC50cmlnZ2VyKG5hbWVzcGFjZV9wcmVmaXggKyB0cmlnZ2VyX2V2ZW50ICsgJy4nICsgbmFtZXNwYWNlX3ByZWZpeCwgWyBzZWxmLl8kZWxlbWVudCBdKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgc2V0IHJlc291cmNlKCBkYXRhICl7XG5cbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgZWxlbWVudF9yZXNvdXJjZSA9IGlzX2h0bWxfb2JqZWN0KGRhdGEucmVzb3VyY2UpLFxuICAgICAgICAgICAgICAgIHN0cmluZ19yZXNvdXJjZSA9IHR5cGVvZiBkYXRhLnJlc291cmNlID09PSAnc3RyaW5nJztcblxuICAgICAgICAgICAgaWYoICFlbGVtZW50X3Jlc291cmNlICYmICFzdHJpbmdfcmVzb3VyY2UgKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5faWQgPSBkYXRhLmlkO1xuICAgICAgICAgICAgdGhpcy5fZm9ybWF0ID0gaXNfZm9ybWF0KGRhdGEucmVzb3VyY2UpLmZvcm1hdDtcblxuICAgICAgICAgICAgaWYoIHN0cmluZ19yZXNvdXJjZSApe1xuXG4gICAgICAgICAgICAgICAgbGV0IGlzX2ltZyA9IHRoaXMuX2Zvcm1hdCA9PT0gJ2ltYWdlJztcblxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGlzX2ltZyA/ICdpbWcnIDogdGhpcy5fZm9ybWF0KTtcblxuICAgICAgICAgICAgICAgIGlmKCBpc19pbWcgKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5zcmNzZXRBdHRyID0gJ2RhdGEtc3Jjc2V0JztcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5zcmNBdHRyID0gJ2RhdGEtc3JjJztcblxuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlID0gZGF0YS5yZXNvdXJjZTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggZWxlbWVudF9yZXNvdXJjZSApe1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRhdGEucmVzb3VyY2U7XG5cbiAgICAgICAgICAgICAgICBpZiggdGhpcy5fc2V0dGluZ3MudmlzaWJsZSAmJiAhaXNfdmlzaWJsZSh0aGlzLl9lbGVtZW50KSApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl8kZWxlbWVudCA9ICQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmKCBzdHJpbmdfcmVzb3VyY2UgKXtcblxuICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRoaXMuX3NldHRpbmdzLnNyY0F0dHIucmVwbGFjZSgnZGF0YS0nLCAnJyksIHRoaXMuX3Jlc291cmNlKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLl9zZXR0aW5ncy5zcmNzZXRBdHRyLnJlcGxhY2UoJ2RhdGEtJywgJycpLCB0aGlzLl9yZXNvdXJjZSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIodGhpcy5fc2V0dGluZ3Muc3JjQXR0ciwgdGhpcy5fcmVzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHRoaXMuX3NldHRpbmdzLnNyY3NldEF0dHIsIHRoaXMuX3Jlc291cmNlKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pZF9ldmVudCAgPSB0aGlzLl8kZWxlbWVudC5kYXRhKG5hbWVzcGFjZSk7XG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzICAgPSB0aGlzLl9pZF9ldmVudCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5faWRfZXZlbnQgID0gdGhpcy5fcHJvY2VzcyA/IHRoaXMuX2lkX2V2ZW50IDogbmFtZXNwYWNlICsgJ191bmlxdWVfJyArIHVuaXF1ZV9pZCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcHJvY2Vzcygpe1xuXG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHNyYyA9IHRoaXMuX3NldHRpbmdzLnNyY0F0dHIsXG4gICAgICAgICAgICAgICAgc3JjX2NsZWFuID0gdGhpcy5fc2V0dGluZ3Muc3JjQXR0ci5yZXBsYWNlKCdkYXRhLScsICcnKTtcblxuICAgICAgICAgICAgaWYgKCBpc19sb2FkZWQodGhpcy5fZWxlbWVudCkgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Byb2Nlc3MpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50Lm9mZignLicgKyB0aGlzLl9pZF9ldmVudCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9kb25lKG5ldyBFdmVudCgkLmlzTnVtZXJpYyh0aGlzLl9lbGVtZW50Lm5hdHVyYWxXaWR0aCkgPyBuYW1lc3BhY2VfcHJlZml4KydMb2FkJyA6IG5hbWVzcGFjZV9wcmVmaXgrJ0Vycm9yJykpO1xuXG4gICAgICAgICAgICB9ZWxzZXtcblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLl9mb3JtYXQgPT09ICdpbWFnZScgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnRbdGhpcy5fcHJvY2VzcyA/ICdvbicgOiAnb25lJ10oJ2xvYWQuJyArIHRoaXMuX2lkX2V2ZW50ICsgJyBlcnJvci4nICsgdGhpcy5faWRfZXZlbnQsIHRoaXMuX2RvbmUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgICAgICAgICAkcGljdHVyZSA9IHRoaXMuXyRlbGVtZW50LmNsb3Nlc3QoJ3BpY3R1cmUnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyY3NldCA9IHRoaXMuX3NldHRpbmdzLnNyY3NldEF0dHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcmNzZXRfY2xlYW4gPSB0aGlzLl9zZXR0aW5ncy5zcmNzZXRBdHRyLnJlcGxhY2UoJ2RhdGEtJywgJycpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgkcGljdHVyZS5sZW5ndGggJiYgJ0hUTUxQaWN0dXJlRWxlbWVudCcgaW4gd2luZG93ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVEYXRhKHNyY3NldF9jbGVhbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cihzcmNzZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3JjX2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyYyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRwaWN0dXJlLmZpbmQoJ3NvdXJjZVsnICsgc3Jjc2V0ICsgJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCAkcGljdHVyZS5kYXRhKHNyY3NldF9jbGVhbikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3Jjc2V0X2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyY3NldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuXyRlbGVtZW50LmlzKCdbJyArIHNyY3NldCArICddJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIHRoaXMuXyRlbGVtZW50LmRhdGEoc3Jjc2V0X2NsZWFuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3Jjc2V0X2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cihzcmNzZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fJGVsZW1lbnQuaXMoJ1snICsgc3JjICsgJ10nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgdGhpcy5fJGVsZW1lbnQuZGF0YShzcmNfY2xlYW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShzcmNfY2xlYW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyYyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCB0aGlzLl9mb3JtYXQgPT09ICd2aWRlbycgfHwgdGhpcy5fZm9ybWF0ID09PSAnYXVkaW8nICl7Y29uc3QgJHNvdXJjZXMgPSB0aGlzLl8kZWxlbWVudC5maW5kKCdzb3VyY2UnKTtcblxuICAgICAgICAgICAgICAgIC8qIHRvZG8gaWYgdGhpcy5fcHJvY2VzcyA/Pz8gKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbignY2FucGxheXRocm91Z2guJyArIHRoaXMuX2lkX2V2ZW50LCBmdW5jdGlvbigpe1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHNlbGYuX3NldHRpbmdzLnBsYXl0aHJvdWdoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2VsZW1lbnQuY3VycmVudFRpbWUgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCBzZWxmLl8kZWxlbWVudC5pcygnW2F1dG9wbGF5XScpIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2VsZW1lbnQucGxheSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2RvbmUobmV3IEV2ZW50KCdsb2FkJykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uKCdsb2FkZWRtZXRhZGF0YS4nICsgdGhpcy5faWRfZXZlbnQgKyAnIGVycm9yLicgKyB0aGlzLl9pZF9ldmVudCwgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhc2VsZi5fc2V0dGluZ3MucGxheXRocm91Z2ggKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9kb25lKG5ldyBFdmVudChlLnR5cGUgPT09ICdlcnJvcicgPyAnZXJyb3InIDogJ2xvYWQnKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAub24oJ2xvYWRlZG1ldGFkYXRhLicgKyB0aGlzLl9pZF9ldmVudCsnIHByb2dyZXNzLicgKyB0aGlzLl9pZF9ldmVudCwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHNlbGYuX3NldHRpbmdzLnBsYXl0aHJvdWdoICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2VsZi5fZWxlbWVudC5yZWFkeVN0YXRlID4gMCAmJiAhc2VsZi5fZWxlbWVudC5kdXJhdGlvbiApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fZG9uZShuZXcgRXZlbnQoJ2Vycm9yJykpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9lbGVtZW50LnBhdXNlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9lbGVtZW50LnBhdXNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2VsZW1lbnQuY3VycmVudFRpbWUrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKCAkc291cmNlcy5sZW5ndGggKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNvdXJjZXMuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJCh0aGlzKS5pcygnWycgKyBzcmMgKyAnXScpIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsICQodGhpcykuZGF0YShzcmNfY2xlYW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZURhdGEoc3JjX2NsZWFuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoc3JjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fJGVsZW1lbnQuaXMoJ1snICsgc3JjICsgJ10nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgdGhpcy5fJGVsZW1lbnQuZGF0YShzcmNfY2xlYW4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShzcmNfY2xlYW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKHNyYyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCAhdGhpcy5fcHJvY2VzcyApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50LmRhdGEobmFtZXNwYWNlLCB0aGlzLl9pZF9ldmVudCk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSB0aGlzLl9lbGVtZW50LmN1cnJlbnRTcmMgfHwgdGhpcy5fZWxlbWVudC5zcmM7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGFib3J0KCl7XG5cbiAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50XG4gICAgICAgICAgICAgICAgLm9mZignLicgKyB0aGlzLl9pZF9ldmVudCk7XG5cbiAgICAgICAgICAgIGlmKCBpc19sb2FkZWQodGhpcy5fZWxlbWVudCkgKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBzcmMgPSB0aGlzLl8kZWxlbWVudC5hdHRyKCdzcmNzZXQnKSxcbiAgICAgICAgICAgICAgICBzcmNzZXQgPSB0aGlzLl8kZWxlbWVudC5hdHRyKCdzcmMnKTtcblxuICAgICAgICAgICAgaWYoIHVuZGVmaW5lZCAhPT0gc3JjIClcbiAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAuZGF0YSh0aGlzLl9zZXR0aW5ncy5zcmNBdHRyLCBzcmMpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKHRoaXMuX3NldHRpbmdzLnNyY0F0dHIsIHNyYylcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3NyYycpLnJlbW92ZUF0dHIoJ3NyY3NldCcpO1xuXG4gICAgICAgICAgICBpZiggdW5kZWZpbmVkICE9PSBzcmNzZXQgKVxuICAgICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKHRoaXMuX3NldHRpbmdzLnNyY3NldEF0dHIsIHNyY3NldClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIodGhpcy5fc2V0dGluZ3Muc3Jjc2V0QXR0ciwgc3Jjc2V0KVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignc3JjJykucmVtb3ZlQXR0cignc3Jjc2V0Jyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRvbmUoY2FsbGJhY2spe1xuXG4gICAgICAgICAgICBpZiggISQuaXNGdW5jdGlvbihjYWxsYmFjaykgKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXM7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gZnVuY3Rpb24ocmVzb3VyY2Upe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgcmVzb3VyY2UpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9O1xuXG4gICAgfVxuICAgIFxuICAgIGNsYXNzIFJlc291cmNlc0xvYWRlciB7XG5cbiAgICAgICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuXG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbiA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbl9sb2FkZWQgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2NvbGxlY3Rpb25faW5zdGFuY2VzID0gWyBuZXcgUmVzb3VyY2VMb2FkZXIodGhpcy5fc2V0dGluZ3MpIF07XG5cbiAgICAgICAgICAgIGlmICgkLmlzQXJyYXkoY29sbGVjdGlvbikgJiYgKCB0eXBlb2YgY29sbGVjdGlvblswXSA9PT0gJ3N0cmluZycgfHwgaXNfaHRtbF9vYmplY3QoY29sbGVjdGlvblswXSkgKSlcbiAgICAgICAgICAgICAgICBmb3IgKCBjb25zdCByZXNvdXJjZSBpbiBjb2xsZWN0aW9uIClcbiAgICAgICAgICAgICAgICAgICAgaWYoIGNvbGxlY3Rpb24uaGFzT3duUHJvcGVydHkocmVzb3VyY2UpIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3Rpb24ucHVzaCh7IGlkIDogdW5pcXVlX2lkKCksIHJlc291cmNlIDogY29sbGVjdGlvbltyZXNvdXJjZV0gfSk7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBjb2xsZWN0aW9uID09PSAnc3RyaW5nJyB8fCBpc19odG1sX29iamVjdChjb2xsZWN0aW9uKSApXG4gICAgICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbi5wdXNoKHsgaWQgOiB1bmlxdWVfaWQoKSwgcmVzb3VyY2UgOiBjb2xsZWN0aW9uIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgICAgICBzZXF1ZW50aWFsOiBmYWxzZVxuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHRoaXMucGVyY2VudGFnZSA9IDA7XG5cbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gJC5ub29wKCk7XG4gICAgICAgICAgICB0aGlzLl9wcm9ncmVzcyA9ICQubm9vcCgpO1xuICAgICAgICAgICAgdGhpcy5fYWJvcnQgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5fbG9hZGVkID0gMDtcblxuICAgICAgICAgICAgdGhpcy5fbG9vcCA9IGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAgICAgICBpZiAoICF0aGlzLl9jb2xsZWN0aW9uLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGlmKCB0cnVlID09PSB0aGlzLl9jb21wbGV0ZSApe1xuXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrLmNhbGwobnVsbCAvKiB0b2RvIGNvbnRleHQgKi8pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hYm9ydClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG8gdGhpcy5fc2V0dGluZ3Muc2VxdWVudGlhbCAtLT4gbXVzdCBiZSBjYWxsZWQgaW4gdGhlIGZvbGxvd2luZyAuZG9uZSgpIGNhbGwgYW5kIHRha2luZyBhY2NvdW50IG9mIHZpc2liaWxpdHkgY2hlY2sgaW4gUmVzb3VyY2VMb2FkZXIoKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZF9pbnN0YW5jZSA9IG5ldyBSZXNvdXJjZUxvYWRlcih0aGlzLl9zZXR0aW5ncyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29sbGVjdGlvbl9pbnN0YW5jZXMucHVzaChsb2FkX2luc3RhbmNlKTtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkX2luc3RhbmNlLnJlc291cmNlID0gdGhpcy5fY29sbGVjdGlvbltpXTtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkX2luc3RhbmNlLnByb2Nlc3MoKTtcblxuICAgICAgICAgICAgICAgICAgICBsb2FkX2luc3RhbmNlLmRvbmUoZnVuY3Rpb24oaWQsIHJlc291cmNlKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoICQuaW5BcnJheShpZCwgc2VsZi5fY29sbGVjdGlvbl9sb2FkZWQpID09PSAtMSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2xvYWRlZCsrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY29sbGVjdGlvbl9sb2FkZWQucHVzaChpZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBlcmNlbnRhZ2UgPSBzZWxmLl9sb2FkZWQgLyBzZWxmLl9jb2xsZWN0aW9uLmxlbmd0aCAqIDEwMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3Byb2dyZXNzLmNhbGwobnVsbCAvKiB0b2RvICovLCByZXNvdXJjZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLl9sb2FkZWQgPiBzZWxmLl9jb2xsZWN0aW9uLmxlbmd0aCB8fCBzZWxmLl9hYm9ydCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggc2VsZi5fbG9hZGVkID09PSBzZWxmLl9jb2xsZWN0aW9uLmxlbmd0aCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NhbGxiYWNrLmNhbGwobnVsbCAvKiB0b2RvICovKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2NvbXBsZXRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLl9sb29wKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGxvb3AoKXtcblxuICAgICAgICAgICAgdGhpcy5fbG9vcCgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBkb25lKGNhbGxiYWNrKXtcblxuICAgICAgICAgICAgaWYoICEkLmlzRnVuY3Rpb24oY2FsbGJhY2spIClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgX2Z1bmMgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLl9jb2xsZWN0aW9uLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBfZnVuYztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfZnVuYygpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIHByb2dyZXNzKGNhbGxiYWNrKXtcblxuICAgICAgICAgICAgaWYoICEkLmlzRnVuY3Rpb24oY2FsbGJhY2spIClcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIGNvbnN0XG4gICAgICAgICAgICAgICAgY29udGV4dCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgX2Z1bmMgPSBmdW5jdGlvbihyZXNvdXJjZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgcmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmKCB0aGlzLl9jb2xsZWN0aW9uLmxlbmd0aCApXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvZ3Jlc3MgPSBfZnVuYztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfZnVuYygpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICB9O1xuXG4gICAgICAgIGFib3J0KCl7XG5cbiAgICAgICAgICAgIGZvciggY29uc3QgaW5zdGFuY2UgaW4gdGhpcy5fY29sbGVjdGlvbl9pbnN0YW5jZXMgKVxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3Rpb25faW5zdGFuY2VzWyBpbnN0YW5jZSBdLmFib3J0KCk7XG5cbiAgICAgICAgICAgIGlmKCAhdGhpcy5fY29sbGVjdGlvbi5sZW5ndGggKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5fYWJvcnQgPSB0cnVlO1xuXG4gICAgICAgIH07XG5cbiAgICB9XG5cbiAgICBjbGFzcyBDb2xsZWN0aW9uUG9wdWxhdG9yIHtcblxuICAgICAgICBjb25zdHJ1Y3RvcigkZWxlbWVudCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbGxlY3QoIC8qb3V0cHV0Ki8gKSB7IC8vIHRvZG8gb3V0cHV0IHR5cGVzIGVzOiBvbmx5IGVsZW1lbnRzLCBvbmx5LCB1cmxzLCBtaXhlZCwgYWxsIC4uLiBkdW5ub1xuXG4gICAgICAgICAgICBsZXQgY29sbGVjdGlvbiA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdFxuICAgICAgICAgICAgICAgIHRhcmdldHMgPSAnaW1nLCB2aWRlbywgYXVkaW8nLFxuICAgICAgICAgICAgICAgIHRhcmdldHNfZXh0ZW5kZWQgPSB0YXJnZXRzICsgJywgcGljdHVyZSwgc291cmNlJztcblxuICAgICAgICAgICAgbGV0ICR0YXJnZXRzID0gdGhpcy5fJGVsZW1lbnQuZmluZCh0YXJnZXRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl8kZWxlbWVudC5pcyh0YXJnZXRzKSlcbiAgICAgICAgICAgICAgICAkdGFyZ2V0cy5hZGQodGhpcy5fJGVsZW1lbnQpO1xuICAgICAgICAgICAgJHRhcmdldHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbi5wdXNoKHRoaXMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0cnVlID09PSB0aGlzLl9zZXR0aW5ncy5iYWNrZ3JvdW5kcylcbiAgICAgICAgICAgICAgICB0aGlzLl8kZWxlbWVudC5maW5kKCcqJykuYWRkQmFjaygpLm5vdCh0YXJnZXRzX2V4dGVuZGVkKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKSAhPT0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH0pLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goJCh0aGlzKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKS5yZXBsYWNlKC91cmxcXChcInx1cmxcXCgnfHVybFxcKHwoKFwiJylcXCkkKS9pZ20sICcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5hdHRyaWJ1dGVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHIgaW4gdGhpcy5fc2V0dGluZ3MuYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICBpZiggdGhpcy5fc2V0dGluZ3MuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQuZmluZCgnWycgKyBhdHRyICsgJ106bm90KCcgKyB0YXJnZXRzX2V4dGVuZGVkICsgJyknKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2goJCh0aGlzKS5hdHRyKGF0dHIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fJGVsZW1lbnQuaXMoJ1snICsgYXR0ciArICddJykgJiYgIXRoaXMuXyRlbGVtZW50LmlzKHRhcmdldHNfZXh0ZW5kZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24ucHVzaCh0aGlzLl8kZWxlbWVudC5hdHRyKGF0dHIpKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAkW25hbWVzcGFjZV9tZXRob2RdID0gUmVzb3VyY2VzTG9hZGVyO1xuXG4gICAgJC5mbltuYW1lc3BhY2VfbWV0aG9kXSA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKXtcblxuICAgICAgICBpZiggJC5pc0Z1bmN0aW9uKG9wdGlvbnMpIClcbiAgICAgICAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgICAgaWYoICEkLmlzRnVuY3Rpb24oY2FsbGJhY2spIClcbiAgICAgICAgICAgIGNhbGxiYWNrID0gJC5ub29wO1xuICAgICAgICBpZiggdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIClcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcblxuICAgICAgICBsZXQgc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCB7XG5cbiAgICAgICAgICAgIHNyY0F0dHIgICAgICAgOiAnZGF0YS1zcmMnLFxuICAgICAgICAgICAgc3Jjc2V0QXR0ciAgICA6ICdkYXRhLXNyY3NldCcsXG5cbiAgICAgICAgICAgIHZpc2libGUgICAgICAgOiBmYWxzZSxcblxuICAgICAgICAgICAgc2VxdWVudGlhbCAgICA6IGZhbHNlLFxuXG4gICAgICAgICAgICBiYWNrZ3JvdW5kcyAgIDogZmFsc2UsXG4gICAgICAgICAgICBleHRyYUF0dHJzICAgIDogW10sXG5cbiAgICAgICAgICAgIHBsYXl0aHJvdWdoICAgOiBmYWxzZVxuXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmKCAhJC5pc0FycmF5KHNldHRpbmdzLmF0dHJpYnV0ZXMpIClcbiAgICAgICAgICAgIHNldHRpbmdzLmF0dHJpYnV0ZXMgPSBbXTtcbiAgICAgICAgaWYoIHR5cGVvZiBzZXR0aW5ncy5hdHRyaWJ1dGVzID09PSAnc3RyaW5nJyApXG4gICAgICAgICAgICBzZXR0aW5ncy5hdHRyaWJ1dGVzID0gc2V0dGluZ3MuYXR0cmlidXRlcy5zcGxpdCgnICcpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgY29uc3RcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcyxcbiAgICAgICAgICAgICAgICAkZWxlbWVudCA9ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uUG9wdWxhdG9yKCRlbGVtZW50LCBzZXR0aW5ncykuY29sbGVjdCgpLFxuICAgICAgICAgICAgICAgIGV2ZW50X25hbWVzcGFjZSA9IG5hbWVzcGFjZSArICdfJyArIHVuaXF1ZV9pZCgpLFxuICAgICAgICAgICAgICAgIGNsZWFyID0gZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgICAgICAgICAkZG9jdW1lbnQub2ZmKCdzY3JvbGwuJyArIGV2ZW50X25hbWVzcGFjZSk7XG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cub2ZmKCdzY3JvbGwuJytldmVudF9uYW1lc3BhY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50LnJlbW92ZURhdGEobmFtZXNwYWNlKTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBsb2FkX2luc3RhbmNlID0gJGVsZW1lbnQuZGF0YShuYW1lc3BhY2UpO1xuXG4gICAgICAgICAgICBpZiggdW5kZWZpbmVkICE9PSBsb2FkX2luc3RhbmNlICkge1xuXG4gICAgICAgICAgICAgICAgbG9hZF9pbnN0YW5jZS5hYm9ydCgpO1xuXG4gICAgICAgICAgICAgICAgY2xlYXIoKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2FkX2luc3RhbmNlID0gbmV3IFJlc291cmNlc0xvYWRlcihjb2xsZWN0aW9uLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIGxvYWRfaW5zdGFuY2UucHJvZ3Jlc3MoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgJGVsZW1lbnQudHJpZ2dlcihuYW1lc3BhY2VfcHJlZml4KydQcm9ncmVzcy4nK25hbWVzcGFjZV9wcmVmaXgsIFskZWxlbWVudF0pO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbG9hZF9pbnN0YW5jZS5kb25lKGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIGNsZWFyKCk7XG5cbiAgICAgICAgICAgICAgICAkZWxlbWVudC50cmlnZ2VyKG5hbWVzcGFjZV9wcmVmaXgrJ0xvYWQuJytuYW1lc3BhY2VfcHJlZml4LCBbJGVsZW1lbnRdKTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSAkLm5vb3A7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKG5hbWVzcGFjZSwgbG9hZF9pbnN0YW5jZSk7XG5cbiAgICAgICAgICAgIGlmKCBzZXR0aW5ncy52aXNpYmxlICl7XG5cbiAgICAgICAgICAgICAgICBpZiggJC5uaXRlIClcbiAgICAgICAgICAgICAgICAgICAgJC5uaXRlLnNjcm9sbChldmVudF9uYW1lc3BhY2UsIGZ1bmN0aW9uKCl7IGxvYWRfaW5zdGFuY2UubG9vcCgpOyB9LCB7IGZwcyA6IDI1IH0pO1xuXG4gICAgICAgICAgICAgICAgZWxzZXtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aHJvdHRsZV9zY3JvbGxfZXZlbnQgPSBmdW5jdGlvbihmbiwgd2FpdCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHRpbWUgKyB3YWl0IC0gRGF0ZS5ub3coKSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICR3aW5kb3cub24oJ3Njcm9sbC4nK2V2ZW50X25hbWVzcGFjZSwgdGhyb3R0bGVfc2Nyb2xsX2V2ZW50KGZ1bmN0aW9uKCl7IGxvYWRfaW5zdGFuY2UubG9vcCgpOyB9LCAxMDAwKSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcblxuICAgIH07XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSk7Il19
