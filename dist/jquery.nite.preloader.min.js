"use strict";var _createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a};function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}(function(a,b,c){"use strict";var d=Math.floor,e="nite",f=e+"Preload",g=f+"er";if(function(a){a.console||(a.console={});for(var b,c,d=a.console,e=function(){},f=["memory"],g=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profiles","profileEnd","show","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"];b=f.pop();)d[b]||(d[b]={});for(;c=g.pop();)d[c]||(d[c]=e)}(a),!c)return console.error("jQuery is needed for "+g+" to work!"),void 0;Array.prototype.findIndex=Array.prototype.findIndex||function(a){if(null===this)throw new TypeError("Array.prototype.findIndex called on null or undefined");else if("function"!=typeof a)throw new TypeError("callback must be a function");for(var b=Object(this),c=b.length>>>0,d=arguments[1],e=0;e<c;e++)if(a.call(d,b[e],e,b))return e;return-1},[].filter||(Array.prototype.filter=function(f,a,b,c,d){for(d in b=this,c=[],b)~~d+""==d&&0<=d&&f.call(a,b[d],+d,b)&&c.push(b[d]);return c});var h=function(a){return a.charAt(0).toUpperCase()+a.slice(1)},i=c(b),j=c(a),k=function(){return c.nite&&"uniqueId"in c.nite?c.nite.uniqueId():d(8999*Math.random())+1e3},l=function(a){var b=c(a),d=!1;if(c.nite&&"inViewport"in c.nite)d=c.nite.inViewport(a).ratio;else{var e=a.getBoundingClientRect();d=!(0>e.right||0>e.bottom||e.left>j.width()||e.top>j.height())}return d&&b.is(":visible")&&"hidden"!==b.css("visibility")},m=function(a){if("object"!==("undefined"==typeof a?"undefined":_typeof(a)))return!1;try{return a instanceof HTMLElement}catch(b){return 1===a.nodeType&&"object"===_typeof(a.style)&&"object"===_typeof(a.ownerDocument)}},n=function(a){return m(a)&&"currentSrc"in a&&a.currentSrc.length&&("complete"in a&&a.complete||"readyState"in a&&2<=a.readyState)},o=function(a){return n(a)&&("naturalWidth"in a&&0===d(a.naturalWidth)||"videoWidth"in a&&0===a.videoWidth)},p=function(a,b){var d={image:"jp[e]?g|gif|png|tif[f]?|bmp",audio:"mp3|ogg",video:"mp4|ogv|ogg|webm"},e=Object.keys(d),f={format:null,extension:null};if("string"==typeof a){if(a=a.split("?")[0],a=a.split("#")[0],""===a)return!1;var g=void 0===b?e:[b];for(var h in g)if(g.hasOwnProperty(h)&&new RegExp("(.("+d[g[h]]+")$)|"+";base64,","g").test(a))if(/;base64,/g.test(a)){var i=a.match(new RegExp("^data:"+g[h]+"/("+d[g[h]]+")","g"));if(!i||null===i)continue;i=i[0],f.format=i.replace("data:"+g[h]+"/g","");break}else{var j=a.match(new RegExp(d[g[h]],"g"));if(j){f.format=g[h],f.extension=j[0];break}}}if(m(a)){var k=a.tagName.toLowerCase();-1<c.inArray(k,e)&&(f.format=a.tagName.toLowerCase()),"img"===k&&(f.format="image")}return f},q=function(){function d(a){var b=this;_classCallCheck(this,d),this._settings=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",playthrough:!1,visible:!1},a),this._id=null,this._id_event=null,this._element=null,this._$element=c(),this._resource=null,this._busy=!1,this._format=null,this._done=c.noop,this._success=c.noop,this._error=c.noop,this._callback=function(a){b._$element.removeData(g),b._busy=!1;var c=[b._element,a.type,b._element.currentSrc||b._element.src,b._id];b["error"===a.type?"_error":"_success"].apply(b,c),b._done.apply(b,c)}}return _createClass(d,[{key:"process",value:function(){var b=this,d=this._settings.srcAttr,e=this._settings.srcAttr.replace("data-","");if(n(this._element))return this._busy||this._$element.off("."+this._id_event),this._callback(new Event(o(this._element)?"error":"load")),!1;if(this._settings.visible&&!l(this._element))return!1;if("image"===this._format){this._$element[this._busy?"on":"one"]("load."+this._id_event+" error."+this._id_event,this._callback);var f=this._$element.closest("picture"),h=this._settings.srcsetAttr,i=this._settings.srcsetAttr.replace("data-","");f.length&&"HTMLPictureElement"in a?(this._$element.removeData(i).removeAttr(h).removeData(e).removeAttr(d),f.find("source["+h+"]").attr("srcset",f.data(i)).removeData(i).removeAttr(h)):(this._$element.is("["+h+"]")&&this._$element.attr("srcset",this._$element.data(i)).removeData(i).removeAttr(h),this._$element.is("["+d+"]")&&this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d))}else if("video"===this._format||"audio"===this._format){var j=!0===this._settings.playthrough,k="full"===this._settings.playthrough,m=this._$element.find("source"),p=function(a){var b=Math.round;return a.buffered.length&&1==b(a.buffered.end(0))/b(a.seekable.end(0))},q=!1;if(m.length){var r=this;m.each(function(){var a=c(this);a.is("["+d+"]")&&(a.attr("src",a.data(e)).removeData(e).removeAttr(d),q=!0)})[this._busy?"on":"one"]("error."+this._id_event,function(a){var b=g+"_error";c(this).data(b,!0),m.length===m.filter(function(){return!0===c(this).data(b)}).length&&r._callback(a)})}else this._$element.is("["+d+"]")&&(this._$element.attr("src",this._$element.data(e)).removeData(e).removeAttr(d)[this._busy?"on":"one"]("error."+this._id_event,this._callback),q=!0);q&&this._element.load(),this._$element[this._busy?"on":"one"]("loadedmetadata."+this._id_event,function(){if(j||k||b._callback(new Event("load")),k){var a=setInterval(function(){var c=0<b._element.readyState&&!b._element.duration;c||p(b._element)?(b._element.currentTime=0,!c&&!b._busy&&b._element.paused&&b._$element.is("[autoplay]")&&b._element.play(),clearInterval(a),b._callback(new Event(c?"error":"load"))):(!b._element.paused&&b._element.pause(),!b._busy&&(b._element.currentTime+=2))},500);b._$element.data(b._id_event,a)}})[this._busy?"on":"one"]("canplay."+this._id_event,function(){k&&0===b._element.currentTime&&!p(b._element)&&b._element.currentTime++})[this._busy?"on":"one"]("canplaythrough."+this._id_event,function(){j&&b._callback(new Event("load"))})}else return!1;return this._busy||this._$element.data(g,this._id_event),this._resource=this._element.currentSrc||this._element.src,!this._busy}},{key:"done",value:function(a){c.isFunction(a)&&(this._done=function(b,c,d,e){a.apply(this,[b,c,d,e])})}},{key:"abort",value:function(){if(this._$element.off("."+this._id_event),!n(this._element)){var a=this._$element.attr("srcset"),b=this._$element.attr("src");void 0!==a&&this._$element.data(this._settings.srcAttr,a).attr(this._settings.srcAttr,a).removeAttr("src").removeAttr("srcset"),void 0!==b&&this._$element.data(this._settings.srcsetAttr,b).attr(this._settings.srcsetAttr,b).removeAttr("src").removeAttr("srcset")}}},{key:"resource",set:function(a){var d=m(a.resource),e="string"==typeof a.resource;if(d||e){if(this._id=a.id,this._format=p(a.resource).format,e){var f="image"===this._format;this._element=b.createElement(f?"img":this._format),f&&(this._settings.srcsetAttr="data-srcset"),this._settings.srcAttr="data-src",this._resource=a.resource}d&&(this._element=a.resource),this._$element=c(this._element),e&&this._$element.data(this._settings.srcAttr.replace("data-",""),this._resource).data(this._settings.srcsetAttr.replace("data-",""),this._resource).attr(this._settings.srcAttr,this._resource).attr(this._settings.srcsetAttr,this._resource),this._id_event=this._$element.data(g),this._busy=void 0!==this._id_event,this._id_event=this._busy?this._id_event:g+"_unique_"+this._element.tagName+"_"+k()}}}]),d}(),r=function(){function a(b,d){var e=this;if(_classCallCheck(this,a),this._collection=[],this._collection_loaded=[],this._collection_instances=[],this._collection_pending=[],this._resources_loaded=[],c.isArray(b)&&("string"==typeof b[0]||m(b[0])))for(var f in b)b.hasOwnProperty(f)&&this._collection.push({id:k(),resource:b[f]});("string"==typeof b||m(b))&&this._collection.push({id:k(),resource:b}),this._settings=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",playthrough:!1,visible:!1},d),this.percentage=0,this._done=c.noop,this._progress=c.noop,this._success=c.noop,this._error=c.noop,this._abort=!1,this._loaded=0,this._complete=!1,this._busy=!1,(this._loop=function(){setTimeout(function(){e.loop()},25)})()}return _createClass(a,[{key:"loop",value:function(){var a=this;this._collection_pending=[];for(var b,d=!0===this._settings.sequential,f=function(b){if(a._abort)return"break";var f=a._collection[b].id,g=a._collection_instances.findIndex(function(a){return a.id===f}),i=new q(a._settings);-1===g?(a._collection_instances.push({id:f,instance:i}),g=a._collection_instances.findIndex(function(a){return a.id===f})):a._collection_instances[g].instance=i,i.resource=a._collection[b],i.done(function(b,f,g,i){if(!(a._complete||a._abort)){var j=-1===c.inArray(i,a._collection_loaded);if(j){a._collection_loaded.push(i),a._busy=!1,a._loaded++,a.percentage=100*(a._loaded/a._collection.length),a.percentage=parseFloat(a.percentage.toFixed(4));var k={resource:g,status:f};a._resources_loaded.push(k),a._progress.call(a,k),a["error"===f?"_error":"_success"].call(a,k),c(b).trigger(e+h(f)+"."+e,[b,g])}a._loaded===a._collection.length?(a._done.call(a,a._resources_loaded),a._complete=!0):j&&d&&a._collection_pending.length&&(a._collection_pending=a._collection_pending.filter(function(a){return a.id!==i}),a._collection_pending.length&&(a._busy=a._collection_pending[0].instance.process()))}}),d&&(!d||a._busy)?d&&a._busy&&(!a._settings.visible||a._settings.visible&&l(i._element))&&a._collection_pending.push({id:f,instance:i}):a._busy=i.process()},g=0;g<this._collection.length&&(b=f(g),"break"!==b);g++);}},{key:"done",value:function(a){if(c.isFunction(a)){var b=function(b){a.call(this,b)};this._collection.length?(this._done=b,this._loop()):b()}}},{key:"progress",value:function(a){if(c.isFunction(a)){var b=function(b){a.call(this,b)};this._collection.length&&(this._progress=b,this._loop())}}},{key:"success",value:function(a){if(c.isFunction(a)){var b=function(b){a.call(this,b)};this._collection.length&&(this._success=b,this._loop())}}},{key:"error",value:function(a){if(c.isFunction(a)){var b=function(b){a.call(this,b)};this._collection.length&&(this._error=b,this._loop())}}},{key:"abort",value:function(){for(var a in this._collection_instances)this._collection_instances[a].instance.abort();this._collection.length&&(this._abort=!0)}}]),a}(),s=function(){function a(b,d){_classCallCheck(this,a),this._$element=b,this._element=b[0],this._settings=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",backgrounds:!1,attributes:[]},d)}return _createClass(a,[{key:"collect",value:function(a){var b=[],d="plain"===a,e=this._settings.srcAttr,f=this._settings.srcsetAttr,g="img, video, audio",h=g+", picture, source",i=this._$element.find(g);if(this._$element.is(g)&&(i=i.add(this._$element)),i=i.filter(function(){var a=c(this),b="["+e+"], ["+f+"]";return a.is(b)||a.children(h).filter(b).length}),i.each(function(){var a={element:this,resource:c(this).attr(e)||c(this).attr(f)};d&&(a=a.element),b.push(a)}),!0===this._settings.backgrounds&&this._$element.find("*").addBack().not(h).filter(function(){return"none"!==c(this).css("background-image")}).each(function(){var a={element:this,resource:c(this).css("background-image").replace(/url\("|url\('|url\(|(("')\)$)/igm,"")};d&&(a=a.resource),b.push(a)}),this._settings.attributes.length){var j=function(a){if(this._settings.attributes.hasOwnProperty(a)&&(this._$element.find("["+a+"]:not("+h+")").each(function(){let e={element:this,resource:c(this).attr(a)};d&&(e=e.resource),b.push(e)}),this._$element.is("["+a+"]")&&!this._$element.is(h))){let c={element:this._element,resource:this._$element.attr(a)};d&&(c=c.resource),b.push(c)}};for(const a in this._settings.attributes)j(a)}return b}}]),a}();c[f]=r;var t=[];c.fn[f]=function(a){var b=a;"object"!==("undefined"==typeof a?"undefined":_typeof(a))&&(a={});var d=c.extend(!0,{srcAttr:"data-src",srcsetAttr:"data-srcset",visible:!1,sequential:!1,backgrounds:!1,extraAttrs:[],playthrough:!1,early:!1,earlyTimeout:0,onProgress:c.noop,onLoad:c.noop,onError:c.noop,onComplete:c.noop},a),f=d.onComplete;return c.isFunction(b)&&(f=b),c.isArray(d.attributes)||(d.attributes=[]),"string"==typeof d.attributes&&(d.attributes=d.attributes.split(" ")),this.each(function(){var a=this,b=c(a),l=new s(b,d).collect("plain"),m=g+"_"+k(),n=new r(l,d);if(t.push({id:m,instance:n,element:a,timeout:null}),n.progress(function(f){b.trigger(e+"Progress."+e,[a,f]);var g=[n,f];c.isFunction(d.onProgress)&&d.onProgress.apply(a,g);var i=h(f.status);c.isFunction(d["on"+i])&&d["on"+i].apply(a,g)}),n.done(function(g){for(var h in b.trigger(e+"Complete."+e,[a,g]),f.apply(a,[n,g]),d.visible&&c(c.nite&&"scroll"in c.nite?i:j).off("scroll."+m),t=t.filter(function(a){return a.id!==m}),t){var k=t[h];b.is(k.element)&&k.instance.loop()}}),d.visible)if(c.nite&&"scroll"in c.nite)c.nite.scroll(m,function(){n.loop()},{fps:25});else{var o=function(a,b){var c=Date.now();return function(){0>c+b-Date.now()&&(a(),c=Date.now())}};j.on("scroll."+m,o(function(){n.loop()},1e3))}if(!0===d.early)for(var p in t)if(t[p].id===m){var q=function(){var a=t[p];return clearTimeout(a.timeout),a.timeout=setTimeout(function(){a.instance._settings.visible=!1,a.instance._settings.sequential=!0,a.instance.loop()},c.isNumeric(d.earlyTimeout)?parseInt(d.earlyTimeout):0),"break"}();if("break"===q)break}})}})(window,document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
